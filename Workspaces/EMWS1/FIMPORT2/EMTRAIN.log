*------------------------------------------------------------*
* Training Log
Date:                September 24, 2020
Time:                11:17:17
*------------------------------------------------------------*
14714  proc freq data=EMWS1.FIMPORT2_VariableSet noprint;
14715  table ROLE*LEVEL/out=WORK.FIMPORT2META;
14716  run;

NOTE: There were 11 observations read from the data set EMWS1.FIMPORT2_VARIABLESET.
NOTE: The data set WORK.FIMPORT2META has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

14717  proc print data=WORK.FIMPORT2META label noobs;
14718  var ROLE LEVEL COUNT;
14719  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14720  title9 ' ';
14721  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14722  run;

NOTE: There were 6 observations read from the data set WORK.FIMPORT2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

14723  title10;

14724  %let EMEXCEPTIONSTRING=;
15065  *------------------------------------------------------------*;
15066  * FIMPORT2: Generation of macros and macro variables;
15067  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15068  *------------------------------------------------------------*;

15069  %let EMEXCEPTIONSTRING=;
15070  *------------------------------------------------------------*;
15071  * TRAIN: FIMPORT2;
15072  *------------------------------------------------------------*;
15073  %let EM_ACTION = TRAIN;
15074  %let syscc = 0;
15075  /* Fimport.source */
15076  %macro main;
15077        %if %upcase(&EM_ACTION) = CREATE %then %do;
15078           filename temp catalog 'sashelp.emsamp.Fimport_create.source';
15079           %include temp;
15080           filename temp;
15081           %create;
15082        %end;
15083        %else
15084        %if %upcase(&EM_ACTION) = TRAIN %then %do;
15085           filename temp catalog 'sashelp.emsamp.Fimport_train.source';
15086           %include temp;
15087           filename temp;
15088           %train;
15089        %end;
15090        %else
15091        %if %upcase(&EM_ACTION) = UPDATE %then %do;
15092           filename temp catalog 'sashelp.emsamp.Fimport_update.source';
15093           %include temp;
15094           filename temp;
15095           %update;
15096        %end;
15097        %else
15098        %if %upcase(&EM_ACTION) = PROPERTY %then %do;
15099           filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
15100           %include temp;
15101           filename temp;
15102           %property;
15103        %end;
15104         %else
15105        %if %upcase(&EM_ACTION) = SCORE %then %do;
15106           filename temp catalog 'sashelp.emsamp.Fimport_score.source';
15107           %include temp;
15108           filename temp;
15109           %score;
15110        %end;
15111        %else
15112        %if %upcase(&EM_ACTION) = REPORT %then %do;
15113           filename temp catalog 'sashelp.emsamp.Fimport_report.source';
15114           %include temp;
15115           filename temp;
15116           %report;
15117        %end;
15118        %else
15119        %if %upcase(&EM_ACTION) = OPENVARIABLESET %then %do;
15120           filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
15121           %include temp;
15122           filename temp;
15123           %openvariableset;
15124        %end;
15125        %else
15126        %if %upcase(&EM_ACTION) = CLOSEVARIABLESET %then %do;
15127           filename temp catalog 'sashelp.emsamp.Fimport_actions.source';
15128           %include temp;
15129           filename temp;
15130           %closevariableset;
15131        %end;
15132  %mend main;
15133  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMSAMP.FIMPORT_TRAIN.SOURCE.
15134 +%EM_GETNAME(key=USERIMPORTFILE, type=FILE, extension=txt);
15135 +%macro appendExt;
15136 +   data _null_;
15137 +      tempuif =  trim("&EM_USER_USERIMPORTFILE");
15138 +      rfile = reverse(tempuif);
15139 +      period = indexc(rfile,".");
15140 +      uif = substr(tempuif, 1, length(tempuif)- period+1);
15141 +      newuif = trim(uif)||trim("&EM_PROPERTY_FILETYPE");
15142 +      call symput("EM_USER_USERIMPORTFILE",%bquote(newuif));
15143 +   run;
15144 +%mend appendExt;
15146 +%macro getNobs(ds);
15147 + %global dset nobs;
15148 + %let dset=&ds;
15149 + %let dsid = %sysfunc(open(&dset));
15150 + %if &dsid %then %do;
15151 +      %let nobs =%sysfunc(attrn(&dsid,nobs));
15152 +      %let rc = %sysfunc(close(&dsid));
15153 +   %end;
15154 + %else %put open for data set &dset failed - %sysfunc(sysmsg());
15155 +%mend getNobs;
15156 +%macro keepordrop;
15157 +  proc contents data=work.importfile noprint
15158 +  out=work.importattrs;
15159 +  run;
15160 +  %getNobs(work.importattrs);
15161 +  data _null_;
15162 +    set  work.importattrs;
15163 +    call symput("varname"||left(_n_),name);
15164 +  run;
15166 +  %put nobs=&nobs  maxcols=&EM_PROPERTY_MAXCOLS;
15167 +  /* importattrs contains 1 observation for each VARIABLE in the data set. */
15168 +  %if &nobs > &EM_PROPERTY_MAXCOLS %then %do;
15169 +     %let diff = %eval(&nobs - &EM_PROPERTY_MAXCOLS);
15170 +     %put diff=&diff;
15171 +     %if %eval(&diff ge &EM_PROPERTY_MAXCOLS) %then %do;
15172 +         %let kORd = keep;
15173 +             %let start=1;
15174 +             %let end = &EM_PROPERTY_MAXCOLS;
15175 +       %end;
15176 +     %else %do;
15177 +         %let kORd = drop;
15178 +             %let start = &EM_PROPERTY_MAXCOLS + 1;
15179 +             %let end = &nobs;
15180 +       %end;
15181 +     data &em_user_data;
15182 +        set &em_user_data;
15183 +        &kORd
15184 +        %do i = &start %to &end;
15185 +            &&varname&i
15186 +         %end;
15187 +        ;
15188 +     run;
15189 +%end;
15190 +%mend keepordrop;
15191 +%macro dropformatvars;
15192 +   %put fmtcnt=&fmtcnt;
15193 +   data new;
15194 +     set work.importfile;
15195 +     %do i = 1 %to &fmtcnt;
15196 +       x1zy&i =put(&&varname&i,&&fmt&i);
15197 +     %end;
15198 +   run;
15199 +   data new;
15200 +     set new;
15201 +     drop
15202 +     %do i = 1 %to &fmtcnt;
15203 +     &&varname&i
15204 +     %end;
15205 +     ;
15206 +   run;
15207 +   proc datasets library=work nolist;
15208 +     modify new;
15209 +     %do i = 1 %to &fmtcnt;
15210 +     rename x1zy&i=&&varname&i;
15211 +     %end;
15212 +   run; quit;
15213 +   data work.importfile;
15214 +     set new;
15215 +   run;
15216 +%mend;
15218 +%macro procimport(out=);
15219 +   %if %upcase(&EM_PROPERTY_FILETYPE)=MDB %then %do;
15220 +      proc import table=%sysfunc(trim(&EM_PROPERTY_ACCESSTABLE))
15221 +         out=&out
15222 +         dbms = ACCESS
15223 +         replace;
15224 +         database="%trim(&_IFILENAME)"
15225 +   %end;
15226 +   %else %do;
15227 +       proc import datafile="%trim(&_IFILENAME)"
15228 +          out=&out
15230 +      %put filetype=*&EM_PROPERTY_FILETYPE.*;
15231 +      %put delimiter=*&EM_PROPERTY_DELIMITER.*;
15232 +      %if %upcase(&EM_PROPERTY_FILETYPE) ^= TXT %then %do;
15233 +         dbms=&EM_PROPERTY_FILETYPE
15234 +      %end;
15235 +      %else %do;
15236 +         dbms=TAB
15237 +      %end;
15238 +      /* Work around for the following defects:S0560899 and S0560009.   */
15239 +      %let sasEnv=%sysfunc(getlocenv());
15240 +      %if %upcase(&EM_PROPERTY_FILETYPE) = XLS and %upcase(&sasEnv) ^= SBCS %then %do;
15241 +         dbms=EXCEL
15242 +      %end;
15244 +      replace;
15245 +      %if %substr(%upcase(&EM_PROPERTY_FILETYPE),1,2)=WK | %upcase(&EM_PROPERTY_FILETYPE)=XLS
15246 +       | %upcase(&EM_PROPERTY_FILETYPE)=DLM | %upcase(&EM_PROPERTY_FILETYPE)=CSV
15247 +       | %upcase(&EM_PROPERTY_FILETYPE)=TAB | %upcase(&EM_PROPERTY_FILETYPE)=TXT %then %do;
15248 +        %if %length(&EM_PROPERTY_NAMEROW) > 0 %then %do;
15249 +            getnames=&EM_PROPERTY_NAMEROW;
15250 +        %end;
15251 +      %end;
15252 +      %if %upcase(&EM_PROPERTY_FILETYPE)=CSV | %upcase(&EM_PROPERTY_FILETYPE)=DLM |
15253 +          %upcase(&EM_PROPERTY_FILETYPE=TXT)  %then %do;
15254 +         %if (%length(%trim(%bquote(&EM_PROPERTY_DELIMITER))) > 0) %then %do;
15255 +            %if "%upcase(&EM_PROPERTY_DELIMITER)"="SP" %then %do;
15256 +               delimiter=" ";
15257 +            %end;
15258 +            %else %if "%upcase(&EM_PROPERTY_DELIMITER)"="TAB" %then %do;
15259 +               /* Do not specifiy a delimiter */
15260 +            %end;
15261 +            %else %do;
15262 +               delimiter="&EM_PROPERTY_DELIMITER";
15263 +            %end;
15264 +         %end;
15265 +         %if %eval(&EM_PROPERTY_SKIPROWS > 0) %then %do;
15266 +            datarow=&EM_PROPERTY_SKIPROWS;
15267 +            /* Guessingrows must be >= skiprows */
15268 +            %if %eval(&EM_PROPERTY_GUESSROWS < &EM_PROPERTY_SKIPROWS ) %then %do;
15269 +              %let EM_PROPERTY_GUESSROWS = &EM_PROPERTY_SKIPROWS;
15270 +            %end;
15271 +         %end;
15272 +         %if %eval(&EM_PROPERTY_GUESSROWS > 0) %then %do;
15273 +            guessingrows=&EM_PROPERTY_GUESSROWS;
15274 +         %end;
15275 +       %end;
15276 +      %if %upcase(&EM_PROPERTY_FILETYPE)=DTA | %upcase(&EM_PROPERTY_FILETYPE)=JMP
15277 +                 | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
15278 +            FMTLIB = work.formats;
15279 +      %end;
15280 +   %end;
15281 +   run;
15282 +%mend procimport;
15284 +%macro train;
15286 +   %let vvnString = %sysfunc(getoption(validvarname));
15288 +   %em_getname(key=DATA,           type=DATA);
15289 +   %em_getname(key=EMCMETADEFAULT, type=DATA);
15290 +   %em_getname(key=EMTMETADEFAULT, type=DATA);
15291 +   %em_getname(key=EMSTATDEFAULT, type=DATA);
15293 +   %appendExt;
15295 +   %let _IFILENAME = %nrbquote(%trim(&EM_PROPERTY_IFILENAME));
15296 +   %if %upcase(&EM_PROPERTY_IMPORTTYPE) = LOCAL %then %do;
15297 +       %if %nrbquote(%sysfunc(fileexist(&EM_USER_USERIMPORTFILE))) %then
15298 +           %let _IFILENAME = %nrbquote(&EM_USER_USERIMPORTFILE);
15299 +   %end;
15301 +   %if ^%sysfunc(fileexist(%nrbquote(&_IFILENAME))) %then %do;
15302 +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTRAININGCODEFILE,%nrbquote(&_IFILENAME);
15303 +       %goto endtrain;
15304 +   %end;
15306 +   options validvarname=ANY;
15307 +   %procimport(out=work.importfile);
15309 +   %if %upcase(&EM_PROPERTY_FILETYPE) = DTA | %upcase(&EM_PROPERTY_FILETYPE) = JMP
15310 +              | %upcase(&EM_PROPERTY_FILETYPE)=SAV %then %do;
15311 +      %global fmtcnt;
15312 +      %let fmtcnt=0;
15313 +      proc contents data=work.importfile out=work.impattrs noprint;
15314 +      run;
15315 +      data _null_;
15316 +        set work.impattrs;
15317 +        if _n_=1 then i=0;
15318 +        if substr(format,1,1) ^= "$" and length(trim(format)) > 1 then do;
15319 +           i = i+1;
15320 +           varname = substr(name, 1, length(name));
15321 +           call symput("fmt"||left(i), trim(format)||".");
15322 +           call symput("varname"||left(i), varname);
15323 +           call symput("fmtcnt",left(i));
15324 +      end;
15325 +      retain i;
15326 +     run;
15327 +    %if &fmtcnt > 0 %then %do;
15328 +       %dropformatvars;
15329 +    %end;
15330 +    proc datasets lib=work memtype=data nolist;
15331 +        modify importfile;
15332 +        attrib _all_ format=;
15333 +    run;
15334 +    quit;
15335 +   %end;
15337 +   %let _fimportObs  = 0;
15338 +   %let _fimportVars = 0;
15339 +   %if %sysfunc(exist(work.importFile)) %then %do;
15340 +       %let dsid = %sysfunc(open(work.importFile));
15341 +       %if &dsid %then %do;
15342 +           %let _fimportObs  = %sysfunc(attrn(&dsid, NOBS));
15343 +           %let _fimportVars = %sysfunc(attrn(&dsid, NVARS));
15344 +       %let dsid = %sysfunc(close(&dsid));
15345 +       %end;
15346 +   %end;
15348 +   %if ^&_fimportObs %then %do;
15349 +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_OBS;
15350 +       %goto endtrain;
15351 +   %end;
15352 +   %if ^&_fimportVars %then %do;
15353 +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.FILE_NO_VARS;
15354 +       %goto endtrain;
15355 +   %end;
15357 +   data &em_user_data;
15358 +      set work.importfile(obs=&EM_PROPERTY_MAXROWS);
15359 +   run;
15360 +   %keepordrop;
15362 +   %em_getname(key=EMSTAT,     type=DATA);
15364 +   proc datasets lib=&em_lib nolist;
15365 +      delete &em_nodeid._EMSTATDEFAULT &em_nodeid._EMINFO;
15366 +   run;
15368 +   %if "&em_property_advancedadvisor" eq "Y" %then %do;
15369 +        %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=Y,
15370 +            intervalLevelLowerLimit=20, applyMaxPercentMissing=Y,
15371 +            maxPercentMissing=50, applyMaxClassLevels=Y,
15372 +            maxClassLevels=20, identifyEmptyColumns=Y,
15373 +            outdata=&em_user_EMCMETADEFAULT,
15374 +            computeStat=Y, statisticData=&em_user_EMSTATDEFAULT);
15376 +        data &em_user_emcmetadefault;
15377 +           set &em_user_emcmetadefault;
15378 +           drop nlevel pctmiss min max mean std skewness kurtosis;
15379 +        run;
15381 +        data &em_data_eminfo;
15382 +           length TARGET KEY $32  DATA $43;
15383 +           TARGET=""; KEY="STATS"; DATA="&em_user_emstatdefault"; output;
15384 +        run;
15386 +        %let EM_META_ADVISOR=ADVANCED;
15388 +   %end;
15389 +   %else %do;
15390 +       %EmAdviseColumns(&em_user_data, applyIntervalLevelLowerLimit=N,
15391 +            applyMaxPercentMissing=N, applyMaxClassLevels=N,
15392 +            identifyEmptyColumns=N,   maxLevelDetection=0,
15393 +            outdata=&em_user_EMCMETADEFAULT, computeStat=N, statisticData=WORK.STATISTIC);
15395 +            %if "&em_property_summarize" eq "Y" %then %do;
15396 +                %em_getname(key=EMSTAT,  type=DATA);
15397 +                data &em_data_eminfo;
15398 +                   length TARGET KEY $32  DATA $43;
15399 +                   TARGET=""; KEY="STATS"; DATA="&em_user_emstat"; output;
15400 +                run;
15401 +            %end;
15403 +        %let EM_META_ADVISOR=BASIC;
15405 +   %end;
15407 +   %em_getname(key=VVNLABEL, type=FILE, extension=sas);
15408 +   data _null_;
15409 +      fname = '_text';
15410 +      rc=filename(fname, "&em_user_vvnlabel");
15411 +      if ^rc and fexist(fname) then
15412 +         rc=fdelete(fname);
15413 +     rc=filename(fname);
15414 +   run;
15417 +   /* Validvarname Case */
15418 +   %let newNameFlag = 0;
15419 +   %if %sysfunc(exist(&em_user_EMCMETADEFAULT)) %then %do;
15420 +       %let dsid = %sysfunc(open(&em_user_EMCMETADEFAULT));
15421 +        %if &dsid %then %do;
15422 +            %let newNameFlag = %sysfunc(varnum(&dsid, NEWNAME));
15423 +            %let dsid = %sysfunc(close(&dsid));
15424 +       %end;
15425 +   %end;
15427 +   %if %sysevalf(&newNameFlag>0) %then %do;
15428 +       proc contents data=work.importfile noprint out=work._any(keep=VARNUM NAME LABEL);
15429 +       run;
15430 +       proc sort data=work._any; by VARNUM; run; quit;
15432 +       options validvarname=V7;
15434 +       %procimport(out=work.importfile2);
15436 +       options validvarname=ANY;
15438 +       proc contents data=work.importfile2 noprint out=work._v7(rename=(NAME=V7NAME) keep=VARNUM NAME LABEL);
15439 +       run;
15440 +       proc sort data=work._v7; by varnum; run; quit;
15442 +       filename _FI "&em_user_vvnlabel";
15443 +       data work._names;
15444 +          length string $200;
15445 +          merge work._v7 work._any;
15446 +          by VARNUM;
15447 +          file _FI;
15448 +          if V7NAME ne NAME then do;
15449 +             string = trim(V7NAME)!!'= "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
15450 +             put string;
15451 +             if LABEL eq '' then do;
15452 +                string = 'Label '!!trim(V7NAME)!!"='"!!tranwrd(trim(NAME), "'", "''")!!"';";
15453 +                put string;
15454 +             end;
15455 +             string='drop "'!!tranwrd(trim(NAME), '"', '""')!!'"n;';
15456 +             put string;
15457 +          end;
15458 +          drop string;
15459 +       run;
15460 +       data &em_user_data;
15461 +          set &em_user_data;
15462 +          %if %sysfunc(fileexist(%nrbquote(&em_user_vvnlabel))) %then %do;
15463 +              filename _FI "&em_user_vvnlabel";
15464 +              %inc _FI;
15465 +             filename _FI;
15466 +          %end;
15467 +       run;
15469 +       proc sort data=&em_user_EMCMETADEFAULT; by NAME; run;
15470 +       proc sort data=work._names;             by NAME; run;
15472 +       data &em_user_EMCMETADEFAULT;
15473 +         merge  &em_user_EMCMETADEFAULT _names;
15474 +         by NAME;
15475 +         length DROP $1;
15476 +         DROP='N';
15477 +         if NEWNAME ne NAME then do;
15478 +            if LABEL eq '' then do;
15479 +               LABEL = NAME;
15480 +            end;
15481 +            NAME=V7NAME;
15482 +         end;
15483 +         drop NEWNAME V7NAME VARNUM;
15484 +       run;
15486 +       proc datasets lib=work nolist;
15487 +          delete _any _v7 _names importfile2;
15488 +       run;
15489 +       quit;
15491 +   %end;
15492 +   %else %do;
15493 +       data &em_user_EMCMETADEFAULT;
15494 +          set &em_user_EMCMETADEFAULT;
15495 +          length DROP $1;
15496 +          DROP='N';
15497 +       run;
15498 +   %end;
15500 +    %EmAdviseTable(&em_user_data, outdata=&em_user_EMTMETADEFAULT, newdataflag=Y);
15502 +   data _temp;
15503 +      set &em_user_emtmetadefault(rename=(ROLE=PORT MEMNAME=DATASET CRDATE=MODTIME));
15504 +      keep PORT LIBNAME DATASET MODTIME COLUMNMETA COLUMNMETAMODTIME NOBS;
15505 +      PORT='DATA'; COLUMNMETA="&em_nodeid._EMCMETADEFAULT";
15506 +      COLUMNMETAMODTIME=MODTIME;
15507 +   run;
15508 +   proc sort data=&em_data_importset;
15509 +      by PORT;
15510 +   run;
15511 +   data &em_data_importset;
15512 +      merge &em_data_importset _temp;
15513 +      by PORT;
15514 +      if PORT='DATA' then ROLE="&em_property_role";
15515 +   run;
15517 +    %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
15519 +    %if %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
15520 +        %if %sysfunc(fileexist(&em_user_variablesetdelta)) %then %do;
15521 +            filename x "&em_user_variablesetdelta";
15522 +            data &em_data_variableset;
15523 +               set &em_user_emcmetadefault;
15524 +               %inc X;
15525 +            run;
15526 +            filename x;
15527 +        %end;
15528 +        %else %do;
15529 +            data &em_data_variableset;
15530 +               set &em_user_emcmetadefault;
15531 +            run;
15532 +        %end;
15533 +    %end;
15535 +   %if %sysfunc(exist(&em_data_variableset)) and %sysfunc(exist(&em_user_emcmetadefault)) %then %do;
15536 +      proc compare compare=&em_data_variableset base=&em_user_emcmetadefault
15537 +         noprint outnoequal outbase outcomp out=_DiffMeta noprint;
15538 +         id NAME;
15539 +      run;
15541 +         filename x1 "&EM_FILE_CDELTA_TRAIN";
15542 +         data _null_;
15543 +            length string $200;
15544 +            set _DiffMeta end=eof;
15545 +            where _type_='COMPARE';
15546 +            file x1;
15547 +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
15548 +            put string;
15549 +            string = '   ROLE="'!!strip(ROLE)!!'";';
15550 +            put string;
15551 +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
15552 +            put string;
15553 +            string = '   ORDER="'!!strip(ORDER)!!'";';
15554 +            put string;
15555 +            put 'end;';
15556 +            if drop='Y' then do;
15557 +               string='if NAME="'!!strip(NAME)!!'" then delete;';
15558 +               put string;
15559 +            end;
15560 +            if eof then
15561 +               put 'drop DROP;';
15562 +         run;
15564 +         %em_getname(key=DELTACODE,      type=FILE, extension=txt);
15565 +         filename x2 "&em_user_deltacode";
15566 +         %em_copyfile(infref=x1, outfref=x2);
15567 +         filename x1;
15568 +         filename x2;
15570 +         %em_getname(key=VARIABLESETDELTA, type=FILE, extension=txt);
15571 +         filename x "&em_user_variablesetdelta";
15572 +         data _null_;
15573 +            length string $200;
15574 +            set _DiffMeta end=eof;
15575 +            where _type_='COMPARE';
15576 +            file x;
15577 +            string = 'if NAME="'!!strip(NAME)!!'" then do;';
15578 +            put string;
15579 +            string = '   ROLE="'!!strip(ROLE)!!'";';
15580 +            put string;
15581 +            string=  '   LEVEL="'!!strip(LEVEL)!!'";';
15582 +            put string;
15583 +            string = '   ORDER="'!!strip(ORDER)!!'";';
15584 +            put string;
15585 +            string = '   DROP="'!!strip(DROP)!!'";';
15586 +            put string;
15587 +            put 'end;';
15588 +         run;
15589 +         filename x;
15590 +       proc datasets lib=work nolist;
15591 +          delete _DiffMeta;
15592 +       run;
15594 +       data &em_data_exportset;
15595 +          set &em_data_exportset;
15596 +          if NODEPORT='TRAIN' then do;
15597 +             ROLE="&em_property_role";
15598 +             COLUMNMETAMODTIME=datetime();
15599 +             MODTIME=datetime();
15600 +             DATASET="&em_nodeid._train";
15601 +             COLUMNMETA="&em_nodeid._CMeta_TRAIN";
15602 +             DELTACODE="CDelta_TRAIN";
15603 +             APPLYDELTA='Y';
15604 +             EXPORT='Y';
15605 +             NEEDUPDATE='Y';
15607 +            %if "&em_property_advancedadvisor" eq "Y" %then %do;
15608 +                EMINFO="&em_data_eminfo";
15609 +                EMINFOMODTIME=datetime();
15610 +            %end;
15611 +            %else %do;
15612 +                EMINFO='';
15613 +                EMINFOMODTIME=.;
15614 +            %end;
15615 +          end;
15616 +       run;
15617 +   %end;
15619 +  proc contents data=&em_user_data;
15620 +  run;
15621 +  proc datasets library=work nolist;
15622 +   delete importfile importattrs new;
15623 +   quit;
15624 +  run;
15626 +  /* Reset VALIDVARNAME to original settings */
15627 +  options validvarname=&vvnString;
15629 +  %endtrain:
15630 +%mend train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

filetype=*csv*
delimiter=*,*

Name "" is not a valid SAS name.
Problems were detected with provided names.  See LOG. 
15631   /**********************************************************************
15632   *   PRODUCT:   SAS
15633   *   VERSION:   9.4
15634   *   CREATOR:   External File Interface
15635   *   DATE:      24SEP20
15636   *   DESC:      Generated SAS Datastep Code
15637   *   TEMPLATE SOURCE:  (None Specified.)
15638   ***********************************************************************/
15639      data WORK.IMPORTFILE    ;
15640      %let _EFIERR_ = 0; /* set the ERROR detection macro variable */
15641      infile 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\USERIMPORTFILE.csv' delimiter = ',' MISSOVER DSD lrecl=32767 firstobs=2 ;
15642         informat VAR1 $5. ;
15643         informat Age best32. ;
15644         informat Career $16. ;
15645         informat Marital_Statues $10. ;
15646         informat Education $24. ;
15647         informat Mortage $5. ;
15648         informat Personal_Loan $5. ;
15649         informat Contact_Type $11. ;
15650         informat Number_of_Contacts best32. ;
15651         informat Subscribed $5. ;
15652         informat Cus_ID best32. ;
15653         format VAR1 $5. ;
15654         format Age best12. ;
15655         format Career $16. ;
15656         format Marital_Statues $10. ;
15657         format Education $24. ;
15658         format Mortage $5. ;
15659         format Personal_Loan $5. ;
15660         format Contact_Type $11. ;
15661         format Number_of_Contacts best12. ;
15662         format Subscribed $5. ;
15663         format Cus_ID best12. ;
15664      input
15665                  VAR1 $
15666                  Age
15667                  Career $
15668                  Marital_Statues $
15669                  Education $
15670                  Mortage $
15671                  Personal_Loan $
15672                  Contact_Type $
15673                  Number_of_Contacts
15674                  Subscribed $
15675                  Cus_ID
15676      ;
15677      if _ERROR_ then call symputx('_EFIERR_',1);  /* set ERROR detection macro variable */
15678      run;

NOTE: The infile 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\USERIMPORTFILE.csv' is:
      Filename=C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\USERIMPORTFILE.csv,
      RECFM=V,LRECL=32767,File Size (bytes)=3551771,
      Last Modified=24Sep2020:11:16:51,
      Create Time=23Sep2020:12:03:52

NOTE: 38245 records were read from the infile 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\USERIMPORTFILE.csv'.
      The minimum record length was 78.
      The maximum record length was 100.
NOTE: The data set WORK.IMPORTFILE has 38245 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

38245 rows created in WORK.IMPORTFILE from C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\USERIMPORTFILE.csv.
  
  
  
NOTE: WORK.IMPORTFILE data set was successfully created.
NOTE: The data set WORK.IMPORTFILE has 38245 observations and 11 variables.
NOTE: PROCEDURE IMPORT used (Total process time):
      real time           0.26 seconds
      cpu time            0.25 seconds
      


NOTE: There were 38245 observations read from the data set WORK.IMPORTFILE.
NOTE: The data set EMWS1.FIMPORT2_DATA has 38245 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: The data set WORK.IMPORTATTRS has 11 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      23:137   
NOTE: There were 11 observations read from the data set WORK.IMPORTATTRS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

nobs=11  maxcols=10000

NOTE: The file EMWS1.FIMPORT2_EMSTATDEFAULT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file EMWS1.FIMPORT2_EMINFO (memtype=DATA) was not found, but appears on a DELETE statement.

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


15679  %let SYSCC = 0;
15680  %let _dsidTable = 0;
15681  %let _engineTable =;
15682  data _null_;
15683  dsid = open('EMWS1.FIMPORT2_DATA');
15684  call symput('_dsidTable', strip(put(dsid, best.)));
15685  if dsid then do;
15686  call symput('_engineTable', attrc(dsid, 'ENGINE'));
15687  dsid = close(dsid);
15688  end;
15689  run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15690  options fmterr;
15691  data _metaTestView;
15692  set EMWS1.FIMPORT2_DATA;
15693  if _N_=1 then do;
15694  output;
15695  stop;
15696  end;
15697  run;

NOTE: There were 1 observations read from the data set EMWS1.FIMPORT2_DATA.
NOTE: The data set WORK._METATESTVIEW has 1 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15698  proc contents data=EMWS1.FIMPORT2_DATA
15699  out=WORK.M086_MOS noprint;
15700  run;

NOTE: The data set WORK.M086_MOS has 11 observations and 41 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

15701  data WORK.M086_MOS;
15702  length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
15703  label NAME =;
15704  set WORK.M086_MOS(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
15705  if itype = 1 then type = 'N';
15706  else type = 'C';
15707  if formatl > 0 then do;
15708  if format ne '' then do;
15709  if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
15710  else format = strip(format)!!strip(put(formatl, best12.))!!'.';
15711  end;
15712  else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
15713  end;
15714  else if format ne '' then format = strip(format)!!'.';
15715  if informl > 0 then do;
15716  if informat ne ' ' then do;
15717  if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
15718  else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
15719  end;
15720  else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
15721  end;
15722  else if informat ne '' then informat = strip(informat)!!'.';
15723  if idxusage = 'NONE' then index ="N";
15724  else index = "Y";
15725  indextype = idxusage;
15726  drop idxusage itype formatl formatd informl informd;
15727  run;

NOTE: There were 11 observations read from the data set WORK.M086_MOS.
NOTE: The data set WORK.M086_MOS has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

15728  data WORK.M086_MOS;
15729  length UNAME $64;
15730  set WORK.M086_MOS;
15731  UNAME = upcase(NAME);
15732  run;

NOTE: There were 11 observations read from the data set WORK.M086_MOS.
NOTE: The data set WORK.M086_MOS has 11 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

15736  data WORK.M39XSWON;
15737  drop UNAME;
15738  set WORK.M39XSWON;
15739  run;

NOTE: There were 11 observations read from the data set WORK.M39XSWON.
NOTE: The data set WORK.M39XSWON has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.16 seconds
      cpu time            0.07 seconds
      


NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 11 observations read from the data set EMWS1.FIMPORT2_EMCMETADEFAULT.
NOTE: The data set EMWS1.FIMPORT2_EMCMETADEFAULT has 11 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


15990  %let SYSCC = 0;
15991  data EMWS1.FIMPORT2_EMTMETADEFAULT;
15992  length LIBNAME $8;
15993  LIBNAME = "EMWS1";
15994  run;

NOTE: The data set EMWS1.FIMPORT2_EMTMETADEFAULT has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.FIMPORT2_EMTMETADEFAULT.
NOTE: The data set WORK._TEMP has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set EMWS1.FIMPORT2_IMPORTSET.
NOTE: The data set EMWS1.FIMPORT2_IMPORTSET has 15 observations and 14 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 15 observations read from the data set EMWS1.FIMPORT2_IMPORTSET.
NOTE: There were 1 observations read from the data set WORK._TEMP.
NOTE: The data set EMWS1.FIMPORT2_IMPORTSET has 15 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file X is file C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\VARIABLESETDELTA.txt.
16023 +if NAME="Age" then do;
16024 +ROLE="REJECTED";
16025 +LEVEL="INTERVAL";
16026 +ORDER="";
16027 +DROP="N";
16028 +end;
16029 +if NAME="Career" then do;
16030 +ROLE="REJECTED";
16031 +LEVEL="NOMINAL";
16032 +ORDER="";
16033 +DROP="N";
16034 +end;
16035 +if NAME="Education" then do;
16036 +ROLE="REJECTED";
16037 +LEVEL="NOMINAL";
16038 +ORDER="";
16039 +DROP="N";
16040 +end;
16041 +if NAME="Marital_Statues" then do;
16042 +ROLE="REJECTED";
16043 +LEVEL="NOMINAL";
16044 +ORDER="";
16045 +DROP="N";
16046 +end;
16047 +if NAME="Subscribed" then do;
16048 +ROLE="TARGET";
16049 +LEVEL="NOMINAL";
16050 +ORDER="";
16051 +DROP="N";
16052 +end;
16053 +if NAME="VAR1" then do;
16054 +ROLE="REJECTED";
16055 +LEVEL="NOMINAL";
16056 +ORDER="";
16057 +DROP="N";
16058 +end;
NOTE: %INCLUDE (level 1) ending.

NOTE: There were 11 observations read from the data set EMWS1.FIMPORT2_EMCMETADEFAULT.
NOTE: The data set EMWS1.FIMPORT2_VARIABLESET has 11 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Fileref X has been deassigned.

NOTE: There were 11 observations read from the data set EMWS1.FIMPORT2_VARIABLESET.
NOTE: There were 11 observations read from the data set EMWS1.FIMPORT2_EMCMETADEFAULT.
NOTE: The data set WORK._DIFFMETA has 12 observations and 23 variables.
NOTE: PROCEDURE COMPARE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The file X1 is:
      Filename=C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=24Sep2020:11:17:18,
      Create Time=23Sep2020:11:59:22

NOTE: 31 records were written to the file X1.
      The minimum record length was 4.
      The maximum record length was 34.
NOTE: There were 6 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: The file X2 is:
      Filename=C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\DELTACODE.txt,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=24Sep2020:11:17:18,
      Create Time=23Sep2020:11:59:23

NOTE: 31 records were written to the file X2.
      The minimum record length was 4.
      The maximum record length was 34.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Fileref X1 has been deassigned.
NOTE: Fileref X2 has been deassigned.

NOTE: The file X is:
      Filename=C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\VARIABLESETDELTA.txt,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=24Sep2020:11:17:18,
      Create Time=23Sep2020:11:59:23

NOTE: 36 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 34.
NOTE: There were 6 observations read from the data set WORK._DIFFMETA.
      WHERE _type_='COMPARE';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: Fileref X has been deassigned.

NOTE: Deleting WORK._DIFFMETA (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set EMWS1.FIMPORT2_EXPORTSET.
NOTE: The data set EMWS1.FIMPORT2_EXPORTSET has 6 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
NOTE: The PROCEDURE CONTENTS printed page 2.


NOTE: The file WORK.NEW (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.IMPORTFILE (memtype=DATA).
NOTE: Deleting WORK.IMPORTATTRS (memtype=DATA).
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

16059  *------------------------------------------------------------*;
16060  * End TRAIN: FIMPORT2;
16061  *------------------------------------------------------------*;

16062  *------------------------------------------------------------*;
16063  * Close any missing semi colons;
16064  *------------------------------------------------------------*;
16065  ;
16066  ;
16067  ;
16068  ;
16069  quit;
16070  *------------------------------------------------------------*;
16071  * Close any unbalanced quotes;
16072  *------------------------------------------------------------*;
16073  /*; *"; *'; */
16074  ;
16075  run;
16076  quit;
16077  /* Reset EM Options */
16078  options formchar="|----|+|---+=|-/\<>*";
16079  options nocenter ls=256 ps=10000;
16080  goptions reset=all device=GIF NODISPLAY;

