NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1 
1 
1 
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
88829      %let eminfo= %str();
88830      data _null_;
88831      set EMWS1.Prof2_ExportSet;
88832      where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
88833      call symput('eminfo', strip(eminfo));
88834      run;

NOTE: There were 0 observations read from the data set EMWS1.PROF2_EXPORTSET.
      WHERE (eminfo not = ' ') and NODEPORT in ('DATA', 'TRAIN');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Retrieving Score Code FIMPORT 
Traverser: WaitingNode "CLUS2" 
Traverser: WaitingNode "PROF2" 
traverser_readyNode_note 
Retrieving Score Code Filter2 
Traverser: WaitingNode "PROF2" 
traverser_readyNode_note 
Retrieving Score Code Clus2 
traverser_readyNode_note 
Retrieving Score Code Prof2 
88835      *------------------------------------------------------------*;
88836      * Report: Determine If validvarname ANY variables are score inputs;
88837      *------------------------------------------------------------*;
88838      filename _pref "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0ME27R0score.sas";
88839      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
88840      %INCLUDE _pref;
NOTE: %INCLUDE (level 1) file _PREF is file C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0ME27R0score.sas.
88841     +* EM Version: 14.1;
88842     +* SAS Release: 9.04.01M3P062415;
88843     +* Host: ba-teaching;
88844     +* Encoding: wlatin1;
88845     +* Locale: en_US;
88846     +* Project Path: C:\Users\20161277\Documents\CA assign 2 data;
88847     +* Project Name: 20161277_CAassignment2;
88848     +* Diagram Id: EMWS1;
88849     +* Diagram Name: All Tasks;
88850     +* Generated by: 20161277;
88851     +* Date: 28SEP2020:04:22:44;
88852     +* Macro variable identifying the scored data set;
88853     +*%let EM_SCORE_OUTPUT=;
88854     +*------------------------------------------------------------*;
88855     +*------------------------------------------------------------*;
88856     +* TOOL: Extension Class;
88857     +* TYPE: SAMPLE;
88858     +* NODE: FIMPORT;
88859     +*------------------------------------------------------------*;
88860     +*------------------------------------------------------------*;
88861     +* TOOL: Filtering;
88862     +* TYPE: MODIFY;
88863     +* NODE: Filter2;
88864     +*------------------------------------------------------------*;
88865     +
88866     +*------------------------------------------------------------*;
88867     +* TOOL: Clustering;
88868     +* TYPE: EXPLORE;
88869     +* NODE: Clus2;
88870     +*------------------------------------------------------------*;
88871     +*****************************************;
88872     +*** Begin Scoring Code from PROC DMVQ ***;
88873     +*****************************************;
88874     +
88875     +
88876     +*** Begin Class Look-up, Standardization, Replacement ;
88877     +drop _dm_bad; _dm_bad = 0;
88878     +
88879     +*** Standardize Age ;
88880     +drop T_Age ;
88881     +if missing( Age ) then T_Age = .;
88882     +else T_Age = (Age - 39.7511401418189) * 0.10190285909929;
88883     +
88884     +*** Generate dummy variables for Career ;
88885     +drop Careeradministration Careerblue_collar Careerentrepreneur Careerhousemaid
88886     +         Careermanagement Careerretired Careerself_employed Careerservices
88887     +        Careerstudent Careertechnician Careerunemployed ;
88888     +if missing( Career ) then do;
88889     +   Careeradministration = .;
88890     +   Careerblue_collar = .;
88891     +   Careerentrepreneur = .;
88892     +   Careerhousemaid = .;
88893     +   Careermanagement = .;
88894     +   Careerretired = .;
88895     +   Careerself_employed = .;
88896     +   Careerservices = .;
88897     +   Careerstudent = .;
88898     +   Careertechnician = .;
88899     +   Careerunemployed = .;
88900     +end;
88901     +else do;
88902     +   length _dm16 $ 16; drop _dm16 ;
88903     +   _dm16 = put( Career , $16. );
88904     +   %DMNORMIP( _dm16 )
88905     +   _dm_find = 0; drop _dm_find;
88906     +   if _dm16 <= 'RETIRED'  then do;
88907     +      if _dm16 <= 'ENTREPRENEUR'  then do;
88908     +         if _dm16 <= 'BLUE-COLLAR'  then do;
88909     +            if _dm16 = 'ADMINISTRATION'  then do;
88910     +               Careeradministration = 0.51586033321344;
88911     +               Careerblue_collar = -0.16680913181185;
88912     +               Careerentrepreneur = -0.0587689896351;
88913     +               Careerhousemaid = -0.04941368846911;
88914     +               Careermanagement = -0.08355538377402;
88915     +               Careerretired = -0.05735690463314;
88916     +               Careerself_employed = -0.05775626645781;
88917     +               Careerservices = -0.10083546520573;
88918     +               Careerstudent = -0.03608694469763;
88919     +               Careertechnician = -0.13530190277446;
88920     +               Careerunemployed = -0.04755584304166;
88921     +               _dm_find = 1;
88922     +            end;
88923     +            else do;
88924     +               if _dm16 = 'BLUE-COLLAR'  then do;
88925     +                  Careeradministration = -0.17622292360277;
88926     +                  Careerblue_collar = 0.54497265888362;
88927     +                  Careerentrepreneur = -0.0587689896351;
88928     +                  Careerhousemaid = -0.04941368846911;
88929     +                  Careermanagement = -0.08355538377402;
88930     +                  Careerretired = -0.05735690463314;
88931     +                  Careerself_employed = -0.05775626645781;
88932     +                  Careerservices = -0.10083546520573;
88933     +                  Careerstudent = -0.03608694469763;
88934     +                  Careertechnician = -0.13530190277446;
88935     +                  Careerunemployed = -0.04755584304166;
88936     +                  _dm_find = 1;
88937     +               end;
88938     +            end;
88939     +         end;
88940     +         else do;
88941     +            if _dm16 = 'ENTREPRENEUR'  then do;
88942     +               Careeradministration = -0.17622292360277;
88943     +               Careerblue_collar = -0.16680913181185;
88944     +               Careerentrepreneur = 1.5468432697927;
88945     +               Careerhousemaid = -0.04941368846911;
88946     +               Careermanagement = -0.08355538377402;
88947     +               Careerretired = -0.05735690463314;
88948     +               Careerself_employed = -0.05775626645781;
88949     +               Careerservices = -0.10083546520573;
88950     +               Careerstudent = -0.03608694469763;
88951     +               Careertechnician = -0.13530190277446;
88952     +               Careerunemployed = -0.04755584304166;
88953     +               _dm_find = 1;
88954     +            end;
88955     +         end;
88956     +      end;
88957     +      else do;
88958     +         if _dm16 <= 'MANAGEMENT'  then do;
88959     +            if _dm16 = 'HOUSEMAID'  then do;
88960     +               Careeradministration = -0.17622292360277;
88961     +               Careerblue_collar = -0.16680913181185;
88962     +               Careerentrepreneur = -0.0587689896351;
88963     +               Careerhousemaid = 1.83970108093432;
88964     +               Careermanagement = -0.08355538377402;
88965     +               Careerretired = -0.05735690463314;
88966     +               Careerself_employed = -0.05775626645781;
88967     +               Careerservices = -0.10083546520573;
88968     +               Careerstudent = -0.03608694469763;
88969     +               Careertechnician = -0.13530190277446;
88970     +               Careerunemployed = -0.04755584304166;
88971     +               _dm_find = 1;
88972     +            end;
88973     +            else do;
88974     +               if _dm16 = 'MANAGEMENT'  then do;
88975     +                  Careeradministration = -0.17622292360277;
88976     +                  Careerblue_collar = -0.16680913181185;
88977     +                  Careerentrepreneur = -0.0587689896351;
88978     +                  Careerhousemaid = -0.04941368846911;
88979     +                  Careermanagement = 1.08797796124574;
88980     +                  Careerretired = -0.05735690463314;
88981     +                  Careerself_employed = -0.05775626645781;
88982     +                  Careerservices = -0.10083546520573;
88983     +                  Careerstudent = -0.03608694469763;
88984     +                  Careertechnician = -0.13530190277446;
88985     +                  Careerunemployed = -0.04755584304166;
88986     +                  _dm_find = 1;
88987     +               end;
88988     +            end;
88989     +         end;
88990     +         else do;
88991     +            if _dm16 = 'RETIRED'  then do;
88992     +               Careeradministration = -0.17622292360277;
88993     +               Careerblue_collar = -0.16680913181185;
88994     +               Careerentrepreneur = -0.0587689896351;
88995     +               Careerhousemaid = -0.04941368846911;
88996     +               Careermanagement = -0.08355538377402;
88997     +               Careerretired = 1.58492541867484;
88998     +               Careerself_employed = -0.05775626645781;
88999     +               Careerservices = -0.10083546520573;
89000     +               Careerstudent = -0.03608694469763;
89001     +               Careertechnician = -0.13530190277446;
89002     +               Careerunemployed = -0.04755584304166;
89003     +               _dm_find = 1;
89004     +            end;
89005     +         end;
89006     +      end;
89007     +   end;
89008     +   else do;
89009     +      if _dm16 <= 'STUDENT'  then do;
89010     +         if _dm16 <= 'SERVICES'  then do;
89011     +            if _dm16 = 'SELF-EMPLOYED'  then do;
89012     +               Careeradministration = -0.17622292360277;
89013     +               Careerblue_collar = -0.16680913181185;
89014     +               Careerentrepreneur = -0.0587689896351;
89015     +               Careerhousemaid = -0.04941368846911;
89016     +               Careermanagement = -0.08355538377402;
89017     +               Careerretired = -0.05735690463314;
89018     +               Careerself_employed = 1.57396628391776;
89019     +               Careerservices = -0.10083546520573;
89020     +               Careerstudent = -0.03608694469763;
89021     +               Careertechnician = -0.13530190277446;
89022     +               Careerunemployed = -0.04755584304166;
89023     +               _dm_find = 1;
89024     +            end;
89025     +            else do;
89026     +               if _dm16 = 'SERVICES'  then do;
89027     +                  Careeradministration = -0.17622292360277;
89028     +                  Careerblue_collar = -0.16680913181185;
89029     +                  Careerentrepreneur = -0.0587689896351;
89030     +                  Careerhousemaid = -0.04941368846911;
89031     +                  Careermanagement = -0.08355538377402;
89032     +                  Careerretired = -0.05735690463314;
89033     +                  Careerself_employed = -0.05775626645781;
89034     +                  Careerservices = 0.9015321732696;
89035     +                  Careerstudent = -0.03608694469763;
89036     +                  Careertechnician = -0.13530190277446;
89037     +                  Careerunemployed = -0.04755584304166;
89038     +                  _dm_find = 1;
89039     +               end;
89040     +            end;
89041     +         end;
89042     +         else do;
89043     +            if _dm16 = 'STUDENT'  then do;
89044     +               Careeradministration = -0.17622292360277;
89045     +               Careerblue_collar = -0.16680913181185;
89046     +               Careerentrepreneur = -0.0587689896351;
89047     +               Careerhousemaid = -0.04941368846911;
89048     +               Careermanagement = -0.08355538377402;
89049     +               Careerretired = -0.05735690463314;
89050     +               Careerself_employed = -0.05775626645781;
89051     +               Careerservices = -0.10083546520573;
89052     +               Careerstudent = 2.51909428329962;
89053     +               Careertechnician = -0.13530190277446;
89054     +               Careerunemployed = -0.04755584304166;
89055     +               _dm_find = 1;
89056     +            end;
89057     +         end;
89058     +      end;
89059     +      else do;
89060     +         if _dm16 = 'TECHNICIAN'  then do;
89061     +            Careeradministration = -0.17622292360277;
89062     +            Careerblue_collar = -0.16680913181185;
89063     +            Careerentrepreneur = -0.0587689896351;
89064     +            Careerhousemaid = -0.04941368846911;
89065     +            Careermanagement = -0.08355538377402;
89066     +            Careerretired = -0.05735690463314;
89067     +            Careerself_employed = -0.05775626645781;
89068     +            Careerservices = -0.10083546520573;
89069     +            Careerstudent = -0.03608694469763;
89070     +            Careertechnician = 0.67187832710015;
89071     +            Careerunemployed = -0.04755584304166;
89072     +            _dm_find = 1;
89073     +         end;
89074     +         else do;
89075     +            if _dm16 = 'UNEMPLOYED'  then do;
89076     +               Careeradministration = -0.17622292360277;
89077     +               Careerblue_collar = -0.16680913181185;
89078     +               Careerentrepreneur = -0.0587689896351;
89079     +               Careerhousemaid = -0.04941368846911;
89080     +               Careermanagement = -0.08355538377402;
89081     +               Careerretired = -0.05735690463314;
89082     +               Careerself_employed = -0.05775626645781;
89083     +               Careerservices = -0.10083546520573;
89084     +               Careerstudent = -0.03608694469763;
89085     +               Careertechnician = -0.13530190277446;
89086     +               Careerunemployed = 1.9115719599364;
89087     +               _dm_find = 1;
89088     +            end;
89089     +         end;
89090     +      end;
89091     +   end;
89092     +   if not _dm_find then do;
89093     +      Careeradministration = .;
89094     +      Careerblue_collar = .;
89095     +      Careerentrepreneur = .;
89096     +      Careerhousemaid = .;
89097     +      Careermanagement = .;
89098     +      Careerretired = .;
89099     +      Careerself_employed = .;
89100     +      Careerservices = .;
89101     +      Careerstudent = .;
89102     +      Careertechnician = .;
89103     +      Careerunemployed = .;
89104     +      _DM_BAD = 1;
89105     +   end;
89106     +end;
89107     +
89108     +*** Generate dummy variables for Education ;
89109     +drop Educationilliterate Educationprimary_education
89110     +        Educationprofessional_educat Educationsecondary_education
89111     +        Educationuniversity_educatio ;
89112     +if missing( Education ) then do;
89113     +   Educationilliterate = .;
89114     +   Educationprimary_education = .;
89115     +   Educationprofessional_educat = .;
89116     +   Educationsecondary_education = .;
89117     +   Educationuniversity_educatio = .;
89118     +end;
89119     +else do;
89120     +   length _dm24 $ 24; drop _dm24 ;
89121     +   _dm24 = put( Education , $24. );
89122     +   %DMNORMIP( _dm24 )
89123     +   _dm_find = 0; drop _dm_find;
89124     +   if _dm24 <= 'PROFESSIONAL EDUCATION'  then do;
89125     +      if _dm24 <= 'PRIMARY EDUCATION'  then do;
89126     +         if _dm24 = 'ILLITERATE'  then do;
89127     +            Educationilliterate = 22.0298500130819;
89128     +            Educationprimary_education = -0.19892629030724;
89129     +            Educationprofessional_educat = -0.17519457945226;
89130     +            Educationsecondary_education = -0.3660658600899;
89131     +            Educationuniversity_educatio = -0.29286621546649;
89132     +            _dm_find = 1;
89133     +         end;
89134     +         else do;
89135     +            if _dm24 = 'PRIMARY EDUCATION'  then do;
89136     +               Educationilliterate = -0.00907832396853;
89137     +               Educationprimary_education = 1.00536794351398;
89138     +               Educationprofessional_educat = -0.17519457945226;
89139     +               Educationsecondary_education = -0.3660658600899;
89140     +               Educationuniversity_educatio = -0.29286621546649;
89141     +               _dm_find = 1;
89142     +            end;
89143     +         end;
89144     +      end;
89145     +      else do;
89146     +         if _dm24 = 'PROFESSIONAL EDUCATION'  then do;
89147     +            Educationilliterate = -0.00907832396853;
89148     +            Educationprimary_education = -0.19892629030724;
89149     +            Educationprofessional_educat = 1.14155424227354;
89150     +            Educationsecondary_education = -0.3660658600899;
89151     +            Educationuniversity_educatio = -0.29286621546649;
89152     +            _dm_find = 1;
89153     +         end;
89154     +      end;
89155     +   end;
89156     +   else do;
89157     +      if _dm24 = 'SECONDARY EDUCATION'  then do;
89158     +         Educationilliterate = -0.00907832396853;
89159     +         Educationprimary_education = -0.19892629030724;
89160     +         Educationprofessional_educat = -0.17519457945226;
89161     +         Educationsecondary_education = 0.54633369893588;
89162     +         Educationuniversity_educatio = -0.29286621546649;
89163     +         _dm_find = 1;
89164     +      end;
89165     +      else do;
89166     +         if _dm24 = 'UNIVERSITY EDUCATION'  then do;
89167     +            Educationilliterate = -0.00907832396853;
89168     +            Educationprimary_education = -0.19892629030724;
89169     +            Educationprofessional_educat = -0.17519457945226;
89170     +            Educationsecondary_education = -0.3660658600899;
89171     +            Educationuniversity_educatio = 0.68288557995158;
89172     +            _dm_find = 1;
89173     +         end;
89174     +      end;
89175     +   end;
89176     +   if not _dm_find then do;
89177     +      Educationilliterate = .;
89178     +      Educationprimary_education = .;
89179     +      Educationprofessional_educat = .;
89180     +      Educationsecondary_education = .;
89181     +      Educationuniversity_educatio = .;
89182     +      _DM_BAD = 1;
89183     +   end;
89184     +end;
89185     +
89186     +*** Generate dummy variables for Marital_Statues ;
89187     +drop Marital_Statuesdivorced Marital_Statuesmarried Marital_Statuessingle ;
89188     +if missing( Marital_Statues ) then do;
89189     +   Marital_Statuesdivorced = .;
89190     +   Marital_Statuesmarried = .;
89191     +   Marital_Statuessingle = .;
89192     +end;
89193     +else do;
89194     +   length _dm10 $ 10; drop _dm10 ;
89195     +   _dm10 = put( Marital_Statues , $10. );
89196     +   %DMNORMIP( _dm10 )
89197     +   if _dm10 = 'MARRIED'  then do;
89198     +      Marital_Statuesdivorced = -0.2064750846264;
89199     +      Marital_Statuesmarried = 0.45850447935303;
89200     +      Marital_Statuessingle = -0.35412036665997;
89201     +   end;
89202     +   else if _dm10 = 'SINGLE'  then do;
89203     +      Marital_Statuesdivorced = -0.2064750846264;
89204     +      Marital_Statuesmarried = -0.72697986752954;
89205     +      Marital_Statuessingle = 0.94127183026958;
89206     +   end;
89207     +   else if _dm10 = 'DIVORCED'  then do;
89208     +      Marital_Statuesdivorced = 1.61435228984108;
89209     +      Marital_Statuesmarried = -0.72697986752954;
89210     +      Marital_Statuessingle = -0.35412036665997;
89211     +   end;
89212     +   else do;
89213     +      Marital_Statuesdivorced = .;
89214     +      Marital_Statuesmarried = .;
89215     +      Marital_Statuessingle = .;
89216     +      _DM_BAD = 1;
89217     +   end;
89218     +end;
89219     +
89220     +*** End Class Look-up, Standardization, Replacement ;
89221     +
89222     +
89223     +*** Omitted Cases;
89224     +if _dm_bad then do;
89225     +   _SEGMENT_ = .; Distance = .;
89226     +   goto CLUS2vlex ;
89227     +end; *** omitted;
89228     +
89229     +*** Compute Distances and Cluster Membership;
89230     +label _SEGMENT_ = 'Segment Id' ;
89231     +label Distance = 'Distance' ;
89232     +array CLUS2vads [5] _temporary_;
89233     +drop _vqclus _vqmvar _vqnvar;
89234     +_vqmvar = 0;
89235     +do _vqclus = 1 to 5; CLUS2vads [_vqclus] = 0; end;
89236     +if not missing( T_Age ) then do;
89237     +   CLUS2vads [1] + ( T_Age - 1.18424929125643 )**2;
89238     +   CLUS2vads [2] + ( T_Age - 0.41497866023155 )**2;
89239     +   CLUS2vads [3] + ( T_Age - 0.79690974995832 )**2;
89240     +   CLUS2vads [4] + ( T_Age - -0.47397955291028 )**2;
89241     +   CLUS2vads [5] + ( T_Age - -0.73775197720301 )**2;
89242     +end;
89243     +else _vqmvar + 1;
89244     +if not missing( Careeradministration ) then do;
89245     +   CLUS2vads [1] + ( Careeradministration - -0.05871660538976 )**2;
89246     +   CLUS2vads [2] + ( Careeradministration - 0.0225282586621 )**2;
89247     +   CLUS2vads [3] + ( Careeradministration - -0.12678840525876 )**2;
89248     +   CLUS2vads [4] + ( Careeradministration - -0.00928798287664 )**2;
89249     +   CLUS2vads [5] + ( Careeradministration - 0.06306076830755 )**2;
89250     +end;
89251     +else _vqmvar + 0.09090909090909;
89252     +if not missing( Careerblue_collar ) then do;
89253     +   CLUS2vads [1] + ( Careerblue_collar - 0.02661494432076 )**2;
89254     +   CLUS2vads [2] + ( Careerblue_collar - -0.05422567463931 )**2;
89255     +   CLUS2vads [3] + ( Careerblue_collar - 0.23992332001413 )**2;
89256     +   CLUS2vads [4] + ( Careerblue_collar - 0.03248742973477 )**2;
89257     +   CLUS2vads [5] + ( Careerblue_collar - -0.04867107526489 )**2;
89258     +end;
89259     +else _vqmvar + 0.09090909090909;
89260     +if not missing( Careerentrepreneur ) then do;
89261     +   CLUS2vads [1] + ( Careerentrepreneur - 0.01583664496945 )**2;
89262     +   CLUS2vads [2] + ( Careerentrepreneur - 0.00535425351598 )**2;
89263     +   CLUS2vads [3] + ( Careerentrepreneur - 0.05591760032402 )**2;
89264     +   CLUS2vads [4] + ( Careerentrepreneur - 0.00760370649344 )**2;
89265     +   CLUS2vads [5] + ( Careerentrepreneur - -0.02887870870372 )**2;
89266     +end;
89267     +else _vqmvar + 0.09090909090909;
89268     +if not missing( Careerhousemaid ) then do;
89269     +   CLUS2vads [1] + ( Careerhousemaid - 0.03150082874052 )**2;
89270     +   CLUS2vads [2] + ( Careerhousemaid - 0.01411933583032 )**2;
89271     +   CLUS2vads [3] + ( Careerhousemaid - 0.08552308077399 )**2;
89272     +   CLUS2vads [4] + ( Careerhousemaid - -0.00423515478268 )**2;
89273     +   CLUS2vads [5] + ( Careerhousemaid - -0.03246525496543 )**2;
89274     +end;
89275     +else _vqmvar + 0.09090909090909;
89276     +if not missing( Careermanagement ) then do;
89277     +   CLUS2vads [1] + ( Careermanagement - 0.02802536313657 )**2;
89278     +   CLUS2vads [2] + ( Careermanagement - -0.00013826961208 )**2;
89279     +   CLUS2vads [3] + ( Careermanagement - -0.08355538377402 )**2;
89280     +   CLUS2vads [4] + ( Careermanagement - 0.0027113714148 )**2;
89281     +   CLUS2vads [5] + ( Careermanagement - -0.03205363753115 )**2;
89282     +end;
89283     +else _vqmvar + 0.09090909090909;
89284     +if not missing( Careerretired ) then do;
89285     +   CLUS2vads [1] + ( Careerretired - 0.1137066362003 )**2;
89286     +   CLUS2vads [2] + ( Careerretired - 0.03196323223621 )**2;
89287     +   CLUS2vads [3] + ( Careerretired - 0.05994897560314 )**2;
89288     +   CLUS2vads [4] + ( Careerretired - -0.05519742754792 )**2;
89289     +   CLUS2vads [5] + ( Careerretired - -0.05422594136115 )**2;
89290     +end;
89291     +else _vqmvar + 0.09090909090909;
89292     +if not missing( Careerself_employed ) then do;
89293     +   CLUS2vads [1] + ( Careerself_employed - 0.00602500478016 )**2;
89294     +   CLUS2vads [2] + ( Careerself_employed - -0.01059665517528 )**2;
89295     +   CLUS2vads [3] + ( Careerself_employed - 0.1753469550244 )**2;
89296     +   CLUS2vads [4] + ( Careerself_employed - 0.00178390549868 )**2;
89297     +   CLUS2vads [5] + ( Careerself_employed - -0.00432316286808 )**2;
89298     +end;
89299     +else _vqmvar + 0.09090909090909;
89300     +if not missing( Careerservices ) then do;
89301     +   CLUS2vads [1] + ( Careerservices - -0.01927306872552 )**2;
89302     +   CLUS2vads [2] + ( Careerservices - 0.02373623552964 )**2;
89303     +   CLUS2vads [3] + ( Careerservices - -0.10083546520573 )**2;
89304     +   CLUS2vads [4] + ( Careerservices - 0.00600796239966 )**2;
89305     +   CLUS2vads [5] + ( Careerservices - 0.0014584173795 )**2;
89306     +end;
89307     +else _vqmvar + 0.09090909090909;
89308     +if not missing( Careerstudent ) then do;
89309     +   CLUS2vads [1] + ( Careerstudent - -0.03608694469763 )**2;
89310     +   CLUS2vads [2] + ( Careerstudent - -0.03407287646748 )**2;
89311     +   CLUS2vads [3] + ( Careerstudent - -0.03608694469763 )**2;
89312     +   CLUS2vads [4] + ( Careerstudent - -0.0295771963357 )**2;
89313     +   CLUS2vads [5] + ( Careerstudent - 0.09171509945249 )**2;
89314     +end;
89315     +else _vqmvar + 0.09090909090909;
89316     +if not missing( Careertechnician ) then do;
89317     +   CLUS2vads [1] + ( Careertechnician - -0.03593750099073 )**2;
89318     +   CLUS2vads [2] + ( Careertechnician - 0.0046715474928 )**2;
89319     +   CLUS2vads [3] + ( Careertechnician - -0.13530190277446 )**2;
89320     +   CLUS2vads [4] + ( Careertechnician - 0.00121822486212 )**2;
89321     +   CLUS2vads [5] + ( Careertechnician - 0.03315861172555 )**2;
89322     +end;
89323     +else _vqmvar + 0.09090909090909;
89324     +if not missing( Careerunemployed ) then do;
89325     +   CLUS2vads [1] + ( Careerunemployed - 0.00378443631407 )**2;
89326     +   CLUS2vads [2] + ( Careerunemployed - 0.00752210622756 )**2;
89327     +   CLUS2vads [3] + ( Careerunemployed - -0.04755584304166 )**2;
89328     +   CLUS2vads [4] + ( Careerunemployed - -0.00086394109691 )**2;
89329     +   CLUS2vads [5] + ( Careerunemployed - -0.00581150272924 )**2;
89330     +end;
89331     +else _vqmvar + 0.09090909090909;
89332     +if not missing( Educationilliterate ) then do;
89333     +   CLUS2vads [1] + ( Educationilliterate - -0.00907832396853 )**2;
89334     +   CLUS2vads [2] + ( Educationilliterate - -0.00907832396853 )**2;
89335     +   CLUS2vads [3] + ( Educationilliterate - 22.0298500130819 )**2;
89336     +   CLUS2vads [4] + ( Educationilliterate - -0.00907832396853 )**2;
89337     +   CLUS2vads [5] + ( Educationilliterate - -0.00907832396853 )**2;
89338     +end;
89339     +else _vqmvar + 0.19999999999999;
89340     +if not missing( Educationprimary_education ) then do;
89341     +   CLUS2vads [1] + ( Educationprimary_education - 0.16679089719315 )**2;
89342     +   CLUS2vads [2] + ( Educationprimary_education - -0.03597002903085 )**2;
89343     +   CLUS2vads [3] + ( Educationprimary_education - -0.19892629030724 )**2;
89344     +   CLUS2vads [4] + ( Educationprimary_education - -0.02562589554878 )**2;
89345     +   CLUS2vads [5] + ( Educationprimary_education - -0.11924325812662 )**2;
89346     +end;
89347     +else _vqmvar + 0.19999999999999;
89348     +if not missing( Educationprofessional_educat ) then do;
89349     +   CLUS2vads [1] + ( Educationprofessional_educat - -0.0100572850297 )**2;
89350     +   CLUS2vads [2] + ( Educationprofessional_educat - 0.02477410655864 )**2;
89351     +   CLUS2vads [3] + ( Educationprofessional_educat - -0.17519457945226 )**2;
89352     +   CLUS2vads [4] + ( Educationprofessional_educat - 0.00260113998359 )**2;
89353     +   CLUS2vads [5] + ( Educationprofessional_educat - -0.00360524101496 )**2;
89354     +end;
89355     +else _vqmvar + 0.2;
89356     +if not missing( Educationsecondary_education ) then do;
89357     +   CLUS2vads [1] + ( Educationsecondary_education - -0.05312546960705 )**2;
89358     +   CLUS2vads [2] + ( Educationsecondary_education - 0.01102413106815 )**2;
89359     +   CLUS2vads [3] + ( Educationsecondary_education - -0.3660658600899 )**2;
89360     +   CLUS2vads [4] + ( Educationsecondary_education - 0.03179673525779 )**2;
89361     +   CLUS2vads [5] + ( Educationsecondary_education - 0.00658852972414 )**2;
89362     +end;
89363     +else _vqmvar + 0.19999999999999;
89364     +if not missing( Educationuniversity_educatio ) then do;
89365     +   CLUS2vads [1] + ( Educationuniversity_educatio - -0.07046958294991 )**2;
89366     +   CLUS2vads [2] + ( Educationuniversity_educatio - -0.00060214642377 )**2;
89367     +   CLUS2vads [3] + ( Educationuniversity_educatio - -0.29286621546649 )**2;
89368     +   CLUS2vads [4] + ( Educationuniversity_educatio - -0.01476733097357 )**2;
89369     +   CLUS2vads [5] + ( Educationuniversity_educatio - 0.09264164314716 )**2;
89370     +end;
89371     +else _vqmvar + 0.2;
89372     +if not missing( Marital_Statuesdivorced ) then do;
89373     +   CLUS2vads [1] + ( Marital_Statuesdivorced - -0.19705217264665 )**2;
89374     +   CLUS2vads [2] + ( Marital_Statuesdivorced - 1.61435228984102 )**2;
89375     +   CLUS2vads [3] + ( Marital_Statuesdivorced - -0.07641598645015 )**2;
89376     +   CLUS2vads [4] + ( Marital_Statuesdivorced - -0.20647508462643 )**2;
89377     +   CLUS2vads [5] + ( Marital_Statuesdivorced - -0.20647508462639 )**2;
89378     +end;
89379     +else _vqmvar + 0.33333333333333;
89380     +if not missing( Marital_Statuesmarried ) then do;
89381     +   CLUS2vads [1] + ( Marital_Statuesmarried - 0.40368137588562 )**2;
89382     +   CLUS2vads [2] + ( Marital_Statuesmarried - -0.72697986752957 )**2;
89383     +   CLUS2vads [3] + ( Marital_Statuesmarried - 0.28914957265552 )**2;
89384     +   CLUS2vads [4] + ( Marital_Statuesmarried - 0.458504479353 )**2;
89385     +   CLUS2vads [5] + ( Marital_Statuesmarried - -0.72697986752966 )**2;
89386     +end;
89387     +else _vqmvar + 0.33333333333333;
89388     +if not missing( Marital_Statuessingle ) then do;
89389     +   CLUS2vads [1] + ( Marital_Statuessingle - -0.30091828678171 )**2;
89390     +   CLUS2vads [2] + ( Marital_Statuessingle - -0.35412036666 )**2;
89391     +   CLUS2vads [3] + ( Marital_Statuessingle - -0.26159235259357 )**2;
89392     +   CLUS2vads [4] + ( Marital_Statuessingle - -0.35412036666002 )**2;
89393     +   CLUS2vads [5] + ( Marital_Statuessingle - 0.94127183026944 )**2;
89394     +end;
89395     +else _vqmvar + 0.33333333333333;
89396     +_vqnvar = 4 - _vqmvar;
89397     +if _vqnvar <= 9.0949470177293E-12 then do;
89398     +   _SEGMENT_ = .; Distance = .;
89399     +end;
89400     +else do;
89401     +   _SEGMENT_ = 1; Distance = CLUS2vads [1];
89402     +   _vqfzdst = Distance * 0.99999999999988; drop _vqfzdst;
89403     +   do _vqclus = 2 to 5;
89404     +      if CLUS2vads [_vqclus] < _vqfzdst then do;
89405     +         _SEGMENT_ = _vqclus; Distance = CLUS2vads [_vqclus];
89406     +         _vqfzdst = Distance * 0.99999999999988;
89407     +      end;
89408     +   end;
89409     +   Distance = sqrt(Distance * (4 / _vqnvar));
89410     +end;
89411     +CLUS2vlex :;
89412     +
89413     +***************************************;
89414     +*** End Scoring Code from PROC DMVQ ***;
89415     +***************************************;
89416     +*------------------------------------------------------------*;
89417     +* Clus2: Creating Segment Label;
89418     +*------------------------------------------------------------*;
89419     +length _SEGMENT_LABEL_ $80;
89420     +label _SEGMENT_LABEL_='Segment Description';
89421     +if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
89422     +else
89423     +if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
89424     +else
89425     +if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
89426     +else
89427     +if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
89428     +else
89429     +if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
89430     +*------------------------------------------------------------*;
89431     +* TOOL: Extension Class;
89432     +* TYPE: ASSESS;
89433     +* NODE: Prof2;
89434     +*------------------------------------------------------------*;
NOTE: %INCLUDE (level 1) ending.
89435      run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

89436      quit;
89437      filename _pref;
NOTE: Fileref _PREF has been deassigned.
89438      proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
89439      by NAME;
89440      run;

NOTE: There were 406 observations read from the data set WORK._TEMP.
NOTE: 368 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 38 observations and 1 variables.
NOTE: Compressing data set WORK._TEMP increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

Traverser: Run Completed 
WARNING: Multiple lengths were specified for the BY variable format by input data sets. This might cause unexpected results.
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
MPRINT(EM_DIAGRAM):   filename _code "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0ME27R0score.sas";
MPRINT(EM_DIAGRAM):   filename _xml "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml";




MPRINT(SCOREXML):   PROC FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK._alldeps;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(SCOREXML):   * Project Name: 20161277_CAassignment2;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: All Tasks;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 28SEP2020:04:22:44;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Filtering;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Filter2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Age ;
MPRINT(SCOREXML):   drop T_Age ;
MPRINT(SCOREXML):   if missing( Age ) then T_Age = .;
MPRINT(SCOREXML):   else T_Age = (Age - 39.7511401418189) * 0.10190285909929;
MPRINT(SCOREXML):   *** Generate dummy variables for Career ;
MPRINT(SCOREXML):   drop Careeradministration Careerblue_collar Careerentrepreneur Careerhousemaid Careermanagement Careerretired Careerself_employed Careerservices Careerstudent Careertechnician Careerunemployed ;
MPRINT(SCOREXML):   if missing( Career ) then do;
MPRINT(SCOREXML):   Careeradministration = .;
MPRINT(SCOREXML):   Careerblue_collar = .;
MPRINT(SCOREXML):   Careerentrepreneur = .;
MPRINT(SCOREXML):   Careerhousemaid = .;
MPRINT(SCOREXML):   Careermanagement = .;
MPRINT(SCOREXML):   Careerretired = .;
MPRINT(SCOREXML):   Careerself_employed = .;
MPRINT(SCOREXML):   Careerservices = .;
MPRINT(SCOREXML):   Careerstudent = .;
MPRINT(SCOREXML):   Careertechnician = .;
MPRINT(SCOREXML):   Careerunemployed = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm16 $ 16;
MPRINT(SCOREXML):   drop _dm16 ;
MPRINT(SCOREXML):   _dm16 = put( Career , $16. );
MPRINT(DMNORMIP):   call dmnorm(_dm16,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   _dm_find = 0;
MPRINT(SCOREXML):   drop _dm_find;
MPRINT(SCOREXML):   if _dm16 <= 'RETIRED' then do;
MPRINT(SCOREXML):   if _dm16 <= 'ENTREPRENEUR' then do;
MPRINT(SCOREXML):   if _dm16 <= 'BLUE-COLLAR' then do;
MPRINT(SCOREXML):   if _dm16 = 'ADMINISTRATION' then do;
MPRINT(SCOREXML):   Careeradministration = 0.51586033321344;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'BLUE-COLLAR' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = 0.54497265888362;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'ENTREPRENEUR' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = 1.5468432697927;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 <= 'MANAGEMENT' then do;
MPRINT(SCOREXML):   if _dm16 = 'HOUSEMAID' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = 1.83970108093432;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'MANAGEMENT' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = 1.08797796124574;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'RETIRED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = 1.58492541867484;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 <= 'STUDENT' then do;
MPRINT(SCOREXML):   if _dm16 <= 'SERVICES' then do;
MPRINT(SCOREXML):   if _dm16 = 'SELF-EMPLOYED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = 1.57396628391776;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'SERVICES' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = 0.9015321732696;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'STUDENT' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = 2.51909428329962;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'TECHNICIAN' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = 0.67187832710015;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'UNEMPLOYED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = 1.9115719599364;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not _dm_find then do;
MPRINT(SCOREXML):   Careeradministration = .;
MPRINT(SCOREXML):   Careerblue_collar = .;
MPRINT(SCOREXML):   Careerentrepreneur = .;
MPRINT(SCOREXML):   Careerhousemaid = .;
MPRINT(SCOREXML):   Careermanagement = .;
MPRINT(SCOREXML):   Careerretired = .;
MPRINT(SCOREXML):   Careerself_employed = .;
MPRINT(SCOREXML):   Careerservices = .;
MPRINT(SCOREXML):   Careerstudent = .;
MPRINT(SCOREXML):   Careertechnician = .;
MPRINT(SCOREXML):   Careerunemployed = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Education ;
MPRINT(SCOREXML):   drop Educationilliterate Educationprimary_education Educationprofessional_educat Educationsecondary_education Educationuniversity_educatio ;
MPRINT(SCOREXML):   if missing( Education ) then do;
MPRINT(SCOREXML):   Educationilliterate = .;
MPRINT(SCOREXML):   Educationprimary_education = .;
MPRINT(SCOREXML):   Educationprofessional_educat = .;
MPRINT(SCOREXML):   Educationsecondary_education = .;
MPRINT(SCOREXML):   Educationuniversity_educatio = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm24 $ 24;
MPRINT(SCOREXML):   drop _dm24 ;
MPRINT(SCOREXML):   _dm24 = put( Education , $24. );
MPRINT(DMNORMIP):   call dmnorm(_dm24,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   _dm_find = 0;
MPRINT(SCOREXML):   drop _dm_find;
MPRINT(SCOREXML):   if _dm24 <= 'PROFESSIONAL EDUCATION' then do;
MPRINT(SCOREXML):   if _dm24 <= 'PRIMARY EDUCATION' then do;
MPRINT(SCOREXML):   if _dm24 = 'ILLITERATE' then do;
MPRINT(SCOREXML):   Educationilliterate = 22.0298500130819;
MPRINT(SCOREXML):   Educationprimary_education = -0.19892629030724;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17519457945226;
MPRINT(SCOREXML):   Educationsecondary_education = -0.3660658600899;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29286621546649;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'PRIMARY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00907832396853;
MPRINT(SCOREXML):   Educationprimary_education = 1.00536794351398;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17519457945226;
MPRINT(SCOREXML):   Educationsecondary_education = -0.3660658600899;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29286621546649;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'PROFESSIONAL EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00907832396853;
MPRINT(SCOREXML):   Educationprimary_education = -0.19892629030724;
MPRINT(SCOREXML):   Educationprofessional_educat = 1.14155424227354;
MPRINT(SCOREXML):   Educationsecondary_education = -0.3660658600899;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29286621546649;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'SECONDARY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00907832396853;
MPRINT(SCOREXML):   Educationprimary_education = -0.19892629030724;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17519457945226;
MPRINT(SCOREXML):   Educationsecondary_education = 0.54633369893588;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29286621546649;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'UNIVERSITY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00907832396853;
MPRINT(SCOREXML):   Educationprimary_education = -0.19892629030724;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17519457945226;
MPRINT(SCOREXML):   Educationsecondary_education = -0.3660658600899;
MPRINT(SCOREXML):   Educationuniversity_educatio = 0.68288557995158;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not _dm_find then do;
MPRINT(SCOREXML):   Educationilliterate = .;
MPRINT(SCOREXML):   Educationprimary_education = .;
MPRINT(SCOREXML):   Educationprofessional_educat = .;
MPRINT(SCOREXML):   Educationsecondary_education = .;
MPRINT(SCOREXML):   Educationuniversity_educatio = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Marital_Statues ;
MPRINT(SCOREXML):   drop Marital_Statuesdivorced Marital_Statuesmarried Marital_Statuessingle ;
MPRINT(SCOREXML):   if missing( Marital_Statues ) then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = .;
MPRINT(SCOREXML):   Marital_Statuesmarried = .;
MPRINT(SCOREXML):   Marital_Statuessingle = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm10 $ 10;
MPRINT(SCOREXML):   drop _dm10 ;
MPRINT(SCOREXML):   _dm10 = put( Marital_Statues , $10. );
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm10 = 'MARRIED' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = -0.2064750846264;
MPRINT(SCOREXML):   Marital_Statuesmarried = 0.45850447935303;
MPRINT(SCOREXML):   Marital_Statuessingle = -0.35412036665997;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm10 = 'SINGLE' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = -0.2064750846264;
MPRINT(SCOREXML):   Marital_Statuesmarried = -0.72697986752954;
MPRINT(SCOREXML):   Marital_Statuessingle = 0.94127183026958;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm10 = 'DIVORCED' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = 1.61435228984108;
MPRINT(SCOREXML):   Marital_Statuesmarried = -0.72697986752954;
MPRINT(SCOREXML):   Marital_Statuessingle = -0.35412036665997;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = .;
MPRINT(SCOREXML):   Marital_Statuesmarried = .;
MPRINT(SCOREXML):   Marital_Statuessingle = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUS2vlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUS2vads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUS2vads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Age ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( T_Age - 1.18424929125643 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( T_Age - 0.41497866023155 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( T_Age - 0.79690974995832 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( T_Age - -0.47397955291028 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( T_Age - -0.73775197720301 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( Careeradministration ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careeradministration - -0.05871660538976 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careeradministration - 0.0225282586621 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careeradministration - -0.12678840525876 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careeradministration - -0.00928798287664 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careeradministration - 0.06306076830755 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerblue_collar ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careerblue_collar - 0.02661494432076 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careerblue_collar - -0.05422567463931 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careerblue_collar - 0.23992332001413 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careerblue_collar - 0.03248742973477 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careerblue_collar - -0.04867107526489 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerentrepreneur ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careerentrepreneur - 0.01583664496945 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careerentrepreneur - 0.00535425351598 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careerentrepreneur - 0.05591760032402 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careerentrepreneur - 0.00760370649344 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careerentrepreneur - -0.02887870870372 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerhousemaid ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careerhousemaid - 0.03150082874052 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careerhousemaid - 0.01411933583032 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careerhousemaid - 0.08552308077399 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careerhousemaid - -0.00423515478268 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careerhousemaid - -0.03246525496543 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careermanagement ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careermanagement - 0.02802536313657 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careermanagement - -0.00013826961208 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careermanagement - -0.08355538377402 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careermanagement - 0.0027113714148 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careermanagement - -0.03205363753115 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerretired ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careerretired - 0.1137066362003 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careerretired - 0.03196323223621 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careerretired - 0.05994897560314 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careerretired - -0.05519742754792 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careerretired - -0.05422594136115 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerself_employed ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careerself_employed - 0.00602500478016 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careerself_employed - -0.01059665517528 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careerself_employed - 0.1753469550244 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careerself_employed - 0.00178390549868 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careerself_employed - -0.00432316286808 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerservices ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careerservices - -0.01927306872552 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careerservices - 0.02373623552964 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careerservices - -0.10083546520573 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careerservices - 0.00600796239966 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careerservices - 0.0014584173795 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerstudent ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careerstudent - -0.03608694469763 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careerstudent - -0.03407287646748 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careerstudent - -0.03608694469763 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careerstudent - -0.0295771963357 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careerstudent - 0.09171509945249 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careertechnician ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careertechnician - -0.03593750099073 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careertechnician - 0.0046715474928 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careertechnician - -0.13530190277446 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careertechnician - 0.00121822486212 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careertechnician - 0.03315861172555 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerunemployed ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careerunemployed - 0.00378443631407 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careerunemployed - 0.00752210622756 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careerunemployed - -0.04755584304166 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careerunemployed - -0.00086394109691 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careerunemployed - -0.00581150272924 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Educationilliterate ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Educationilliterate - -0.00907832396853 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Educationilliterate - -0.00907832396853 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Educationilliterate - 22.0298500130819 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Educationilliterate - -0.00907832396853 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Educationilliterate - -0.00907832396853 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Educationprimary_education ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Educationprimary_education - 0.16679089719315 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Educationprimary_education - -0.03597002903085 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Educationprimary_education - -0.19892629030724 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Educationprimary_education - -0.02562589554878 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Educationprimary_education - -0.11924325812662 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Educationprofessional_educat ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Educationprofessional_educat - -0.0100572850297 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Educationprofessional_educat - 0.02477410655864 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Educationprofessional_educat - -0.17519457945226 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Educationprofessional_educat - 0.00260113998359 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Educationprofessional_educat - -0.00360524101496 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationsecondary_education ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Educationsecondary_education - -0.05312546960705 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Educationsecondary_education - 0.01102413106815 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Educationsecondary_education - -0.3660658600899 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Educationsecondary_education - 0.03179673525779 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Educationsecondary_education - 0.00658852972414 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Educationuniversity_educatio ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Educationuniversity_educatio - -0.07046958294991 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Educationuniversity_educatio - -0.00060214642377 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Educationuniversity_educatio - -0.29286621546649 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Educationuniversity_educatio - -0.01476733097357 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Educationuniversity_educatio - 0.09264164314716 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Marital_Statuesdivorced ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Marital_Statuesdivorced - -0.19705217264665 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Marital_Statuesdivorced - 1.61435228984102 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Marital_Statuesdivorced - -0.07641598645015 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Marital_Statuesdivorced - -0.20647508462643 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Marital_Statuesdivorced - -0.20647508462639 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Marital_Statuesmarried ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Marital_Statuesmarried - 0.40368137588562 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Marital_Statuesmarried - -0.72697986752957 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Marital_Statuesmarried - 0.28914957265552 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Marital_Statuesmarried - 0.458504479353 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Marital_Statuesmarried - -0.72697986752966 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Marital_Statuessingle ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Marital_Statuessingle - -0.30091828678171 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Marital_Statuessingle - -0.35412036666 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Marital_Statuessingle - -0.26159235259357 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Marital_Statuessingle - -0.35412036666002 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Marital_Statuessingle - 0.94127183026944 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   _vqnvar = 4 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 9.0949470177293E-12 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUS2vads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUS2vads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUS2vads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (4 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUS2vlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus2: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   QUIT;
MPRINT(SCOREXML):   Data _NULL_;
MPRINT(SCOREXML):   numobs=0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._alldeps","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numobs= attrn(dsid,"nlobs");
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open dependency data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if numobs <= 0 then do;
MPRINT(SCOREXML):   put "WARNING: ScoreXML: No variable dependencies found in code.";
MPRINT(SCOREXML):   call symput('SYSCC','4');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Rhs (keep=rhs RHS_NLiteral UNAME);
MPRINT(SCOREXML):   Set WORK._alldeps;
MPRINT(SCOREXML):   Length UNAME $32;
MPRINT(SCOREXML):   LABEL rhs = ;
MPRINT(SCOREXML):   LABEL RHS_NLiteral = ;
MPRINT(SCOREXML):   if RHS_Dropped = 0 AND (1 NE index(rhs, '_OLD_')) then do;
MPRINT(SCOREXML):   UNAME = UPCASE(rhs);
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Proc Sort Data=WORK._Rhs NODUP out=WORK._Rhs (rename=(rhs=NAME RHS_NLiteral=NLITERAL));
MPRINT(SCOREXML):   By UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Indatavmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("EMWS1.FIMPORT_DATA","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   NAME = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open input data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Indatavmeta NODUP Out=Work._Indatavmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   dsid = open("EMWS1.FIMPORT_DATA");
MPRINT(SCOREXML):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   call symput('_engineTable', upcase(attrc(dsid, 'ENGINE')));
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Progout;
MPRINT(SCOREXML):   Set EMWS1.FIMPORT_DATA;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(SCOREXML):   * Project Name: 20161277_CAassignment2;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: All Tasks;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 28SEP2020:04:22:44;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Filtering;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Filter2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Age ;
MPRINT(SCOREXML):   drop T_Age ;
MPRINT(SCOREXML):   if missing( Age ) then T_Age = .;
MPRINT(SCOREXML):   else T_Age = (Age - 39.7511401418189) * 0.10190285909929;
MPRINT(SCOREXML):   *** Generate dummy variables for Career ;
MPRINT(SCOREXML):   drop Careeradministration Careerblue_collar Careerentrepreneur Careerhousemaid Careermanagement Careerretired Careerself_employed Careerservices Careerstudent Careertechnician Careerunemployed ;
MPRINT(SCOREXML):   if missing( Career ) then do;
MPRINT(SCOREXML):   Careeradministration = .;
MPRINT(SCOREXML):   Careerblue_collar = .;
MPRINT(SCOREXML):   Careerentrepreneur = .;
MPRINT(SCOREXML):   Careerhousemaid = .;
MPRINT(SCOREXML):   Careermanagement = .;
MPRINT(SCOREXML):   Careerretired = .;
MPRINT(SCOREXML):   Careerself_employed = .;
MPRINT(SCOREXML):   Careerservices = .;
MPRINT(SCOREXML):   Careerstudent = .;
MPRINT(SCOREXML):   Careertechnician = .;
MPRINT(SCOREXML):   Careerunemployed = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm16 $ 16;
MPRINT(SCOREXML):   drop _dm16 ;
MPRINT(SCOREXML):   _dm16 = put( Career , $16. );
MPRINT(DMNORMIP):   call dmnorm(_dm16,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   _dm_find = 0;
MPRINT(SCOREXML):   drop _dm_find;
MPRINT(SCOREXML):   if _dm16 <= 'RETIRED' then do;
MPRINT(SCOREXML):   if _dm16 <= 'ENTREPRENEUR' then do;
MPRINT(SCOREXML):   if _dm16 <= 'BLUE-COLLAR' then do;
MPRINT(SCOREXML):   if _dm16 = 'ADMINISTRATION' then do;
MPRINT(SCOREXML):   Careeradministration = 0.51586033321344;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'BLUE-COLLAR' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = 0.54497265888362;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'ENTREPRENEUR' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = 1.5468432697927;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 <= 'MANAGEMENT' then do;
MPRINT(SCOREXML):   if _dm16 = 'HOUSEMAID' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = 1.83970108093432;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'MANAGEMENT' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = 1.08797796124574;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'RETIRED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = 1.58492541867484;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 <= 'STUDENT' then do;
MPRINT(SCOREXML):   if _dm16 <= 'SERVICES' then do;
MPRINT(SCOREXML):   if _dm16 = 'SELF-EMPLOYED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = 1.57396628391776;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'SERVICES' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = 0.9015321732696;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'STUDENT' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = 2.51909428329962;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'TECHNICIAN' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = 0.67187832710015;
MPRINT(SCOREXML):   Careerunemployed = -0.04755584304166;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'UNEMPLOYED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17622292360277;
MPRINT(SCOREXML):   Careerblue_collar = -0.16680913181185;
MPRINT(SCOREXML):   Careerentrepreneur = -0.0587689896351;
MPRINT(SCOREXML):   Careerhousemaid = -0.04941368846911;
MPRINT(SCOREXML):   Careermanagement = -0.08355538377402;
MPRINT(SCOREXML):   Careerretired = -0.05735690463314;
MPRINT(SCOREXML):   Careerself_employed = -0.05775626645781;
MPRINT(SCOREXML):   Careerservices = -0.10083546520573;
MPRINT(SCOREXML):   Careerstudent = -0.03608694469763;
MPRINT(SCOREXML):   Careertechnician = -0.13530190277446;
MPRINT(SCOREXML):   Careerunemployed = 1.9115719599364;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not _dm_find then do;
MPRINT(SCOREXML):   Careeradministration = .;
MPRINT(SCOREXML):   Careerblue_collar = .;
MPRINT(SCOREXML):   Careerentrepreneur = .;
MPRINT(SCOREXML):   Careerhousemaid = .;
MPRINT(SCOREXML):   Careermanagement = .;
MPRINT(SCOREXML):   Careerretired = .;
MPRINT(SCOREXML):   Careerself_employed = .;
MPRINT(SCOREXML):   Careerservices = .;
MPRINT(SCOREXML):   Careerstudent = .;
MPRINT(SCOREXML):   Careertechnician = .;
MPRINT(SCOREXML):   Careerunemployed = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Education ;
MPRINT(SCOREXML):   drop Educationilliterate Educationprimary_education Educationprofessional_educat Educationsecondary_education Educationuniversity_educatio ;
MPRINT(SCOREXML):   if missing( Education ) then do;
MPRINT(SCOREXML):   Educationilliterate = .;
MPRINT(SCOREXML):   Educationprimary_education = .;
MPRINT(SCOREXML):   Educationprofessional_educat = .;
MPRINT(SCOREXML):   Educationsecondary_education = .;
MPRINT(SCOREXML):   Educationuniversity_educatio = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm24 $ 24;
MPRINT(SCOREXML):   drop _dm24 ;
MPRINT(SCOREXML):   _dm24 = put( Education , $24. );
MPRINT(DMNORMIP):   call dmnorm(_dm24,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   _dm_find = 0;
MPRINT(SCOREXML):   drop _dm_find;
MPRINT(SCOREXML):   if _dm24 <= 'PROFESSIONAL EDUCATION' then do;
MPRINT(SCOREXML):   if _dm24 <= 'PRIMARY EDUCATION' then do;
MPRINT(SCOREXML):   if _dm24 = 'ILLITERATE' then do;
MPRINT(SCOREXML):   Educationilliterate = 22.0298500130819;
MPRINT(SCOREXML):   Educationprimary_education = -0.19892629030724;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17519457945226;
MPRINT(SCOREXML):   Educationsecondary_education = -0.3660658600899;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29286621546649;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'PRIMARY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00907832396853;
MPRINT(SCOREXML):   Educationprimary_education = 1.00536794351398;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17519457945226;
MPRINT(SCOREXML):   Educationsecondary_education = -0.3660658600899;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29286621546649;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'PROFESSIONAL EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00907832396853;
MPRINT(SCOREXML):   Educationprimary_education = -0.19892629030724;
MPRINT(SCOREXML):   Educationprofessional_educat = 1.14155424227354;
MPRINT(SCOREXML):   Educationsecondary_education = -0.3660658600899;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29286621546649;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'SECONDARY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00907832396853;
MPRINT(SCOREXML):   Educationprimary_education = -0.19892629030724;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17519457945226;
MPRINT(SCOREXML):   Educationsecondary_education = 0.54633369893588;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29286621546649;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'UNIVERSITY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00907832396853;
MPRINT(SCOREXML):   Educationprimary_education = -0.19892629030724;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17519457945226;
MPRINT(SCOREXML):   Educationsecondary_education = -0.3660658600899;
MPRINT(SCOREXML):   Educationuniversity_educatio = 0.68288557995158;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not _dm_find then do;
MPRINT(SCOREXML):   Educationilliterate = .;
MPRINT(SCOREXML):   Educationprimary_education = .;
MPRINT(SCOREXML):   Educationprofessional_educat = .;
MPRINT(SCOREXML):   Educationsecondary_education = .;
MPRINT(SCOREXML):   Educationuniversity_educatio = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Marital_Statues ;
MPRINT(SCOREXML):   drop Marital_Statuesdivorced Marital_Statuesmarried Marital_Statuessingle ;
MPRINT(SCOREXML):   if missing( Marital_Statues ) then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = .;
MPRINT(SCOREXML):   Marital_Statuesmarried = .;
MPRINT(SCOREXML):   Marital_Statuessingle = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm10 $ 10;
MPRINT(SCOREXML):   drop _dm10 ;
MPRINT(SCOREXML):   _dm10 = put( Marital_Statues , $10. );
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm10 = 'MARRIED' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = -0.2064750846264;
MPRINT(SCOREXML):   Marital_Statuesmarried = 0.45850447935303;
MPRINT(SCOREXML):   Marital_Statuessingle = -0.35412036665997;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm10 = 'SINGLE' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = -0.2064750846264;
MPRINT(SCOREXML):   Marital_Statuesmarried = -0.72697986752954;
MPRINT(SCOREXML):   Marital_Statuessingle = 0.94127183026958;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm10 = 'DIVORCED' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = 1.61435228984108;
MPRINT(SCOREXML):   Marital_Statuesmarried = -0.72697986752954;
MPRINT(SCOREXML):   Marital_Statuessingle = -0.35412036665997;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = .;
MPRINT(SCOREXML):   Marital_Statuesmarried = .;
MPRINT(SCOREXML):   Marital_Statuessingle = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUS2vlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUS2vads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUS2vads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Age ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( T_Age - 1.18424929125643 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( T_Age - 0.41497866023155 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( T_Age - 0.79690974995832 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( T_Age - -0.47397955291028 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( T_Age - -0.73775197720301 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( Careeradministration ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careeradministration - -0.05871660538976 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careeradministration - 0.0225282586621 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careeradministration - -0.12678840525876 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careeradministration - -0.00928798287664 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careeradministration - 0.06306076830755 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerblue_collar ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careerblue_collar - 0.02661494432076 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careerblue_collar - -0.05422567463931 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careerblue_collar - 0.23992332001413 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careerblue_collar - 0.03248742973477 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careerblue_collar - -0.04867107526489 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerentrepreneur ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careerentrepreneur - 0.01583664496945 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careerentrepreneur - 0.00535425351598 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careerentrepreneur - 0.05591760032402 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careerentrepreneur - 0.00760370649344 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careerentrepreneur - -0.02887870870372 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerhousemaid ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careerhousemaid - 0.03150082874052 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careerhousemaid - 0.01411933583032 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careerhousemaid - 0.08552308077399 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careerhousemaid - -0.00423515478268 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careerhousemaid - -0.03246525496543 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careermanagement ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careermanagement - 0.02802536313657 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careermanagement - -0.00013826961208 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careermanagement - -0.08355538377402 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careermanagement - 0.0027113714148 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careermanagement - -0.03205363753115 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerretired ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careerretired - 0.1137066362003 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careerretired - 0.03196323223621 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careerretired - 0.05994897560314 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careerretired - -0.05519742754792 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careerretired - -0.05422594136115 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerself_employed ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careerself_employed - 0.00602500478016 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careerself_employed - -0.01059665517528 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careerself_employed - 0.1753469550244 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careerself_employed - 0.00178390549868 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careerself_employed - -0.00432316286808 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerservices ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careerservices - -0.01927306872552 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careerservices - 0.02373623552964 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careerservices - -0.10083546520573 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careerservices - 0.00600796239966 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careerservices - 0.0014584173795 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerstudent ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careerstudent - -0.03608694469763 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careerstudent - -0.03407287646748 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careerstudent - -0.03608694469763 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careerstudent - -0.0295771963357 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careerstudent - 0.09171509945249 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careertechnician ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careertechnician - -0.03593750099073 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careertechnician - 0.0046715474928 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careertechnician - -0.13530190277446 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careertechnician - 0.00121822486212 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careertechnician - 0.03315861172555 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerunemployed ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Careerunemployed - 0.00378443631407 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Careerunemployed - 0.00752210622756 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Careerunemployed - -0.04755584304166 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Careerunemployed - -0.00086394109691 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Careerunemployed - -0.00581150272924 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Educationilliterate ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Educationilliterate - -0.00907832396853 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Educationilliterate - -0.00907832396853 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Educationilliterate - 22.0298500130819 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Educationilliterate - -0.00907832396853 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Educationilliterate - -0.00907832396853 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Educationprimary_education ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Educationprimary_education - 0.16679089719315 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Educationprimary_education - -0.03597002903085 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Educationprimary_education - -0.19892629030724 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Educationprimary_education - -0.02562589554878 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Educationprimary_education - -0.11924325812662 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Educationprofessional_educat ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Educationprofessional_educat - -0.0100572850297 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Educationprofessional_educat - 0.02477410655864 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Educationprofessional_educat - -0.17519457945226 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Educationprofessional_educat - 0.00260113998359 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Educationprofessional_educat - -0.00360524101496 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationsecondary_education ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Educationsecondary_education - -0.05312546960705 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Educationsecondary_education - 0.01102413106815 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Educationsecondary_education - -0.3660658600899 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Educationsecondary_education - 0.03179673525779 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Educationsecondary_education - 0.00658852972414 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Educationuniversity_educatio ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Educationuniversity_educatio - -0.07046958294991 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Educationuniversity_educatio - -0.00060214642377 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Educationuniversity_educatio - -0.29286621546649 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Educationuniversity_educatio - -0.01476733097357 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Educationuniversity_educatio - 0.09264164314716 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Marital_Statuesdivorced ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Marital_Statuesdivorced - -0.19705217264665 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Marital_Statuesdivorced - 1.61435228984102 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Marital_Statuesdivorced - -0.07641598645015 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Marital_Statuesdivorced - -0.20647508462643 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Marital_Statuesdivorced - -0.20647508462639 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Marital_Statuesmarried ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Marital_Statuesmarried - 0.40368137588562 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Marital_Statuesmarried - -0.72697986752957 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Marital_Statuesmarried - 0.28914957265552 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Marital_Statuesmarried - 0.458504479353 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Marital_Statuesmarried - -0.72697986752966 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Marital_Statuessingle ) then do;
MPRINT(SCOREXML):   CLUS2vads [1] + ( Marital_Statuessingle - -0.30091828678171 )**2;
MPRINT(SCOREXML):   CLUS2vads [2] + ( Marital_Statuessingle - -0.35412036666 )**2;
MPRINT(SCOREXML):   CLUS2vads [3] + ( Marital_Statuessingle - -0.26159235259357 )**2;
MPRINT(SCOREXML):   CLUS2vads [4] + ( Marital_Statuessingle - -0.35412036666002 )**2;
MPRINT(SCOREXML):   CLUS2vads [5] + ( Marital_Statuessingle - 0.94127183026944 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   _vqnvar = 4 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 9.0949470177293E-12 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUS2vads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUS2vads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUS2vads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (4 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUS2vlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus2: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if _N_=1 then do;
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   stop;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Varsmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._Progout","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   Name = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open program output.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Varsmeta NODUP Out=Work._Varsmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Invarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Rhs (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   if (a and b) then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Outvarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Varsmeta (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   If a and not b then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   LENGTH strbuf $ 80;
MPRINT(SCOREXML):   strbuf = ' ';
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '<?xml version="1.0" encoding="utf-8"?>';
MPRINT(SCOREXML):   put '<Score>';
MPRINT(SCOREXML):   put @3 '<Producer>';
MPRINT(SCOREXML):   put @6 "<Name> SAS Enterprise Miner </Name>";
MPRINT(SCOREXML):   strbuf = '<Version> ' || "6.2" || ' </Version>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   syslocale = getpxlocale();
MPRINT(SCOREXML):   strbuf = '<Locale> '|| strip(syslocale) ||' </Locale>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   sysencode = getpxencoding('sas12');
MPRINT(SCOREXML):   strbuf = '<Encoding> '|| strip(sysencode) ||' </Encoding>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   put @3 '</Producer>';
MPRINT(SCOREXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(SCOREXML):   put @3 '<CFunction>';
MPRINT(SCOREXML):   put @6 '<Name> score </Name>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="input">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "4" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="output">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "3" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @3 '</CFunction>';
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Invarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = ' <Input count="' || "4" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "4" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Outvarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = ' <Input count="' || "3" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "3" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '</Score>';
MPRINT(SCOREXML):   Run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _code;
MPRINT(EM_DIAGRAM):   filename _xml;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Input table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc sort data=work._invarsmeta out=_inpckgtemp(keep=NAME);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.FIMPORT_EMCMETADEFAULT out=_inpckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\input.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.input;
MPRINT(EM_DIAGRAM):   merge _inpckgtemp(in=_a) _inpckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=work._progout out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('work._progout');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set work._progout;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=work._progout out=WORK.M2C1GQXE noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2C1GQXE;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2C1GQXE(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2C1GQXE;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2C1GQXE;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2QGNCR3 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2QGNCR3;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2QGNCR3;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2U45JT1(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2QGNCR3;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2QGNCR3;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2QGNCR3;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2QGNCR3;
MPRINT(EMADVISECOLUMNS):   set WORK.M2QGNCR3;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=work._empckgtemp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_outvarsmeta(keep=NAME LABEL) out=work._empckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\output.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.output;
MPRINT(EM_DIAGRAM):   merge work._empckgtemp(in=_a) work._empckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    proc datasets library=WORK NOLIST NOWARN NODETAILS;
MPRINT(EM_DIAGRAM):   delete _alldeps _Indatavmeta _Keepvars _Keepnames _Invarsmeta _Progout _Outvarsmeta _Rhs _Varsmeta;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof2_2WWD9\miningResult.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* FIMPORT : Beginning creation of SPK report 
* datetime : 28SEP2020:04:22:48 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   proc compare base=EMWS1.FIMPORT_emtrainvariable compare=EMWS1.FIMPORT_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   set diffDs end=eof;
MPRINT(EM_GETACTIONSTATUS):   if eof and _N_>0 then call symput('diffVar', 'Y');
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):    data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN17216";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.FIMPORT_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.FIMPORT_EMTRAINVARIABLE / view=WORK.FIMPORT_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "DROP"n = "Drop (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:22:49 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base2V4V0UD as select * from WORK.M3KGHZSY order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp2V4V0UD as select * from WORK.M3KWBLQI order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base2V4V0UD compare=work._comp2V4V0UD out=WORK._DIFF1AIYVIQ noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP105JW952 as select * from WORK._DIFF1AIYVIQ where NAME in (select NAME from WORK._DIFF1AIYVIQ where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM1SB_0M3 as select * from WORK._DIFF1AIYVIQ where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF1AIYVIQ where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM1SB_0M3 as select * from WORK._DIFF1AIYVIQ where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF1AIYVIQ where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM1SB_0M3;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM1SB_0M3;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM1SB_0M3;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM1SB_0M3;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\DELTACODE.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "CLUS2" 
Traverser: WaitingNode "PROF2" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Filter2 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:22:49 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Filter2_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter2_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter2_EMTRAINVARIABLE / view=WORK.Filter2_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Limit Method (C)";
MPRINT(EM_DIAGRAM):   label "KEEPMISSING"n = "Keep Missing Values (C)";
MPRINT(EM_DIAGRAM):   label "MINFREQ"n = "Minimum Frequency Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "MAXVALUES"n = "Number of Levels Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMIN"n = "Lower Limit (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMAX"n = "Upper Limit (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter2_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter2_CLASS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter2_CLASS / view=WORK.Filter2_CLASS;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Train Count (N)(10.0)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Train Percent (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Filter Method (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter2_CLASS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter2_INTERVAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter2_INTERVAL / view=WORK.Filter2_INTERVAL;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "INTERVALMIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Filter Method (C)";
MPRINT(EM_DIAGRAM):   label "KEEPMISSING"n = "Keep Missing Values (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter2_INTERVAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:22:50 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base3A_J8IM as select * from WORK.M0JO0H7K order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp3A_J8IM as select * from WORK.M1U8IXKW order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base3A_J8IM compare=work._comp3A_J8IM out=WORK._DIFF1HTIAOU noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP10XEPMVT as select * from WORK._DIFF1HTIAOU where NAME in (select NAME from WORK._DIFF1HTIAOU where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM3UC8XKF as select * from WORK._DIFF1HTIAOU where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF1HTIAOU where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM3UC8XKF as select * from WORK._DIFF1HTIAOU where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF1HTIAOU where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM3UC8XKF;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM3UC8XKF;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM3UC8XKF;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM3UC8XKF;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "PROF2" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Clus2 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:22:50 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus2_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus2_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus2_EMTRAINVARIABLE / view=WORK.Clus2_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus2_OUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus2_OUTMEAN / view=WORK.Clus2_OUTMEAN;
MPRINT(EM_DIAGRAM):   label "_CRIT_"n = "Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_XCONV_"n = "Maximum Relative Change in Cluster Seeds (N)";
MPRINT(EM_DIAGRAM):   label "_FCONV_"n = "Improvement in Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "_FREQ_"n = "Frequency of Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_RMSSTD_"n = "Root-Mean-Square Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "_RADIUS_"n = "Maximum Distance from Cluster Seed (N)";
MPRINT(EM_DIAGRAM):   label "_NEAR_"n = "Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_GAP_"n = "Distance to Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "Age"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Careeradministration"n = "Career=administration (N)";
MPRINT(EM_DIAGRAM):   label "Careerblue_collar"n = "Career=blue-collar (N)";
MPRINT(EM_DIAGRAM):   label "Careerentrepreneur"n = "Career=entrepreneur (N)";
MPRINT(EM_DIAGRAM):   label "Careerhousemaid"n = "Career=housemaid (N)";
MPRINT(EM_DIAGRAM):   label "Careermanagement"n = "Career=management (N)";
MPRINT(EM_DIAGRAM):   label "Careerretired"n = "Career=retired (N)";
MPRINT(EM_DIAGRAM):   label "Careerself_employed"n = "Career=self-employed (N)";
MPRINT(EM_DIAGRAM):   label "Careerservices"n = "Career=services (N)";
MPRINT(EM_DIAGRAM):   label "Careerstudent"n = "Career=student (N)";
MPRINT(EM_DIAGRAM):   label "Careertechnician"n = "Career=technician (N)";
MPRINT(EM_DIAGRAM):   label "Careerunemployed"n = "Career=unemployed (N)";
MPRINT(EM_DIAGRAM):   label "Educationilliterate"n = "Education=illiterate (N)";
MPRINT(EM_DIAGRAM):   label "Educationprimary_education"n = "Education=primary education (N)";
MPRINT(EM_DIAGRAM):   label "Educationprofessional_educat"n = "Education=professional education (N)";
MPRINT(EM_DIAGRAM):   label "Educationsecondary_education"n = "Education=secondary education (N)";
MPRINT(EM_DIAGRAM):   label "Educationuniversity_educatio"n = "Education=university education (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuesdivorced"n = "Marital_Statues=divorced (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuesmarried"n = "Marital_Statues=married (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuessingle"n = "Marital_Statues=single (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_OUTMEAN(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus2_OUTSTAT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus2_OUTSTAT / view=WORK.Clus2_OUTSTAT;
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Type of Observation (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "Over_All"n = "Statistic Applying Over All Variables (N)";
MPRINT(EM_DIAGRAM):   label "Age"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Careeradministration"n = "Career=administration (N)";
MPRINT(EM_DIAGRAM):   label "Careerblue_collar"n = "Career=blue-collar (N)";
MPRINT(EM_DIAGRAM):   label "Careerentrepreneur"n = "Career=entrepreneur (N)";
MPRINT(EM_DIAGRAM):   label "Careerhousemaid"n = "Career=housemaid (N)";
MPRINT(EM_DIAGRAM):   label "Careermanagement"n = "Career=management (N)";
MPRINT(EM_DIAGRAM):   label "Careerretired"n = "Career=retired (N)";
MPRINT(EM_DIAGRAM):   label "Careerself_employed"n = "Career=self-employed (N)";
MPRINT(EM_DIAGRAM):   label "Careerservices"n = "Career=services (N)";
MPRINT(EM_DIAGRAM):   label "Careerstudent"n = "Career=student (N)";
MPRINT(EM_DIAGRAM):   label "Careertechnician"n = "Career=technician (N)";
MPRINT(EM_DIAGRAM):   label "Careerunemployed"n = "Career=unemployed (N)";
MPRINT(EM_DIAGRAM):   label "Educationilliterate"n = "Education=illiterate (N)";
MPRINT(EM_DIAGRAM):   label "Educationprimary_education"n = "Education=primary education (N)";
MPRINT(EM_DIAGRAM):   label "Educationprofessional_educat"n = "Education=professional education (N)";
MPRINT(EM_DIAGRAM):   label "Educationsecondary_education"n = "Education=secondary education (N)";
MPRINT(EM_DIAGRAM):   label "Educationuniversity_educatio"n = "Education=university education (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuesdivorced"n = "Marital_Statues=divorced (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuesmarried"n = "Marital_Statues=married (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuessingle"n = "Marital_Statues=single (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_OUTSTAT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus2_INPUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus2_INPUTMEAN / view=WORK.Clus2_INPUTMEAN;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_CHAR_"n = "Segment Id (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Name (N)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "INPUT"n = "Input (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CV"n = "Coefficient of Variation (N)";
MPRINT(EM_DIAGRAM):   label "STDMEAN"n = "Normalized Mean (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_INPUTMEAN(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus2_TREE_PLOT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus2_TREE_PLOT / view=WORK.Clus2_TREE_PLOT;
MPRINT(EM_DIAGRAM):   label "NODETEXT"n = "Node Text (C)";
MPRINT(EM_DIAGRAM):   label "TEXTALL"n = "All Text (C)";
MPRINT(EM_DIAGRAM):   label "N"n = "Train: Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "NODECOLOR"n = "Node Color (N)";
MPRINT(EM_DIAGRAM):   label "parent"n = "Parent Id (N)";
MPRINT(EM_DIAGRAM):   label "abovetext"n = "Above Text (C)";
MPRINT(EM_DIAGRAM):   label "NODE"n = "Node (N)";
MPRINT(EM_DIAGRAM):   label "DEPTH"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   label "LINKWIDTH"n = "Link Width (N)";
MPRINT(EM_DIAGRAM):   label "belowtext"n = "Below Text (C)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Square Error (N)";
MPRINT(EM_DIAGRAM):   label "P__SEGMENT_1"n = "Predicted Variable (N)";
MPRINT(EM_DIAGRAM):   label "traintotal"n = "Train Total (N)";
MPRINT(EM_DIAGRAM):   label "index"n = "Leaf Index (N)";
MPRINT(EM_DIAGRAM):   label "percevent_train"n = "Percent Cases (N)";
MPRINT(EM_DIAGRAM):   label "perc_train"n = "Event Percentage (N)";
MPRINT(EM_DIAGRAM):   label "tprob"n = "Training Percent (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_TREE_PLOT(obs=10000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus2_OUTIMPORT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus2_OUTIMPORT / view=WORK.Clus2_OUTIMPORT;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NRULES"n = "Number of Splitting Rules (N)";
MPRINT(EM_DIAGRAM):   label "NSURROGATES"n = "Number of Surrogate Rules (N)";
MPRINT(EM_DIAGRAM):   label "IMPORTANCE"n = "Importance (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_OUTIMPORT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus2_PROFILE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus2_PROFILE / view=WORK.Clus2_PROFILE;
MPRINT(EM_DIAGRAM):   label "BYPERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Variable (N)";
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "NumericValue"n = "Numeric Value (N)";
MPRINT(EM_DIAGRAM):   label "FmtValue"n = "Formatted Value (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "_Label_"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "orderedValue"n = "Ordered Values (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_PROFILE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus2_DISTANCE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus2_DISTANCE / view=WORK.Clus2_DISTANCE;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_1"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_2"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_3"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_4"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_5"n = " (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus2_DISTANCE(obs=60000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:22:51 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base033ORN3 as select * from WORK.M3VIYK1H order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp033ORN3 as select * from WORK.M156ZXZI order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base033ORN3 compare=work._comp033ORN3 out=WORK._DIFF1D27FMY noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP1239ZQ7G as select * from WORK._DIFF1D27FMY where NAME in (select NAME from WORK._DIFF1D27FMY where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM28P7LDN as select * from WORK._DIFF1D27FMY where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF1D27FMY where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM28P7LDN as select * from WORK._DIFF1D27FMY where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF1D27FMY where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM28P7LDN;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM28P7LDN;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM28P7LDN;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM28P7LDN;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMNOTES.txt" encoding="UTF-8" NOBOM;
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Prof2 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:22:52 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN17380";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof2_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof2_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof2_EMTRAINVARIABLE / view=WORK.Prof2_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof2_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof2_SIZE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof2_SIZE / view=WORK.Prof2_SIZE;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Count"n = "Frequency Count (N)(12.0)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)(5.2)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof2_SIZE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof2_STATS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof2_STATS / view=WORK.Prof2_STATS;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof2_STATS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof2_CLASSDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof2_CLASSDIST / view=WORK.Prof2_CLASSDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (C)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Groupindex"n = "Group Index (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof2_CLASSDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof2_INTDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof2_INTDIST / view=WORK.Prof2_INTDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (N)(12.3)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Color"n = "Color (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof2_INTDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof2_WORTH OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof2_WORTH / view=WORK.Prof2_WORTH;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof2_WORTH(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:22:52 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base2KLS0JN as select * from WORK.M2W7IGWA order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp2KLS0JN as select * from WORK.M1M9_8XZ order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base2KLS0JN compare=work._comp2KLS0JN out=WORK._DIFF3K58VXV noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMNOTES.txt" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\dsapimeta.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\layout.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc printto print=#LN17453;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options NODATE NONUMBER;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RUNSTATUS noobs label;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options DATE NUMBER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof2_2WWD9;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   rc = 0;
MPRINT(EM_DIAGRAM):   Pack1V1A = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1V1A, "Profile", ' type="EM Result" version="14.1" Report="20161277_Assignment2_Prof2_2WWD9" nodeid="Prof2" description="Segment Profile  2" component="Profile"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Profile began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack33A9 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack33A9, "MININGRESULT", ' NAME="Mining Result Metadata"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package MININGRESULT began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1V1A, Pack33A9, rc, "NESTED_NAME", "MININGRESULT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2O4UMVO "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack33A9, "fileref:F2O4UMVO", "BINARY", "text/xml", 'SXML', 'NAME=SCOREXML TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F31BYDGC "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\input.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack33A9, "fileref:F31BYDGC", "BINARY", "text/xml", 'INPUTTABLE', 'NAME=INPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\input.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F37YU0O0 "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\output.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack33A9, "fileref:F37YU0O0", "BINARY", "text/xml", 'OUTPUTTABLE', 'NAME=OUTPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\output.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2TLE3HM "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof2_2WWD9\miningResult.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack33A9, "fileref:F2TLE3HM", "BINARY", "text/xml", 'MININGRESULT', 'NAME=MININGRESULT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof2_2WWD9\miningResult.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3N4G = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3N4G, "File Import - Demographic - Task 1", ' NAME="FIMPORT"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package File Import - Demographic - Task 1 began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0Q5QYW7 "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3N4G, "fileref:F0Q5QYW7", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2LG_IGQ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3N4G, "fileref:F2LG_IGQ", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0YE9XX7 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3N4G, "fileref:F0YE9XX7", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3N4G, "work", "FIMPORT_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1DIBNXA "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3N4G, "fileref:F1DIBNXA", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0OWW2LA "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3N4G, "fileref:F0OWW2LA", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1_WM_X3 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3N4G, "fileref:F1_WM_X3", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F37BQH1H "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3N4G, "fileref:F37BQH1H", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F02MQJP3 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3N4G, "fileref:F02MQJP3", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1V1A, Pack3N4G, rc, "NESTED_NAME", "FIMPORT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2SD3 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2SD3, "Filter - No", ' NAME="Filter2"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Filter - No began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0HORK7G "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Filter2_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2SD3, "fileref:F0HORK7G", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Filter2_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0G5TTYY "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2SD3, "fileref:F0G5TTYY", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F06IZR7G "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2SD3, "fileref:F06IZR7G", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2SD3, "work", "Filter2_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F31VTVOK "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2SD3, "fileref:F31VTVOK", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2VMDA3W "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2SD3, "fileref:F2VMDA3W", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2E6WW5Y "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2SD3, "fileref:F2E6WW5Y", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3JA7GHC "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2SD3, "fileref:F3JA7GHC", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2GCAPKZ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2SD3, "fileref:F2GCAPKZ", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2K2YRCF "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2SD3, "fileref:F2K2YRCF", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2SD3, "work", "Filter2_CLASS", "EXCLUDECLASS", "NAME=CLASS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file EXCLUDECLASS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2SD3, "work", "Filter2_INTERVAL", "LIMITINTERVAL", "NAME=INTERVAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file LIMITINTERVAL inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1V1A, Pack2SD3, rc, "NESTED_NAME", "Filter2");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0FP4 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0FP4, "Cluster (2)", ' NAME="Clus2"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Cluster (2) began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1BFGCVL "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus2_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0FP4, "fileref:F1BFGCVL", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus2_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0_3Z1HN "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0FP4, "fileref:F0_3Z1HN", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0KRN88W "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0FP4, "fileref:F0KRN88W", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0FP4, "work", "Clus2_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F11167TV "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0FP4, "fileref:F11167TV", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1Q4_VGQ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0FP4, "fileref:F1Q4_VGQ", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1209SM1 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0FP4, "fileref:F1209SM1", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2L_VOUK "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0FP4, "fileref:F2L_VOUK", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3LVZWHZ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0FP4, "fileref:F3LVZWHZ", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1O7MF9_ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0FP4, "fileref:F1O7MF9_", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F26GNHTA "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0FP4, "fileref:F26GNHTA", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0FP4, "work", "Clus2_OUTMEAN", "CLUSMEAN", "NAME=OUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0FP4, "work", "Clus2_OUTSTAT", "CLUSSTAT", "NAME=OUTSTAT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0FP4, "work", "Clus2_INPUTMEAN", "INPUTMEAN", "NAME=INPUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file INPUTMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0FP4, "work", "Clus2_TREE_PLOT", "TREE_PLOT", "NAME=TREE_PLOT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file TREE_PLOT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1V1T3_0 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\ENGLISHRULES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0FP4, "fileref:F1V1T3_0", "TEXT", "text/plain", 'ENGLISHRULES', 'NAME=EnglishRules TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\ENGLISHRULES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0FP4, "work", "Clus2_OUTIMPORT", "IMPORTANCE", "NAME=OUTIMPORT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file IMPORTANCE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0FP4, "work", "Clus2_PROFILE", "Segment Profiles", "NAME=PROFILE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file PROFILE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3ECB = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3ECB, "GRAPH", ' NAME="GRAPH"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package GRAPH began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0FP4, Pack3ECB, rc, "NESTED_NAME", "GRAPH");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2IRI4ZS "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\GRAPH\Distance.gif";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3ECB, "fileref:F2IRI4ZS", "BINARY", "image/gif", 'Distance', 'NAME="Distance" TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\GRAPH\Distance.gif inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0FP4, "work", "Clus2_DISTANCE", "Distance Table", "NAME=DISTANCE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file DISTANCETABLE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1V1A, Pack0FP4, rc, "NESTED_NAME", "Clus2");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0CCQ = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0CCQ, "Segment Profile (2)", ' NAME="Prof2"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Segment Profile (2) began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2VHB9B8 "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof2_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CCQ, "fileref:F2VHB9B8", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof2_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3IHK358 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CCQ, "fileref:F3IHK358", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0F0TOGM "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CCQ, "fileref:F0F0TOGM", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0CCQ, "work", "Prof2_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2JT56AW "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CCQ, "fileref:F2JT56AW", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1TLWI3S "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CCQ, "fileref:F1TLWI3S", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0HOW8EC "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CCQ, "fileref:F0HOW8EC", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1WE_ACR "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CCQ, "fileref:F1WE_ACR", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0G68L6P "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CCQ, "fileref:F0G68L6P", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0CCQ, "work", "Prof2_SIZE", "Profileview", "NAME=SIZE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0CCQ, "work", "Prof2_STATS", "Profileview", "NAME=STATS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0CCQ, "work", "Prof2_CLASSDIST", "Profileview", "NAME=CLASSDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0CCQ, "work", "Prof2_INTDIST", "Profileview", "NAME=INTDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0CCQ, "work", "Prof2_WORTH", "profworth", "NAME=WORTH TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file profworth inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1V1A, Pack0CCQ, rc, "NESTED_NAME", "Prof2");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3Q6H = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3Q6H, "WORKSPACE", ' NAME="Workspace configuration"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package WORKSPACE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1V1A, Pack3Q6H, rc, "NESTED_NAME", "WORKSPACE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1F5OBIT "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\dsapi.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3Q6H, "fileref:F1F5OBIT", "TEXT", "text/plain", 'Batch Code', 'NAME=BATCHCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\dsapi.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F30IAS3D "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\dsapimeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3Q6H, "fileref:F30IAS3D", "BINARY", "text/xml", 'Batch Metadata', 'NAME=BATCHMETADATA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\dsapimeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0PVU9TH "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\layout.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3Q6H, "fileref:F0PVU9TH", "BINARY", "text/xml", 'Properties', 'NAME=LAYOUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\layout.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0P_TUFC "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1V1A, "fileref:F0P_TUFC", "TEXT", "text/plain", 'NODESTATUS', 'NAME=NODESTATUS TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2CVY = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2CVY, "PATHSCORE", ' NAME="Path score code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PATHSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1V1A, Pack2CVY, rc, "NESTED_NAME", "PATHSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0XO4 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0XO4, "SASSCORE", ' NAME="SAS Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package SASSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack2CVY, Pack0XO4, rc, "NESTED_NAME", "SASSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0H75CR9 "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0ME27R0score.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0XO4, "fileref:F0H75CR9", "TEXT", "text/plain", 'SASCODE', 'NAME=SASCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0ME27R0score.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2E0O = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2E0O, "PMMLSCORE", ' NAME="PMML Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PMMLSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack2CVY, Pack2E0O, rc, "NESTED_NAME", "PMMLSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   pubType = "TO_ARCHIVE";
MPRINT(EM_DIAGRAM):   properties='archive_path, archive_name';
MPRINT(EM_DIAGRAM):   path = "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof2_2WWD9";
MPRINT(EM_DIAGRAM):   name = "miningResult";
MPRINT(EM_DIAGRAM):   call package_publish(Pack1V1A, pubType, rc, properties, path, name);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Publish package Pack1V1A successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call package_end(Pack1V1A, rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Pack1V1A ended successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
Package Profile began successfully.
Package MININGRESULT began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\input.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\output.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof2_2WWD9\miningResult.xml inserted successfully.
Package File Import - Demographic - Task 1 began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMCUSTOMGRAPH.xml inserted successfully.
spk_PACKAGEINSERT_note
Package Filter - No began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Filter2_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter2\EMCUSTOMGRAPH.xml inserted successfully.
CSV file EXCLUDECLASS inserted successfully.
CSV file LIMITINTERVAL inserted successfully.
spk_PACKAGEINSERT_note
Package Cluster (2) began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus2_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMFLOWSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\EMCUSTOMGRAPH.xml inserted successfully.
CSV file CLUSMEAN inserted successfully.
CSV file CLUSSTAT inserted successfully.
CSV file INPUTMEAN inserted successfully.
CSV file TREE_PLOT inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\ENGLISHRULES.txt inserted successfully.
CSV file IMPORTANCE inserted successfully.
CSV file PROFILE inserted successfully.
Package GRAPH began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus2\GRAPH\Distance.gif inserted successfully.
CSV file DISTANCETABLE inserted successfully.
spk_PACKAGEINSERT_note
Package Segment Profile (2) began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof2_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof2\EMCUSTOMGRAPH.xml inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file profworth inserted successfully.
spk_PACKAGEINSERT_note
Package WORKSPACE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\dsapi.sas inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\dsapimeta.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1N8OY58\layout.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out inserted successfully.
Package PATHSCORE began successfully.
spk_PACKAGEINSERT_note
Package SASSCORE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0ME27R0score.sas inserted successfully.
Package PMMLSCORE began successfully.
spk_PACKAGEINSERT_note
Publish package Pack1V1A successfully.
Package Pack1V1A ended successfully.
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   filename F2O4UMVO;
MPRINT(EM_DIAGRAM):   filename F31BYDGC;
MPRINT(EM_DIAGRAM):   filename F37YU0O0;
MPRINT(EM_DIAGRAM):   filename F2TLE3HM;
MPRINT(EM_DIAGRAM):   filename F0Q5QYW7;
MPRINT(EM_DIAGRAM):   filename F2LG_IGQ;
MPRINT(EM_DIAGRAM):   filename F0YE9XX7;
MPRINT(EM_DIAGRAM):   filename F1DIBNXA;
MPRINT(EM_DIAGRAM):   filename F0OWW2LA;
MPRINT(EM_DIAGRAM):   filename F1_WM_X3;
MPRINT(EM_DIAGRAM):   filename F37BQH1H;
MPRINT(EM_DIAGRAM):   filename F02MQJP3;
MPRINT(EM_DIAGRAM):   filename F0HORK7G;
MPRINT(EM_DIAGRAM):   filename F0G5TTYY;
MPRINT(EM_DIAGRAM):   filename F06IZR7G;
MPRINT(EM_DIAGRAM):   filename F31VTVOK;
MPRINT(EM_DIAGRAM):   filename F2VMDA3W;
MPRINT(EM_DIAGRAM):   filename F2E6WW5Y;
MPRINT(EM_DIAGRAM):   filename F3JA7GHC;
MPRINT(EM_DIAGRAM):   filename F2GCAPKZ;
MPRINT(EM_DIAGRAM):   filename F2K2YRCF;
MPRINT(EM_DIAGRAM):   filename F1BFGCVL;
MPRINT(EM_DIAGRAM):   filename F0_3Z1HN;
MPRINT(EM_DIAGRAM):   filename F0KRN88W;
MPRINT(EM_DIAGRAM):   filename F11167TV;
MPRINT(EM_DIAGRAM):   filename F1Q4_VGQ;
MPRINT(EM_DIAGRAM):   filename F1209SM1;
MPRINT(EM_DIAGRAM):   filename F2L_VOUK;
MPRINT(EM_DIAGRAM):   filename F3LVZWHZ;
MPRINT(EM_DIAGRAM):   filename F1O7MF9_;
MPRINT(EM_DIAGRAM):   filename F26GNHTA;
MPRINT(EM_DIAGRAM):   filename F1V1T3_0;
MPRINT(EM_DIAGRAM):   filename F2IRI4ZS;
MPRINT(EM_DIAGRAM):   filename F2VHB9B8;
MPRINT(EM_DIAGRAM):   filename F3IHK358;
MPRINT(EM_DIAGRAM):   filename F0F0TOGM;
MPRINT(EM_DIAGRAM):   filename F2JT56AW;
MPRINT(EM_DIAGRAM):   filename F1TLWI3S;
MPRINT(EM_DIAGRAM):   filename F0HOW8EC;
MPRINT(EM_DIAGRAM):   filename F1WE_ACR;
MPRINT(EM_DIAGRAM):   filename F0G68L6P;
MPRINT(EM_DIAGRAM):   filename F1F5OBIT;
MPRINT(EM_DIAGRAM):   filename F30IAS3D;
MPRINT(EM_DIAGRAM):   filename F0PVU9TH;
MPRINT(EM_DIAGRAM):   filename F0P_TUFC;
MPRINT(EM_DIAGRAM):   filename F0H75CR9;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options notes source;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
92472      %let eminfo= %str();
92473      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
92474      set EMWS1.Prof_ExportSet;
MPRINT(EM_DIAGRAM):   set EMWS1.Prof_ExportSet;
92475      where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
MPRINT(EM_DIAGRAM):   where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
92476      call symput('eminfo', strip(eminfo));
MPRINT(EM_DIAGRAM):   call symput('eminfo', strip(eminfo));
92477      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.PROF_EXPORTSET.
      WHERE (eminfo not = ' ') and NODEPORT in ('DATA', 'TRAIN');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Retrieving Score Code FIMPORT 
Traverser: WaitingNode "CLUS3" 
Traverser: WaitingNode "PROF" 
traverser_readyNode_note 
Retrieving Score Code Filter 
Traverser: WaitingNode "PROF" 
traverser_readyNode_note 
Retrieving Score Code Clus3 
traverser_readyNode_note 
Retrieving Score Code Prof 
92478      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
92479      * Report: Determine If validvarname ANY variables are score inputs;
MPRINT(EM_DIAGRAM):   * Report: Determine If validvarname ANY variables are score inputs;
92480      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
92481      filename _pref "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2TKXDFYscore.sas";
MPRINT(EM_DIAGRAM):   filename _pref "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2TKXDFYscore.sas";
92482      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
92483      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   * EM Version: 14.1;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M3P062415;
MPRINT(EM_DIAGRAM):   * Host: ba-teaching;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(EM_DIAGRAM):   * Project Name: 20161277_CAassignment2;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: All Tasks;
MPRINT(EM_DIAGRAM):   * Generated by: 20161277;
MPRINT(EM_DIAGRAM):   * Date: 28SEP2020:04:22:57;
MPRINT(EM_DIAGRAM):   * Macro variable identifying the scored data set;
MPRINT(EM_DIAGRAM):   *%let EM_SCORE_OUTPUT=;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Filter;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Clustering;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Clus3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize Age ;
MPRINT(EM_DIAGRAM):   drop T_Age ;
MPRINT(EM_DIAGRAM):   if missing( Age ) then T_Age = .;
MPRINT(EM_DIAGRAM):   else T_Age = (Age - 40.7367308595584) * 0.07423424616033;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Career ;
MPRINT(EM_DIAGRAM):   drop Careeradministration Careerblue_collar Careerentrepreneur Careerhousemaid Careermanagement Careerretired Careerself_employed Careerservices Careerstudent Careertechnician Careerunemployed ;
MPRINT(EM_DIAGRAM):   if missing( Career ) then do;
MPRINT(EM_DIAGRAM):   Careeradministration = .;
MPRINT(EM_DIAGRAM):   Careerblue_collar = .;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = .;
MPRINT(EM_DIAGRAM):   Careerhousemaid = .;
MPRINT(EM_DIAGRAM):   Careermanagement = .;
MPRINT(EM_DIAGRAM):   Careerretired = .;
MPRINT(EM_DIAGRAM):   Careerself_employed = .;
MPRINT(EM_DIAGRAM):   Careerservices = .;
MPRINT(EM_DIAGRAM):   Careerstudent = .;
MPRINT(EM_DIAGRAM):   Careertechnician = .;
MPRINT(EM_DIAGRAM):   Careerunemployed = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm16 $ 16;
MPRINT(EM_DIAGRAM):   drop _dm16 ;
MPRINT(EM_DIAGRAM):   _dm16 = put( Career , $16. );
MPRINT(DMNORMIP):   call dmnorm(_dm16,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm16 <= 'RETIRED' then do;
MPRINT(EM_DIAGRAM):   if _dm16 <= 'ENTREPRENEUR' then do;
MPRINT(EM_DIAGRAM):   if _dm16 <= 'BLUE-COLLAR' then do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'ADMINISTRATION' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = 0.45907412043477;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.12150458809345;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05045179254789;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.04627208046437;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08359323130889;
MPRINT(EM_DIAGRAM):   Careerretired = -0.09572860379648;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05680708819217;
MPRINT(EM_DIAGRAM):   Careerservices = -0.08255216308554;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.06832140830084;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13177255984613;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.05517515846472;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'BLUE-COLLAR' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.19798053664464;
MPRINT(EM_DIAGRAM):   Careerblue_collar = 0.74801900199385;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05045179254789;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.04627208046437;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08359323130889;
MPRINT(EM_DIAGRAM):   Careerretired = -0.09572860379648;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05680708819217;
MPRINT(EM_DIAGRAM):   Careerservices = -0.08255216308554;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.06832140830084;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13177255984613;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.05517515846472;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'ENTREPRENEUR' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.19798053664464;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.12150458809345;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = 1.80147693735678;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.04627208046437;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08359323130889;
MPRINT(EM_DIAGRAM):   Careerretired = -0.09572860379648;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05680708819217;
MPRINT(EM_DIAGRAM):   Careerservices = -0.08255216308554;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.06832140830084;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13177255984613;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.05517515846472;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 <= 'MANAGEMENT' then do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'HOUSEMAID' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.19798053664464;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.12150458809345;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05045179254789;
MPRINT(EM_DIAGRAM):   Careerhousemaid = 1.9642025993042;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08359323130889;
MPRINT(EM_DIAGRAM):   Careerretired = -0.09572860379648;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05680708819217;
MPRINT(EM_DIAGRAM):   Careerservices = -0.08255216308554;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.06832140830084;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13177255984613;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.05517515846472;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'MANAGEMENT' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.19798053664464;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.12150458809345;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05045179254789;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.04627208046437;
MPRINT(EM_DIAGRAM):   Careermanagement = 1.08726196248472;
MPRINT(EM_DIAGRAM):   Careerretired = -0.09572860379648;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05680708819217;
MPRINT(EM_DIAGRAM):   Careerservices = -0.08255216308554;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.06832140830084;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13177255984613;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.05517515846472;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'RETIRED' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.19798053664464;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.12150458809345;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05045179254789;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.04627208046437;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08359323130889;
MPRINT(EM_DIAGRAM):   Careerretired = 0.94943138329441;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05680708819217;
MPRINT(EM_DIAGRAM):   Careerservices = -0.08255216308554;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.06832140830084;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13177255984613;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.05517515846472;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 <= 'STUDENT' then do;
MPRINT(EM_DIAGRAM):   if _dm16 <= 'SERVICES' then do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'SELF-EMPLOYED' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.19798053664464;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.12150458809345;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05045179254789;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.04627208046437;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08359323130889;
MPRINT(EM_DIAGRAM):   Careerretired = -0.09572860379648;
MPRINT(EM_DIAGRAM):   Careerself_employed = 1.59993662086455;
MPRINT(EM_DIAGRAM):   Careerservices = -0.08255216308554;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.06832140830084;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13177255984613;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.05517515846472;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'SERVICES' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.19798053664464;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.12150458809345;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05045179254789;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.04627208046437;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08359323130889;
MPRINT(EM_DIAGRAM):   Careerretired = -0.09572860379648;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05680708819217;
MPRINT(EM_DIAGRAM):   Careerservices = 1.10097346121827;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.06832140830084;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13177255984613;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.05517515846472;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'STUDENT' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.19798053664464;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.12150458809345;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05045179254789;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.04627208046437;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08359323130889;
MPRINT(EM_DIAGRAM):   Careerretired = -0.09572860379648;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05680708819217;
MPRINT(EM_DIAGRAM):   Careerservices = -0.08255216308554;
MPRINT(EM_DIAGRAM):   Careerstudent = 1.33029665201171;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13177255984613;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.05517515846472;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'TECHNICIAN' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.19798053664464;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.12150458809345;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05045179254789;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.04627208046437;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08359323130889;
MPRINT(EM_DIAGRAM):   Careerretired = -0.09572860379648;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05680708819217;
MPRINT(EM_DIAGRAM):   Careerservices = -0.08255216308554;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.06832140830084;
MPRINT(EM_DIAGRAM):   Careertechnician = 0.68973192013168;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.05517515846472;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'UNEMPLOYED' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.19798053664464;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.12150458809345;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05045179254789;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.04627208046437;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08359323130889;
MPRINT(EM_DIAGRAM):   Careerretired = -0.09572860379648;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05680708819217;
MPRINT(EM_DIAGRAM):   Careerservices = -0.08255216308554;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.06832140830084;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13177255984613;
MPRINT(EM_DIAGRAM):   Careerunemployed = 1.64725835416415;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   Careeradministration = .;
MPRINT(EM_DIAGRAM):   Careerblue_collar = .;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = .;
MPRINT(EM_DIAGRAM):   Careerhousemaid = .;
MPRINT(EM_DIAGRAM):   Careermanagement = .;
MPRINT(EM_DIAGRAM):   Careerretired = .;
MPRINT(EM_DIAGRAM):   Careerself_employed = .;
MPRINT(EM_DIAGRAM):   Careerservices = .;
MPRINT(EM_DIAGRAM):   Careerstudent = .;
MPRINT(EM_DIAGRAM):   Careertechnician = .;
MPRINT(EM_DIAGRAM):   Careerunemployed = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   drop Educationilliterate Educationprimary_education Educationprofessional_educat Educationsecondary_education Educationuniversity_educatio ;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = .;
MPRINT(EM_DIAGRAM):   Educationprimary_education = .;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = .;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = .;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm24 $ 24;
MPRINT(EM_DIAGRAM):   drop _dm24 ;
MPRINT(EM_DIAGRAM):   _dm24 = put( Education , $24. );
MPRINT(DMNORMIP):   call dmnorm(_dm24,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'PROFESSIONAL EDUCATION' then do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'PRIMARY EDUCATION' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'ILLITERATE' then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = 14.5825253975574;
MPRINT(EM_DIAGRAM):   Educationprimary_education = -0.17969194825559;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = -0.17721643846104;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = -0.32368407414863;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = -0.3504161437781;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'PRIMARY EDUCATION' then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = -0.01371182453931;
MPRINT(EM_DIAGRAM):   Educationprimary_education = 1.11275453092059;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = -0.17721643846104;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = -0.32368407414863;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = -0.3504161437781;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'PROFESSIONAL EDUCATION' then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = -0.01371182453931;
MPRINT(EM_DIAGRAM):   Educationprimary_education = -0.17969194825559;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = 1.12829843172428;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = -0.32368407414863;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = -0.3504161437781;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'SECONDARY EDUCATION' then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = -0.01371182453931;
MPRINT(EM_DIAGRAM):   Educationprimary_education = -0.17969194825559;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = -0.17721643846104;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = 0.61774132730279;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = -0.3504161437781;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'UNIVERSITY EDUCATION' then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = -0.01371182453931;
MPRINT(EM_DIAGRAM):   Educationprimary_education = -0.17969194825559;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = -0.17721643846104;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = -0.32368407414863;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = 0.57061591807817;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = .;
MPRINT(EM_DIAGRAM):   Educationprimary_education = .;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = .;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = .;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Statues ;
MPRINT(EM_DIAGRAM):   drop Marital_Statuesdivorced Marital_Statuesmarried Marital_Statuessingle ;
MPRINT(EM_DIAGRAM):   if missing( Marital_Statues ) then do;
MPRINT(EM_DIAGRAM):   Marital_Statuesdivorced = .;
MPRINT(EM_DIAGRAM):   Marital_Statuesmarried = .;
MPRINT(EM_DIAGRAM):   Marital_Statuessingle = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
MPRINT(EM_DIAGRAM):   _dm10 = put( Marital_Statues , $10. );
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm10 = 'MARRIED' then do;
MPRINT(EM_DIAGRAM):   Marital_Statuesdivorced = -0.19795427644524;
MPRINT(EM_DIAGRAM):   Marital_Statuesmarried = 0.52239464785688;
MPRINT(EM_DIAGRAM):   Marital_Statuessingle = -0.41896236257966;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'SINGLE' then do;
MPRINT(EM_DIAGRAM):   Marital_Statuesdivorced = -0.19795427644524;
MPRINT(EM_DIAGRAM):   Marital_Statuesmarried = -0.63793733470681;
MPRINT(EM_DIAGRAM):   Marital_Statuessingle = 0.7954295638085;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'DIVORCED' then do;
MPRINT(EM_DIAGRAM):   Marital_Statuesdivorced = 1.683495074233;
MPRINT(EM_DIAGRAM):   Marital_Statuesmarried = -0.63793733470681;
MPRINT(EM_DIAGRAM):   Marital_Statuessingle = -0.41896236257966;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Marital_Statuesdivorced = .;
MPRINT(EM_DIAGRAM):   Marital_Statuesmarried = .;
MPRINT(EM_DIAGRAM):   Marital_Statuessingle = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUS3vlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUS3vads [5] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 5;
MPRINT(EM_DIAGRAM):   CLUS3vads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_Age ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( T_Age - 2.91467918643109 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( T_Age - -0.71951099185845 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( T_Age - 0.1185225810584 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( T_Age - -0.12712684481703 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( T_Age - 1.64580247248182 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( Careeradministration ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Careeradministration - -0.19798053664464 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Careeradministration - 0.04619825287206 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Careeradministration - -0.19798053664464 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Careeradministration - 0.00826252180589 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Careeradministration - -0.10519037514869 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerblue_collar ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Careerblue_collar - -0.12150458809345 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Careerblue_collar - -0.03003913086628 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Careerblue_collar - -0.12150458809345 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Careerblue_collar - 0.03881785338087 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Careerblue_collar - -0.04406610042665 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerentrepreneur ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Careerentrepreneur - -0.05045179254789 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Careerentrepreneur - -0.02610117256991 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Careerentrepreneur - 0.56685778408699 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Careerentrepreneur - 0.02186771791303 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Careerentrepreneur - -0.01039735436929 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerhousemaid ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Careerhousemaid - -0.04627208046437 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Careerhousemaid - -0.02679343304793 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Careerhousemaid - -0.04627208046437 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Careerhousemaid - -0.01844544129803 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Careerhousemaid - 0.09696784582956 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careermanagement ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Careermanagement - -0.08359323130889 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Careermanagement - -0.0349764066531 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Careermanagement - -0.08359323130889 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Careermanagement - 0.02637339588872 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Careermanagement - -0.00315279814749 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerretired ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Careerretired - 0.94943138329441 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Careerretired - -0.09500530968777 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Careerretired - 0.25265805856714 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Careerretired - -0.09417868784924 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Careerretired - 0.41488390898074 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerself_employed ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Careerself_employed - -0.05680708819217 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Careerself_employed - -0.00062685169128 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Careerself_employed - 0.49544081482673 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Careerself_employed - 0.01116608425058 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Careerself_employed - -0.0294054746836 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerservices ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Careerservices - -0.08255216308554 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Careerservices - 0.00508606653418 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Careerservices - -0.08255216308554 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Careerservices - 0.01924391137262 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Careerservices - -0.05846003841777 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerstudent ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Careerstudent - -0.06832140830084 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Careerstudent - 0.12235524075214 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Careerstudent - -0.06832140830084 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Careerstudent - -0.06071646580779 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Careerstudent - -0.06832140830084 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careertechnician ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Careertechnician - -0.13177255984613 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Careertechnician - 0.01831545587299 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Careertechnician - -0.13177255984613 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Careertechnician - 0.02091438255211 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Careertechnician - -0.086830202799 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerunemployed ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Careerunemployed - -0.05517515846472 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Careerunemployed - -0.00215819786382 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Careerunemployed - -0.05517515846472 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Careerunemployed - 0.00457411459343 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Careerunemployed - -0.00752434767867 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Educationilliterate ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Educationilliterate - 14.5825253975574 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Educationilliterate - -0.01371182453931 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Educationilliterate - 14.5825253975574 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Educationilliterate - -0.01371182453931 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Educationilliterate - -0.01371182453931 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.2;
MPRINT(EM_DIAGRAM):   if not missing( Educationprimary_education ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Educationprimary_education - -0.17969194825559 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Educationprimary_education - -0.12602635050433 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Educationprimary_education - -0.17969194825559 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Educationprimary_education - -0.04680570620485 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Educationprimary_education - 0.35307224926741 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.2;
MPRINT(EM_DIAGRAM):   if not missing( Educationprofessional_educat ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Educationprofessional_educat - -0.17721643846104 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Educationprofessional_educat - -0.02724033572694 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Educationprofessional_educat - -0.17721643846104 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Educationprofessional_educat - 0.02283774332711 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Educationprofessional_educat - -0.00779847820798 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.2;
MPRINT(EM_DIAGRAM):   if not missing( Educationsecondary_education ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Educationsecondary_education - -0.32368407414863 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Educationsecondary_education - 0.04571952628247 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Educationsecondary_education - -0.32368407414863 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Educationsecondary_education - 0.01649485242624 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Educationsecondary_education - -0.12485886213726 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.2;
MPRINT(EM_DIAGRAM):   if not missing( Educationuniversity_educatio ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Educationuniversity_educatio - -0.3504161437781 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Educationuniversity_educatio - 0.06516372081033 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Educationuniversity_educatio - -0.3504161437781 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Educationuniversity_educatio - 0.00197081414416 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Educationuniversity_educatio - -0.12308761960492 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.19999999999999;
MPRINT(EM_DIAGRAM):   if not missing( Marital_Statuesdivorced ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Marital_Statuesdivorced - -0.19795427644524 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Marital_Statuesdivorced - -0.19795427644524 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Marital_Statuesdivorced - 0.42919550711417 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Marital_Statuesdivorced - 0.04199329274654 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Marital_Statuesdivorced - 0.25445530024456 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.33333333333333;
MPRINT(EM_DIAGRAM):   if not missing( Marital_Statuesmarried ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Marital_Statuesmarried - 0.52239464785688 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Marital_Statuesmarried - -0.63793733470683 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Marital_Statuesmarried - 0.13561732033565 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Marital_Statuesmarried - 0.37441360410928 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Marital_Statuesmarried - 0.20795353807817 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.33333333333333;
MPRINT(EM_DIAGRAM):   if not missing( Marital_Statuessingle ) then do;
MPRINT(EM_DIAGRAM):   CLUS3vads [1] + ( Marital_Statuessingle - -0.41896236257966 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [2] + ( Marital_Statuessingle - 0.79542956380851 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [3] + ( Marital_Statuessingle - -0.41896236257966 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [4] + ( Marital_Statuessingle - -0.41896236257968 )**2;
MPRINT(EM_DIAGRAM):   CLUS3vads [5] + ( Marital_Statuessingle - -0.38188169307163 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.33333333333333;
MPRINT(EM_DIAGRAM):   _vqnvar = 4 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 9.0949470177293E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUS3vads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 5;
MPRINT(EM_DIAGRAM):   if CLUS3vads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUS3vads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (4 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUS3vlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus3: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Prof;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
93078      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
93079      quit;
93080      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
93081      proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
MPRINT(EM_DIAGRAM):    proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
93082      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
93083      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 406 observations read from the data set WORK._TEMP.
NOTE: 368 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 38 observations and 1 variables.
NOTE: Compressing data set WORK._TEMP increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Determine output variables meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.FIMPORT_DATA noprint out=_originalvar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\DROPINPUT.sas";
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _drpfrf;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_DATA;
MPRINT(EM_DIAGRAM):   drop 'Age'n 'Career'n 'Contact_Type'n 'Cus_ID'n 'Education'n 'Marital_Statues'n 'Mortage'n 'Number_of_Contacts'n 'Personal_Loan'n 'Subscribed'n 'VAR1'n ;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf;
MPRINT(EM_DIAGRAM):   proc contents data =WORK.SCORE_OUTPUTMETA noprint out=WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   length role $32 name_prefix $8;
MPRINT(EM_DIAGRAM):   set WORK.SCORE_OUTPUTMETA(keep=name type length label format informat rename=(type=itype)) end=_eof;
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   else type = 'C';
MPRINT(EM_DIAGRAM):   drop name_prefix itype;
MPRINT(EM_DIAGRAM):   if name = '_WARN_' then do;
MPRINT(EM_DIAGRAM):   role = 'ASSESS';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   name_prefix = scan(NAME, 1, '_');
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then role = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   else if name_prefix ='P' then role = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix ='R' then role = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then role = 'DECISION';
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then role = 'ASSESS';
MPRINT(EM_DIAGRAM):   else role = 'TRANSFORM';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if _eof then call symput('NumOutputVars', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   run;
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _tempFmt;
MPRINT(EM_DIAGRAM):   length format $33;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_tempFmt;
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne '')) out=temp2(rename=(fmtname=format));
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data temp2;
MPRINT(EM_DIAGRAM):   merge temp2(in=_a) _tempFmt(in=_b);
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable format by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   proc sort data=temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   if first.libname and first.memname then do;
MPRINT(EM_DIAGRAM):   call execute("proc format lib="!!libname!!'.'!!memname!!"cntlout=work._fmtout;");
MPRINT(EM_DIAGRAM):   call execute("select");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call execute (format);
MPRINT(EM_DIAGRAM):   if last.libname and last.memname then do;
MPRINT(EM_DIAGRAM):   call execute(";");
MPRINT(EM_DIAGRAM):   call execute("proc append base=WORK._EMFORMAT data=work._fmtout force;");
MPRINT(EM_DIAGRAM):   call execute("run;");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK._EMFORMAT nodupkey;
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   where fmtname ne '_EMFMT';
MPRINT(EM_DIAGRAM):   run;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
MPRINT(EM_DIAGRAM):    options mprint;
MPRINT(EM_DIAGRAM):   filename _code "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2TKXDFYscore.sas";
MPRINT(EM_DIAGRAM):   filename _xml "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml";




MPRINT(SCOREXML):   PROC FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK._alldeps;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(SCOREXML):   * Project Name: 20161277_CAassignment2;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: All Tasks;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 28SEP2020:04:22:57;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Filtering;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Filter;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus3;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Age ;
MPRINT(SCOREXML):   drop T_Age ;
MPRINT(SCOREXML):   if missing( Age ) then T_Age = .;
MPRINT(SCOREXML):   else T_Age = (Age - 40.7367308595584) * 0.07423424616033;
MPRINT(SCOREXML):   *** Generate dummy variables for Career ;
MPRINT(SCOREXML):   drop Careeradministration Careerblue_collar Careerentrepreneur Careerhousemaid Careermanagement Careerretired Careerself_employed Careerservices Careerstudent Careertechnician Careerunemployed ;
MPRINT(SCOREXML):   if missing( Career ) then do;
MPRINT(SCOREXML):   Careeradministration = .;
MPRINT(SCOREXML):   Careerblue_collar = .;
MPRINT(SCOREXML):   Careerentrepreneur = .;
MPRINT(SCOREXML):   Careerhousemaid = .;
MPRINT(SCOREXML):   Careermanagement = .;
MPRINT(SCOREXML):   Careerretired = .;
MPRINT(SCOREXML):   Careerself_employed = .;
MPRINT(SCOREXML):   Careerservices = .;
MPRINT(SCOREXML):   Careerstudent = .;
MPRINT(SCOREXML):   Careertechnician = .;
MPRINT(SCOREXML):   Careerunemployed = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm16 $ 16;
MPRINT(SCOREXML):   drop _dm16 ;
MPRINT(SCOREXML):   _dm16 = put( Career , $16. );
MPRINT(DMNORMIP):   call dmnorm(_dm16,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   _dm_find = 0;
MPRINT(SCOREXML):   drop _dm_find;
MPRINT(SCOREXML):   if _dm16 <= 'RETIRED' then do;
MPRINT(SCOREXML):   if _dm16 <= 'ENTREPRENEUR' then do;
MPRINT(SCOREXML):   if _dm16 <= 'BLUE-COLLAR' then do;
MPRINT(SCOREXML):   if _dm16 = 'ADMINISTRATION' then do;
MPRINT(SCOREXML):   Careeradministration = 0.45907412043477;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'BLUE-COLLAR' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = 0.74801900199385;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'ENTREPRENEUR' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = 1.80147693735678;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 <= 'MANAGEMENT' then do;
MPRINT(SCOREXML):   if _dm16 = 'HOUSEMAID' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = 1.9642025993042;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'MANAGEMENT' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = 1.08726196248472;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'RETIRED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = 0.94943138329441;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 <= 'STUDENT' then do;
MPRINT(SCOREXML):   if _dm16 <= 'SERVICES' then do;
MPRINT(SCOREXML):   if _dm16 = 'SELF-EMPLOYED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = 1.59993662086455;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'SERVICES' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = 1.10097346121827;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'STUDENT' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = 1.33029665201171;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'TECHNICIAN' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = 0.68973192013168;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'UNEMPLOYED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = 1.64725835416415;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not _dm_find then do;
MPRINT(SCOREXML):   Careeradministration = .;
MPRINT(SCOREXML):   Careerblue_collar = .;
MPRINT(SCOREXML):   Careerentrepreneur = .;
MPRINT(SCOREXML):   Careerhousemaid = .;
MPRINT(SCOREXML):   Careermanagement = .;
MPRINT(SCOREXML):   Careerretired = .;
MPRINT(SCOREXML):   Careerself_employed = .;
MPRINT(SCOREXML):   Careerservices = .;
MPRINT(SCOREXML):   Careerstudent = .;
MPRINT(SCOREXML):   Careertechnician = .;
MPRINT(SCOREXML):   Careerunemployed = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Education ;
MPRINT(SCOREXML):   drop Educationilliterate Educationprimary_education Educationprofessional_educat Educationsecondary_education Educationuniversity_educatio ;
MPRINT(SCOREXML):   if missing( Education ) then do;
MPRINT(SCOREXML):   Educationilliterate = .;
MPRINT(SCOREXML):   Educationprimary_education = .;
MPRINT(SCOREXML):   Educationprofessional_educat = .;
MPRINT(SCOREXML):   Educationsecondary_education = .;
MPRINT(SCOREXML):   Educationuniversity_educatio = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm24 $ 24;
MPRINT(SCOREXML):   drop _dm24 ;
MPRINT(SCOREXML):   _dm24 = put( Education , $24. );
MPRINT(DMNORMIP):   call dmnorm(_dm24,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   _dm_find = 0;
MPRINT(SCOREXML):   drop _dm_find;
MPRINT(SCOREXML):   if _dm24 <= 'PROFESSIONAL EDUCATION' then do;
MPRINT(SCOREXML):   if _dm24 <= 'PRIMARY EDUCATION' then do;
MPRINT(SCOREXML):   if _dm24 = 'ILLITERATE' then do;
MPRINT(SCOREXML):   Educationilliterate = 14.5825253975574;
MPRINT(SCOREXML):   Educationprimary_education = -0.17969194825559;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17721643846104;
MPRINT(SCOREXML):   Educationsecondary_education = -0.32368407414863;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.3504161437781;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'PRIMARY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.01371182453931;
MPRINT(SCOREXML):   Educationprimary_education = 1.11275453092059;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17721643846104;
MPRINT(SCOREXML):   Educationsecondary_education = -0.32368407414863;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.3504161437781;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'PROFESSIONAL EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.01371182453931;
MPRINT(SCOREXML):   Educationprimary_education = -0.17969194825559;
MPRINT(SCOREXML):   Educationprofessional_educat = 1.12829843172428;
MPRINT(SCOREXML):   Educationsecondary_education = -0.32368407414863;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.3504161437781;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'SECONDARY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.01371182453931;
MPRINT(SCOREXML):   Educationprimary_education = -0.17969194825559;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17721643846104;
MPRINT(SCOREXML):   Educationsecondary_education = 0.61774132730279;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.3504161437781;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'UNIVERSITY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.01371182453931;
MPRINT(SCOREXML):   Educationprimary_education = -0.17969194825559;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17721643846104;
MPRINT(SCOREXML):   Educationsecondary_education = -0.32368407414863;
MPRINT(SCOREXML):   Educationuniversity_educatio = 0.57061591807817;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not _dm_find then do;
MPRINT(SCOREXML):   Educationilliterate = .;
MPRINT(SCOREXML):   Educationprimary_education = .;
MPRINT(SCOREXML):   Educationprofessional_educat = .;
MPRINT(SCOREXML):   Educationsecondary_education = .;
MPRINT(SCOREXML):   Educationuniversity_educatio = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Marital_Statues ;
MPRINT(SCOREXML):   drop Marital_Statuesdivorced Marital_Statuesmarried Marital_Statuessingle ;
MPRINT(SCOREXML):   if missing( Marital_Statues ) then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = .;
MPRINT(SCOREXML):   Marital_Statuesmarried = .;
MPRINT(SCOREXML):   Marital_Statuessingle = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm10 $ 10;
MPRINT(SCOREXML):   drop _dm10 ;
MPRINT(SCOREXML):   _dm10 = put( Marital_Statues , $10. );
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm10 = 'MARRIED' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = -0.19795427644524;
MPRINT(SCOREXML):   Marital_Statuesmarried = 0.52239464785688;
MPRINT(SCOREXML):   Marital_Statuessingle = -0.41896236257966;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm10 = 'SINGLE' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = -0.19795427644524;
MPRINT(SCOREXML):   Marital_Statuesmarried = -0.63793733470681;
MPRINT(SCOREXML):   Marital_Statuessingle = 0.7954295638085;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm10 = 'DIVORCED' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = 1.683495074233;
MPRINT(SCOREXML):   Marital_Statuesmarried = -0.63793733470681;
MPRINT(SCOREXML):   Marital_Statuessingle = -0.41896236257966;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = .;
MPRINT(SCOREXML):   Marital_Statuesmarried = .;
MPRINT(SCOREXML):   Marital_Statuessingle = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUS3vlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUS3vads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUS3vads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Age ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( T_Age - 2.91467918643109 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( T_Age - -0.71951099185845 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( T_Age - 0.1185225810584 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( T_Age - -0.12712684481703 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( T_Age - 1.64580247248182 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( Careeradministration ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careeradministration - -0.19798053664464 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careeradministration - 0.04619825287206 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careeradministration - -0.19798053664464 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careeradministration - 0.00826252180589 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careeradministration - -0.10519037514869 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerblue_collar ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careerblue_collar - -0.12150458809345 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careerblue_collar - -0.03003913086628 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careerblue_collar - -0.12150458809345 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careerblue_collar - 0.03881785338087 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careerblue_collar - -0.04406610042665 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerentrepreneur ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careerentrepreneur - -0.05045179254789 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careerentrepreneur - -0.02610117256991 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careerentrepreneur - 0.56685778408699 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careerentrepreneur - 0.02186771791303 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careerentrepreneur - -0.01039735436929 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerhousemaid ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careerhousemaid - -0.04627208046437 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careerhousemaid - -0.02679343304793 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careerhousemaid - -0.04627208046437 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careerhousemaid - -0.01844544129803 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careerhousemaid - 0.09696784582956 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careermanagement ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careermanagement - -0.08359323130889 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careermanagement - -0.0349764066531 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careermanagement - -0.08359323130889 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careermanagement - 0.02637339588872 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careermanagement - -0.00315279814749 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerretired ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careerretired - 0.94943138329441 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careerretired - -0.09500530968777 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careerretired - 0.25265805856714 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careerretired - -0.09417868784924 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careerretired - 0.41488390898074 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerself_employed ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careerself_employed - -0.05680708819217 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careerself_employed - -0.00062685169128 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careerself_employed - 0.49544081482673 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careerself_employed - 0.01116608425058 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careerself_employed - -0.0294054746836 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerservices ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careerservices - -0.08255216308554 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careerservices - 0.00508606653418 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careerservices - -0.08255216308554 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careerservices - 0.01924391137262 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careerservices - -0.05846003841777 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerstudent ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careerstudent - -0.06832140830084 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careerstudent - 0.12235524075214 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careerstudent - -0.06832140830084 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careerstudent - -0.06071646580779 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careerstudent - -0.06832140830084 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careertechnician ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careertechnician - -0.13177255984613 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careertechnician - 0.01831545587299 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careertechnician - -0.13177255984613 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careertechnician - 0.02091438255211 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careertechnician - -0.086830202799 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerunemployed ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careerunemployed - -0.05517515846472 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careerunemployed - -0.00215819786382 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careerunemployed - -0.05517515846472 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careerunemployed - 0.00457411459343 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careerunemployed - -0.00752434767867 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Educationilliterate ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Educationilliterate - 14.5825253975574 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Educationilliterate - -0.01371182453931 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Educationilliterate - 14.5825253975574 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Educationilliterate - -0.01371182453931 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Educationilliterate - -0.01371182453931 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationprimary_education ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Educationprimary_education - -0.17969194825559 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Educationprimary_education - -0.12602635050433 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Educationprimary_education - -0.17969194825559 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Educationprimary_education - -0.04680570620485 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Educationprimary_education - 0.35307224926741 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationprofessional_educat ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Educationprofessional_educat - -0.17721643846104 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Educationprofessional_educat - -0.02724033572694 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Educationprofessional_educat - -0.17721643846104 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Educationprofessional_educat - 0.02283774332711 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Educationprofessional_educat - -0.00779847820798 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationsecondary_education ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Educationsecondary_education - -0.32368407414863 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Educationsecondary_education - 0.04571952628247 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Educationsecondary_education - -0.32368407414863 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Educationsecondary_education - 0.01649485242624 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Educationsecondary_education - -0.12485886213726 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationuniversity_educatio ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Educationuniversity_educatio - -0.3504161437781 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Educationuniversity_educatio - 0.06516372081033 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Educationuniversity_educatio - -0.3504161437781 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Educationuniversity_educatio - 0.00197081414416 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Educationuniversity_educatio - -0.12308761960492 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Marital_Statuesdivorced ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Marital_Statuesdivorced - -0.19795427644524 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Marital_Statuesdivorced - -0.19795427644524 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Marital_Statuesdivorced - 0.42919550711417 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Marital_Statuesdivorced - 0.04199329274654 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Marital_Statuesdivorced - 0.25445530024456 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Marital_Statuesmarried ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Marital_Statuesmarried - 0.52239464785688 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Marital_Statuesmarried - -0.63793733470683 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Marital_Statuesmarried - 0.13561732033565 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Marital_Statuesmarried - 0.37441360410928 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Marital_Statuesmarried - 0.20795353807817 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Marital_Statuessingle ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Marital_Statuessingle - -0.41896236257966 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Marital_Statuessingle - 0.79542956380851 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Marital_Statuessingle - -0.41896236257966 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Marital_Statuessingle - -0.41896236257968 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Marital_Statuessingle - -0.38188169307163 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   _vqnvar = 4 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 9.0949470177293E-12 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUS3vads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUS3vads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUS3vads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (4 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUS3vlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus3: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   QUIT;
MPRINT(SCOREXML):   Data _NULL_;
MPRINT(SCOREXML):   numobs=0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._alldeps","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numobs= attrn(dsid,"nlobs");
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open dependency data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if numobs <= 0 then do;
MPRINT(SCOREXML):   put "WARNING: ScoreXML: No variable dependencies found in code.";
MPRINT(SCOREXML):   call symput('SYSCC','4');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Rhs (keep=rhs RHS_NLiteral UNAME);
MPRINT(SCOREXML):   Set WORK._alldeps;
MPRINT(SCOREXML):   Length UNAME $32;
MPRINT(SCOREXML):   LABEL rhs = ;
MPRINT(SCOREXML):   LABEL RHS_NLiteral = ;
MPRINT(SCOREXML):   if RHS_Dropped = 0 AND (1 NE index(rhs, '_OLD_')) then do;
MPRINT(SCOREXML):   UNAME = UPCASE(rhs);
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Proc Sort Data=WORK._Rhs NODUP out=WORK._Rhs (rename=(rhs=NAME RHS_NLiteral=NLITERAL));
MPRINT(SCOREXML):   By UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Indatavmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("EMWS1.FIMPORT_DATA","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   NAME = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open input data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Indatavmeta NODUP Out=Work._Indatavmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   dsid = open("EMWS1.FIMPORT_DATA");
MPRINT(SCOREXML):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   call symput('_engineTable', upcase(attrc(dsid, 'ENGINE')));
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Progout;
MPRINT(SCOREXML):   Set EMWS1.FIMPORT_DATA;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(SCOREXML):   * Project Name: 20161277_CAassignment2;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: All Tasks;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 28SEP2020:04:22:57;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Filtering;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Filter;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus3;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Age ;
MPRINT(SCOREXML):   drop T_Age ;
MPRINT(SCOREXML):   if missing( Age ) then T_Age = .;
MPRINT(SCOREXML):   else T_Age = (Age - 40.7367308595584) * 0.07423424616033;
MPRINT(SCOREXML):   *** Generate dummy variables for Career ;
MPRINT(SCOREXML):   drop Careeradministration Careerblue_collar Careerentrepreneur Careerhousemaid Careermanagement Careerretired Careerself_employed Careerservices Careerstudent Careertechnician Careerunemployed ;
MPRINT(SCOREXML):   if missing( Career ) then do;
MPRINT(SCOREXML):   Careeradministration = .;
MPRINT(SCOREXML):   Careerblue_collar = .;
MPRINT(SCOREXML):   Careerentrepreneur = .;
MPRINT(SCOREXML):   Careerhousemaid = .;
MPRINT(SCOREXML):   Careermanagement = .;
MPRINT(SCOREXML):   Careerretired = .;
MPRINT(SCOREXML):   Careerself_employed = .;
MPRINT(SCOREXML):   Careerservices = .;
MPRINT(SCOREXML):   Careerstudent = .;
MPRINT(SCOREXML):   Careertechnician = .;
MPRINT(SCOREXML):   Careerunemployed = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm16 $ 16;
MPRINT(SCOREXML):   drop _dm16 ;
MPRINT(SCOREXML):   _dm16 = put( Career , $16. );
MPRINT(DMNORMIP):   call dmnorm(_dm16,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   _dm_find = 0;
MPRINT(SCOREXML):   drop _dm_find;
MPRINT(SCOREXML):   if _dm16 <= 'RETIRED' then do;
MPRINT(SCOREXML):   if _dm16 <= 'ENTREPRENEUR' then do;
MPRINT(SCOREXML):   if _dm16 <= 'BLUE-COLLAR' then do;
MPRINT(SCOREXML):   if _dm16 = 'ADMINISTRATION' then do;
MPRINT(SCOREXML):   Careeradministration = 0.45907412043477;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'BLUE-COLLAR' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = 0.74801900199385;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'ENTREPRENEUR' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = 1.80147693735678;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 <= 'MANAGEMENT' then do;
MPRINT(SCOREXML):   if _dm16 = 'HOUSEMAID' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = 1.9642025993042;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'MANAGEMENT' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = 1.08726196248472;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'RETIRED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = 0.94943138329441;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 <= 'STUDENT' then do;
MPRINT(SCOREXML):   if _dm16 <= 'SERVICES' then do;
MPRINT(SCOREXML):   if _dm16 = 'SELF-EMPLOYED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = 1.59993662086455;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'SERVICES' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = 1.10097346121827;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'STUDENT' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = 1.33029665201171;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'TECHNICIAN' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = 0.68973192013168;
MPRINT(SCOREXML):   Careerunemployed = -0.05517515846472;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'UNEMPLOYED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.19798053664464;
MPRINT(SCOREXML):   Careerblue_collar = -0.12150458809345;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05045179254789;
MPRINT(SCOREXML):   Careerhousemaid = -0.04627208046437;
MPRINT(SCOREXML):   Careermanagement = -0.08359323130889;
MPRINT(SCOREXML):   Careerretired = -0.09572860379648;
MPRINT(SCOREXML):   Careerself_employed = -0.05680708819217;
MPRINT(SCOREXML):   Careerservices = -0.08255216308554;
MPRINT(SCOREXML):   Careerstudent = -0.06832140830084;
MPRINT(SCOREXML):   Careertechnician = -0.13177255984613;
MPRINT(SCOREXML):   Careerunemployed = 1.64725835416415;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not _dm_find then do;
MPRINT(SCOREXML):   Careeradministration = .;
MPRINT(SCOREXML):   Careerblue_collar = .;
MPRINT(SCOREXML):   Careerentrepreneur = .;
MPRINT(SCOREXML):   Careerhousemaid = .;
MPRINT(SCOREXML):   Careermanagement = .;
MPRINT(SCOREXML):   Careerretired = .;
MPRINT(SCOREXML):   Careerself_employed = .;
MPRINT(SCOREXML):   Careerservices = .;
MPRINT(SCOREXML):   Careerstudent = .;
MPRINT(SCOREXML):   Careertechnician = .;
MPRINT(SCOREXML):   Careerunemployed = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Education ;
MPRINT(SCOREXML):   drop Educationilliterate Educationprimary_education Educationprofessional_educat Educationsecondary_education Educationuniversity_educatio ;
MPRINT(SCOREXML):   if missing( Education ) then do;
MPRINT(SCOREXML):   Educationilliterate = .;
MPRINT(SCOREXML):   Educationprimary_education = .;
MPRINT(SCOREXML):   Educationprofessional_educat = .;
MPRINT(SCOREXML):   Educationsecondary_education = .;
MPRINT(SCOREXML):   Educationuniversity_educatio = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm24 $ 24;
MPRINT(SCOREXML):   drop _dm24 ;
MPRINT(SCOREXML):   _dm24 = put( Education , $24. );
MPRINT(DMNORMIP):   call dmnorm(_dm24,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   _dm_find = 0;
MPRINT(SCOREXML):   drop _dm_find;
MPRINT(SCOREXML):   if _dm24 <= 'PROFESSIONAL EDUCATION' then do;
MPRINT(SCOREXML):   if _dm24 <= 'PRIMARY EDUCATION' then do;
MPRINT(SCOREXML):   if _dm24 = 'ILLITERATE' then do;
MPRINT(SCOREXML):   Educationilliterate = 14.5825253975574;
MPRINT(SCOREXML):   Educationprimary_education = -0.17969194825559;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17721643846104;
MPRINT(SCOREXML):   Educationsecondary_education = -0.32368407414863;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.3504161437781;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'PRIMARY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.01371182453931;
MPRINT(SCOREXML):   Educationprimary_education = 1.11275453092059;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17721643846104;
MPRINT(SCOREXML):   Educationsecondary_education = -0.32368407414863;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.3504161437781;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'PROFESSIONAL EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.01371182453931;
MPRINT(SCOREXML):   Educationprimary_education = -0.17969194825559;
MPRINT(SCOREXML):   Educationprofessional_educat = 1.12829843172428;
MPRINT(SCOREXML):   Educationsecondary_education = -0.32368407414863;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.3504161437781;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'SECONDARY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.01371182453931;
MPRINT(SCOREXML):   Educationprimary_education = -0.17969194825559;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17721643846104;
MPRINT(SCOREXML):   Educationsecondary_education = 0.61774132730279;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.3504161437781;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'UNIVERSITY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.01371182453931;
MPRINT(SCOREXML):   Educationprimary_education = -0.17969194825559;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17721643846104;
MPRINT(SCOREXML):   Educationsecondary_education = -0.32368407414863;
MPRINT(SCOREXML):   Educationuniversity_educatio = 0.57061591807817;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not _dm_find then do;
MPRINT(SCOREXML):   Educationilliterate = .;
MPRINT(SCOREXML):   Educationprimary_education = .;
MPRINT(SCOREXML):   Educationprofessional_educat = .;
MPRINT(SCOREXML):   Educationsecondary_education = .;
MPRINT(SCOREXML):   Educationuniversity_educatio = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Marital_Statues ;
MPRINT(SCOREXML):   drop Marital_Statuesdivorced Marital_Statuesmarried Marital_Statuessingle ;
MPRINT(SCOREXML):   if missing( Marital_Statues ) then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = .;
MPRINT(SCOREXML):   Marital_Statuesmarried = .;
MPRINT(SCOREXML):   Marital_Statuessingle = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm10 $ 10;
MPRINT(SCOREXML):   drop _dm10 ;
MPRINT(SCOREXML):   _dm10 = put( Marital_Statues , $10. );
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm10 = 'MARRIED' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = -0.19795427644524;
MPRINT(SCOREXML):   Marital_Statuesmarried = 0.52239464785688;
MPRINT(SCOREXML):   Marital_Statuessingle = -0.41896236257966;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm10 = 'SINGLE' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = -0.19795427644524;
MPRINT(SCOREXML):   Marital_Statuesmarried = -0.63793733470681;
MPRINT(SCOREXML):   Marital_Statuessingle = 0.7954295638085;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm10 = 'DIVORCED' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = 1.683495074233;
MPRINT(SCOREXML):   Marital_Statuesmarried = -0.63793733470681;
MPRINT(SCOREXML):   Marital_Statuessingle = -0.41896236257966;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = .;
MPRINT(SCOREXML):   Marital_Statuesmarried = .;
MPRINT(SCOREXML):   Marital_Statuessingle = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUS3vlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUS3vads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUS3vads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Age ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( T_Age - 2.91467918643109 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( T_Age - -0.71951099185845 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( T_Age - 0.1185225810584 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( T_Age - -0.12712684481703 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( T_Age - 1.64580247248182 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( Careeradministration ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careeradministration - -0.19798053664464 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careeradministration - 0.04619825287206 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careeradministration - -0.19798053664464 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careeradministration - 0.00826252180589 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careeradministration - -0.10519037514869 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerblue_collar ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careerblue_collar - -0.12150458809345 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careerblue_collar - -0.03003913086628 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careerblue_collar - -0.12150458809345 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careerblue_collar - 0.03881785338087 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careerblue_collar - -0.04406610042665 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerentrepreneur ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careerentrepreneur - -0.05045179254789 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careerentrepreneur - -0.02610117256991 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careerentrepreneur - 0.56685778408699 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careerentrepreneur - 0.02186771791303 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careerentrepreneur - -0.01039735436929 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerhousemaid ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careerhousemaid - -0.04627208046437 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careerhousemaid - -0.02679343304793 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careerhousemaid - -0.04627208046437 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careerhousemaid - -0.01844544129803 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careerhousemaid - 0.09696784582956 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careermanagement ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careermanagement - -0.08359323130889 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careermanagement - -0.0349764066531 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careermanagement - -0.08359323130889 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careermanagement - 0.02637339588872 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careermanagement - -0.00315279814749 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerretired ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careerretired - 0.94943138329441 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careerretired - -0.09500530968777 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careerretired - 0.25265805856714 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careerretired - -0.09417868784924 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careerretired - 0.41488390898074 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerself_employed ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careerself_employed - -0.05680708819217 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careerself_employed - -0.00062685169128 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careerself_employed - 0.49544081482673 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careerself_employed - 0.01116608425058 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careerself_employed - -0.0294054746836 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerservices ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careerservices - -0.08255216308554 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careerservices - 0.00508606653418 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careerservices - -0.08255216308554 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careerservices - 0.01924391137262 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careerservices - -0.05846003841777 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerstudent ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careerstudent - -0.06832140830084 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careerstudent - 0.12235524075214 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careerstudent - -0.06832140830084 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careerstudent - -0.06071646580779 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careerstudent - -0.06832140830084 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careertechnician ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careertechnician - -0.13177255984613 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careertechnician - 0.01831545587299 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careertechnician - -0.13177255984613 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careertechnician - 0.02091438255211 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careertechnician - -0.086830202799 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerunemployed ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Careerunemployed - -0.05517515846472 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Careerunemployed - -0.00215819786382 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Careerunemployed - -0.05517515846472 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Careerunemployed - 0.00457411459343 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Careerunemployed - -0.00752434767867 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Educationilliterate ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Educationilliterate - 14.5825253975574 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Educationilliterate - -0.01371182453931 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Educationilliterate - 14.5825253975574 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Educationilliterate - -0.01371182453931 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Educationilliterate - -0.01371182453931 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationprimary_education ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Educationprimary_education - -0.17969194825559 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Educationprimary_education - -0.12602635050433 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Educationprimary_education - -0.17969194825559 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Educationprimary_education - -0.04680570620485 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Educationprimary_education - 0.35307224926741 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationprofessional_educat ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Educationprofessional_educat - -0.17721643846104 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Educationprofessional_educat - -0.02724033572694 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Educationprofessional_educat - -0.17721643846104 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Educationprofessional_educat - 0.02283774332711 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Educationprofessional_educat - -0.00779847820798 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationsecondary_education ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Educationsecondary_education - -0.32368407414863 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Educationsecondary_education - 0.04571952628247 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Educationsecondary_education - -0.32368407414863 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Educationsecondary_education - 0.01649485242624 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Educationsecondary_education - -0.12485886213726 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationuniversity_educatio ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Educationuniversity_educatio - -0.3504161437781 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Educationuniversity_educatio - 0.06516372081033 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Educationuniversity_educatio - -0.3504161437781 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Educationuniversity_educatio - 0.00197081414416 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Educationuniversity_educatio - -0.12308761960492 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Marital_Statuesdivorced ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Marital_Statuesdivorced - -0.19795427644524 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Marital_Statuesdivorced - -0.19795427644524 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Marital_Statuesdivorced - 0.42919550711417 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Marital_Statuesdivorced - 0.04199329274654 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Marital_Statuesdivorced - 0.25445530024456 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Marital_Statuesmarried ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Marital_Statuesmarried - 0.52239464785688 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Marital_Statuesmarried - -0.63793733470683 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Marital_Statuesmarried - 0.13561732033565 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Marital_Statuesmarried - 0.37441360410928 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Marital_Statuesmarried - 0.20795353807817 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Marital_Statuessingle ) then do;
MPRINT(SCOREXML):   CLUS3vads [1] + ( Marital_Statuessingle - -0.41896236257966 )**2;
MPRINT(SCOREXML):   CLUS3vads [2] + ( Marital_Statuessingle - 0.79542956380851 )**2;
MPRINT(SCOREXML):   CLUS3vads [3] + ( Marital_Statuessingle - -0.41896236257966 )**2;
MPRINT(SCOREXML):   CLUS3vads [4] + ( Marital_Statuessingle - -0.41896236257968 )**2;
MPRINT(SCOREXML):   CLUS3vads [5] + ( Marital_Statuessingle - -0.38188169307163 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   _vqnvar = 4 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 9.0949470177293E-12 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUS3vads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUS3vads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUS3vads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (4 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUS3vlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus3: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if _N_=1 then do;
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   stop;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Varsmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._Progout","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   Name = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open program output.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Varsmeta NODUP Out=Work._Varsmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Invarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Rhs (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   if (a and b) then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Outvarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Varsmeta (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   If a and not b then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   LENGTH strbuf $ 80;
MPRINT(SCOREXML):   strbuf = ' ';
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '<?xml version="1.0" encoding="utf-8"?>';
MPRINT(SCOREXML):   put '<Score>';
MPRINT(SCOREXML):   put @3 '<Producer>';
MPRINT(SCOREXML):   put @6 "<Name> SAS Enterprise Miner </Name>";
MPRINT(SCOREXML):   strbuf = '<Version> ' || "6.2" || ' </Version>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   syslocale = getpxlocale();
MPRINT(SCOREXML):   strbuf = '<Locale> '|| strip(syslocale) ||' </Locale>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   sysencode = getpxencoding('sas12');
MPRINT(SCOREXML):   strbuf = '<Encoding> '|| strip(sysencode) ||' </Encoding>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   put @3 '</Producer>';
MPRINT(SCOREXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(SCOREXML):   put @3 '<CFunction>';
MPRINT(SCOREXML):   put @6 '<Name> score </Name>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="input">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "4" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="output">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "3" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @3 '</CFunction>';
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Invarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = ' <Input count="' || "4" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "4" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Outvarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = ' <Input count="' || "3" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "3" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '</Score>';
MPRINT(SCOREXML):   Run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _code;
MPRINT(EM_DIAGRAM):   filename _xml;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Input table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc sort data=work._invarsmeta out=_inpckgtemp(keep=NAME);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.FIMPORT_EMCMETADEFAULT out=_inpckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\input.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.input;
MPRINT(EM_DIAGRAM):   merge _inpckgtemp(in=_a) _inpckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=work._progout out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('work._progout');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set work._progout;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=work._progout out=WORK.M36FDU85 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M36FDU85;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M36FDU85(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M36FDU85;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M36FDU85;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0MYM9Q3 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0MYM9Q3;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0MYM9Q3;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2L1NH8V(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0MYM9Q3;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0MYM9Q3;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0MYM9Q3;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0MYM9Q3;
MPRINT(EMADVISECOLUMNS):   set WORK.M0MYM9Q3;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=work._empckgtemp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_outvarsmeta(keep=NAME LABEL) out=work._empckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\output.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.output;
MPRINT(EM_DIAGRAM):   merge work._empckgtemp(in=_a) work._empckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    proc datasets library=WORK NOLIST NOWARN NODETAILS;
MPRINT(EM_DIAGRAM):   delete _alldeps _Indatavmeta _Keepvars _Keepnames _Invarsmeta _Progout _Outvarsmeta _Rhs _Varsmeta;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof_3P4MR\miningResult.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* FIMPORT : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:01 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   proc compare base=EMWS1.FIMPORT_emtrainvariable compare=EMWS1.FIMPORT_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   set diffDs end=eof;
MPRINT(EM_GETACTIONSTATUS):   if eof and _N_>0 then call symput('diffVar', 'Y');
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):    data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN17623";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.FIMPORT_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.FIMPORT_EMTRAINVARIABLE / view=WORK.FIMPORT_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "DROP"n = "Drop (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:01 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base06IVOST as select * from WORK.M1EZFHPV order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp06IVOST as select * from WORK.M2ZIPOGC order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base06IVOST compare=work._comp06IVOST out=WORK._DIFF1M_UTAA noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP10QDV3JF as select * from WORK._DIFF1M_UTAA where NAME in (select NAME from WORK._DIFF1M_UTAA where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM2MWU58T as select * from WORK._DIFF1M_UTAA where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF1M_UTAA where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM2MWU58T as select * from WORK._DIFF1M_UTAA where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF1M_UTAA where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM2MWU58T;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM2MWU58T;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM2MWU58T;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM2MWU58T;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\VARIABLESETDELTA.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\DELTACODE.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "CLUS3" 
Traverser: WaitingNode "PROF" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Filter : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:02 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Filter_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter_EMTRAINVARIABLE / view=WORK.Filter_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Limit Method (C)";
MPRINT(EM_DIAGRAM):   label "KEEPMISSING"n = "Keep Missing Values (C)";
MPRINT(EM_DIAGRAM):   label "MINFREQ"n = "Minimum Frequency Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "MAXVALUES"n = "Number of Levels Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMIN"n = "Lower Limit (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMAX"n = "Upper Limit (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter_CLASS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter_CLASS / view=WORK.Filter_CLASS;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Train Count (N)(10.0)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Train Percent (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Filter Method (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter_CLASS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter_INTERVAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter_INTERVAL / view=WORK.Filter_INTERVAL;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "INTERVALMIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Filter Method (C)";
MPRINT(EM_DIAGRAM):   label "KEEPMISSING"n = "Keep Missing Values (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter_INTERVAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:02 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Filter_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length CALCMETHOD $10;
MPRINT(EM_DIAGRAM):   length KEEPMISSING $1;
MPRINT(EM_DIAGRAM):   length MINFREQ 8;
MPRINT(EM_DIAGRAM):   length MAXVALUES 8;
MPRINT(EM_DIAGRAM):   length INTERVALMIN 8;
MPRINT(EM_DIAGRAM):   length INTERVALMAX 8;
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where(ROLE ^in("ID", "TEXT"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base187DNOG as select * from WORK.M1S85AEU order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp187DNOG as select * from WORK.M1C_IE7P order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base187DNOG compare=work._comp187DNOG out=WORK._DIFF129DB1T noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP11LD29DI as select * from WORK._DIFF129DB1T where NAME in (select NAME from WORK._DIFF129DB1T where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM1KAGMMW as select * from WORK._DIFF129DB1T where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF129DB1T where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM1KAGMMW as select * from WORK._DIFF129DB1T where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF129DB1T where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM1KAGMMW;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM1KAGMMW;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM1KAGMMW;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM1KAGMMW;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "PROF" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Clus3 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:03 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus3_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus3_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_EMTRAINVARIABLE / view=WORK.Clus3_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus3_OUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_OUTMEAN / view=WORK.Clus3_OUTMEAN;
MPRINT(EM_DIAGRAM):   label "_CRIT_"n = "Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_XCONV_"n = "Maximum Relative Change in Cluster Seeds (N)";
MPRINT(EM_DIAGRAM):   label "_FCONV_"n = "Improvement in Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "_FREQ_"n = "Frequency of Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_RMSSTD_"n = "Root-Mean-Square Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "_RADIUS_"n = "Maximum Distance from Cluster Seed (N)";
MPRINT(EM_DIAGRAM):   label "_NEAR_"n = "Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_GAP_"n = "Distance to Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "Age"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Careeradministration"n = "Career=administration (N)";
MPRINT(EM_DIAGRAM):   label "Careerblue_collar"n = "Career=blue-collar (N)";
MPRINT(EM_DIAGRAM):   label "Careerentrepreneur"n = "Career=entrepreneur (N)";
MPRINT(EM_DIAGRAM):   label "Careerhousemaid"n = "Career=housemaid (N)";
MPRINT(EM_DIAGRAM):   label "Careermanagement"n = "Career=management (N)";
MPRINT(EM_DIAGRAM):   label "Careerretired"n = "Career=retired (N)";
MPRINT(EM_DIAGRAM):   label "Careerself_employed"n = "Career=self-employed (N)";
MPRINT(EM_DIAGRAM):   label "Careerservices"n = "Career=services (N)";
MPRINT(EM_DIAGRAM):   label "Careerstudent"n = "Career=student (N)";
MPRINT(EM_DIAGRAM):   label "Careertechnician"n = "Career=technician (N)";
MPRINT(EM_DIAGRAM):   label "Careerunemployed"n = "Career=unemployed (N)";
MPRINT(EM_DIAGRAM):   label "Educationilliterate"n = "Education=illiterate (N)";
MPRINT(EM_DIAGRAM):   label "Educationprimary_education"n = "Education=primary education (N)";
MPRINT(EM_DIAGRAM):   label "Educationprofessional_educat"n = "Education=professional education (N)";
MPRINT(EM_DIAGRAM):   label "Educationsecondary_education"n = "Education=secondary education (N)";
MPRINT(EM_DIAGRAM):   label "Educationuniversity_educatio"n = "Education=university education (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuesdivorced"n = "Marital_Statues=divorced (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuesmarried"n = "Marital_Statues=married (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuessingle"n = "Marital_Statues=single (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_OUTMEAN(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus3_OUTSTAT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_OUTSTAT / view=WORK.Clus3_OUTSTAT;
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Type of Observation (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "Over_All"n = "Statistic Applying Over All Variables (N)";
MPRINT(EM_DIAGRAM):   label "Age"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Careeradministration"n = "Career=administration (N)";
MPRINT(EM_DIAGRAM):   label "Careerblue_collar"n = "Career=blue-collar (N)";
MPRINT(EM_DIAGRAM):   label "Careerentrepreneur"n = "Career=entrepreneur (N)";
MPRINT(EM_DIAGRAM):   label "Careerhousemaid"n = "Career=housemaid (N)";
MPRINT(EM_DIAGRAM):   label "Careermanagement"n = "Career=management (N)";
MPRINT(EM_DIAGRAM):   label "Careerretired"n = "Career=retired (N)";
MPRINT(EM_DIAGRAM):   label "Careerself_employed"n = "Career=self-employed (N)";
MPRINT(EM_DIAGRAM):   label "Careerservices"n = "Career=services (N)";
MPRINT(EM_DIAGRAM):   label "Careerstudent"n = "Career=student (N)";
MPRINT(EM_DIAGRAM):   label "Careertechnician"n = "Career=technician (N)";
MPRINT(EM_DIAGRAM):   label "Careerunemployed"n = "Career=unemployed (N)";
MPRINT(EM_DIAGRAM):   label "Educationilliterate"n = "Education=illiterate (N)";
MPRINT(EM_DIAGRAM):   label "Educationprimary_education"n = "Education=primary education (N)";
MPRINT(EM_DIAGRAM):   label "Educationprofessional_educat"n = "Education=professional education (N)";
MPRINT(EM_DIAGRAM):   label "Educationsecondary_education"n = "Education=secondary education (N)";
MPRINT(EM_DIAGRAM):   label "Educationuniversity_educatio"n = "Education=university education (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuesdivorced"n = "Marital_Statues=divorced (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuesmarried"n = "Marital_Statues=married (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuessingle"n = "Marital_Statues=single (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_OUTSTAT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus3_INPUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_INPUTMEAN / view=WORK.Clus3_INPUTMEAN;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_CHAR_"n = "Segment Id (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Name (N)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "INPUT"n = "Input (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CV"n = "Coefficient of Variation (N)";
MPRINT(EM_DIAGRAM):   label "STDMEAN"n = "Normalized Mean (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_INPUTMEAN(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus3_TREE_PLOT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_TREE_PLOT / view=WORK.Clus3_TREE_PLOT;
MPRINT(EM_DIAGRAM):   label "NODETEXT"n = "Node Text (C)";
MPRINT(EM_DIAGRAM):   label "TEXTALL"n = "All Text (C)";
MPRINT(EM_DIAGRAM):   label "N"n = "Train: Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "NODECOLOR"n = "Node Color (N)";
MPRINT(EM_DIAGRAM):   label "parent"n = "Parent Id (N)";
MPRINT(EM_DIAGRAM):   label "abovetext"n = "Above Text (C)";
MPRINT(EM_DIAGRAM):   label "NODE"n = "Node (N)";
MPRINT(EM_DIAGRAM):   label "DEPTH"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   label "LINKWIDTH"n = "Link Width (N)";
MPRINT(EM_DIAGRAM):   label "belowtext"n = "Below Text (C)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Square Error (N)";
MPRINT(EM_DIAGRAM):   label "P__SEGMENT_4"n = "Predicted Variable (N)";
MPRINT(EM_DIAGRAM):   label "traintotal"n = "Train Total (N)";
MPRINT(EM_DIAGRAM):   label "index"n = "Leaf Index (N)";
MPRINT(EM_DIAGRAM):   label "percevent_train"n = "Percent Cases (N)";
MPRINT(EM_DIAGRAM):   label "perc_train"n = "Event Percentage (N)";
MPRINT(EM_DIAGRAM):   label "tprob"n = "Training Percent (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_TREE_PLOT(obs=10000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus3_OUTIMPORT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_OUTIMPORT / view=WORK.Clus3_OUTIMPORT;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NRULES"n = "Number of Splitting Rules (N)";
MPRINT(EM_DIAGRAM):   label "NSURROGATES"n = "Number of Surrogate Rules (N)";
MPRINT(EM_DIAGRAM):   label "IMPORTANCE"n = "Importance (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_OUTIMPORT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus3_PROFILE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_PROFILE / view=WORK.Clus3_PROFILE;
MPRINT(EM_DIAGRAM):   label "BYPERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Variable (N)";
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "NumericValue"n = "Numeric Value (N)";
MPRINT(EM_DIAGRAM):   label "FmtValue"n = "Formatted Value (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "_Label_"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "orderedValue"n = "Ordered Values (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_PROFILE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus3_DISTANCE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus3_DISTANCE / view=WORK.Clus3_DISTANCE;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_1"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_2"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_3"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_4"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_5"n = " (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_DISTANCE(obs=60000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:04 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Clus3_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where(ROLE in("INPUT" "REJECTED" "FREQ" "ID"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base0DHJ0YG as select * from WORK.M30OFLXS order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp0DHJ0YG as select * from WORK.M0223B2U order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base0DHJ0YG compare=work._comp0DHJ0YG out=WORK._DIFF317Z88U noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP106HUHES as select * from WORK._DIFF317Z88U where NAME in (select NAME from WORK._DIFF317Z88U where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM2N5UH71 as select * from WORK._DIFF317Z88U where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF317Z88U where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM2N5UH71 as select * from WORK._DIFF317Z88U where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF317Z88U where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM2N5UH71;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM2N5UH71;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM2N5UH71;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM2N5UH71;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMNOTES.txt" encoding="UTF-8" NOBOM;
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Prof : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:04 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN17787";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof_EMTRAINVARIABLE / view=WORK.Prof_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof_SIZE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof_SIZE / view=WORK.Prof_SIZE;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Count"n = "Frequency Count (N)(12.0)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)(5.2)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof_SIZE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof_STATS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof_STATS / view=WORK.Prof_STATS;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof_STATS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof_CLASSDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof_CLASSDIST / view=WORK.Prof_CLASSDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (C)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Groupindex"n = "Group Index (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof_CLASSDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof_INTDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof_INTDIST / view=WORK.Prof_INTDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (N)(12.3)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Color"n = "Color (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof_INTDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof_WORTH OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof_WORTH / view=WORK.Prof_WORTH;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof_WORTH(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:05 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Prof_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base2LFU7Y6 as select * from WORK.M25VK_SB order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp2LFU7Y6 as select * from WORK.M3KC5MYL order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base2LFU7Y6 compare=work._comp2LFU7Y6 out=WORK._DIFF30PLO4_ noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP128H7E1O as select * from WORK._DIFF30PLO4_ where NAME in (select NAME from WORK._DIFF30PLO4_ where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM2FNDBOE as select * from WORK._DIFF30PLO4_ where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF30PLO4_ where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM2FNDBOE as select * from WORK._DIFF30PLO4_ where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF30PLO4_ where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM2FNDBOE;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM2FNDBOE;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM2FNDBOE;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM2FNDBOE;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMNOTES.txt" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\dsapimeta.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\layout.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc printto print=#LN17860;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options NODATE NONUMBER;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RUNSTATUS noobs label;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options DATE NUMBER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof_3P4MR;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   rc = 0;
MPRINT(EM_DIAGRAM):   Pack0NR2 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0NR2, "Profile", ' type="EM Result" version="14.1" Report="20161277_Assignment2_Prof_3P4MR" nodeid="Prof" description="Segment Profile" component="Profile"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Profile began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2RPS = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2RPS, "MININGRESULT", ' NAME="Mining Result Metadata"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package MININGRESULT began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0NR2, Pack2RPS, rc, "NESTED_NAME", "MININGRESULT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F041ATRM "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2RPS, "fileref:F041ATRM", "BINARY", "text/xml", 'SXML', 'NAME=SCOREXML TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3SYF05E "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\input.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2RPS, "fileref:F3SYF05E", "BINARY", "text/xml", 'INPUTTABLE', 'NAME=INPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\input.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F27_ZICR "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\output.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2RPS, "fileref:F27_ZICR", "BINARY", "text/xml", 'OUTPUTTABLE', 'NAME=OUTPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\output.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0_W9PI8 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof_3P4MR\miningResult.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2RPS, "fileref:F0_W9PI8", "BINARY", "text/xml", 'MININGRESULT', 'NAME=MININGRESULT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof_3P4MR\miningResult.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack00WI = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack00WI, "File Import - Demographic - Task 1", ' NAME="FIMPORT"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package File Import - Demographic - Task 1 began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1Y6ZY_6 "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack00WI, "fileref:F1Y6ZY_6", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F39R2MH2 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack00WI, "fileref:F39R2MH2", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2C7_ZFN "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack00WI, "fileref:F2C7_ZFN", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack00WI, "work", "FIMPORT_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3CNHA9N "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack00WI, "fileref:F3CNHA9N", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3CUZVG9 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack00WI, "fileref:F3CUZVG9", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F376KT2W "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack00WI, "fileref:F376KT2W", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2H3WXI9 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack00WI, "fileref:F2H3WXI9", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0M2AM3_ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack00WI, "fileref:F0M2AM3_", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0NR2, Pack00WI, rc, "NESTED_NAME", "FIMPORT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1YZP = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1YZP, "Filter - Yes", ' NAME="Filter"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Filter - Yes began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0Q4_O8Q "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Filter_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1YZP, "fileref:F0Q4_O8Q", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Filter_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F20L1K1E "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1YZP, "fileref:F20L1K1E", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2BWYXTJ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1YZP, "fileref:F2BWYXTJ", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1YZP, "work", "Filter_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F16AIBD5 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1YZP, "fileref:F16AIBD5", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2PAHNIQ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1YZP, "fileref:F2PAHNIQ", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2MOUL00 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1YZP, "fileref:F2MOUL00", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F01ELV41 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1YZP, "fileref:F01ELV41", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F17VI0VG "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1YZP, "fileref:F17VI0VG", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F09EP_N4 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1YZP, "fileref:F09EP_N4", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1YZP, "work", "Filter_CLASS", "EXCLUDECLASS", "NAME=CLASS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file EXCLUDECLASS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1YZP, "work", "Filter_INTERVAL", "LIMITINTERVAL", "NAME=INTERVAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file LIMITINTERVAL inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0NR2, Pack1YZP, rc, "NESTED_NAME", "Filter");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3FL8 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3FL8, "Cluster", ' NAME="Clus3"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Cluster began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F28R87_Y "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus3_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3FL8, "fileref:F28R87_Y", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus3_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0NHUQJO "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3FL8, "fileref:F0NHUQJO", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F10DJBVQ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3FL8, "fileref:F10DJBVQ", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3FL8, "work", "Clus3_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0D5EYP3 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3FL8, "fileref:F0D5EYP3", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F04B__KG "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3FL8, "fileref:F04B__KG", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1ML81XV "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3FL8, "fileref:F1ML81XV", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1JPQRZ6 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3FL8, "fileref:F1JPQRZ6", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0DKJ23D "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3FL8, "fileref:F0DKJ23D", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1Q7J03Z "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3FL8, "fileref:F1Q7J03Z", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3GCY7QZ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3FL8, "fileref:F3GCY7QZ", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3FL8, "work", "Clus3_OUTMEAN", "CLUSMEAN", "NAME=OUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3FL8, "work", "Clus3_OUTSTAT", "CLUSSTAT", "NAME=OUTSTAT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3FL8, "work", "Clus3_INPUTMEAN", "INPUTMEAN", "NAME=INPUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file INPUTMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3FL8, "work", "Clus3_TREE_PLOT", "TREE_PLOT", "NAME=TREE_PLOT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file TREE_PLOT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F05RIAG5 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\ENGLISHRULES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3FL8, "fileref:F05RIAG5", "TEXT", "text/plain", 'ENGLISHRULES', 'NAME=EnglishRules TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\ENGLISHRULES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3FL8, "work", "Clus3_OUTIMPORT", "IMPORTANCE", "NAME=OUTIMPORT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file IMPORTANCE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3FL8, "work", "Clus3_PROFILE", "Segment Profiles", "NAME=PROFILE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file PROFILE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1Y67 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1Y67, "GRAPH", ' NAME="GRAPH"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package GRAPH began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3FL8, Pack1Y67, rc, "NESTED_NAME", "GRAPH");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3LWDDO5 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\GRAPH\Distance.gif";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1Y67, "fileref:F3LWDDO5", "BINARY", "image/gif", 'Distance', 'NAME="Distance" TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\GRAPH\Distance.gif inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack3FL8, "work", "Clus3_DISTANCE", "Distance Table", "NAME=DISTANCE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file DISTANCETABLE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0NR2, Pack3FL8, rc, "NESTED_NAME", "Clus3");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack23AA = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack23AA, "Segment Profile", ' NAME="Prof"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Segment Profile began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0Y0Q8QJ "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack23AA, "fileref:F0Y0Q8QJ", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0QS48LH "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack23AA, "fileref:F0QS48LH", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0RP9GVV "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack23AA, "fileref:F0RP9GVV", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack23AA, "work", "Prof_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F156ELHP "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack23AA, "fileref:F156ELHP", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0PCX6KY "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack23AA, "fileref:F0PCX6KY", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3UP19V4 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack23AA, "fileref:F3UP19V4", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0I4NQ74 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack23AA, "fileref:F0I4NQ74", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2BYKD7_ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack23AA, "fileref:F2BYKD7_", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack23AA, "work", "Prof_SIZE", "Profileview", "NAME=SIZE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack23AA, "work", "Prof_STATS", "Profileview", "NAME=STATS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack23AA, "work", "Prof_CLASSDIST", "Profileview", "NAME=CLASSDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack23AA, "work", "Prof_INTDIST", "Profileview", "NAME=INTDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack23AA, "work", "Prof_WORTH", "profworth", "NAME=WORTH TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file profworth inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0NR2, Pack23AA, rc, "NESTED_NAME", "Prof");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2CIE = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2CIE, "WORKSPACE", ' NAME="Workspace configuration"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package WORKSPACE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0NR2, Pack2CIE, rc, "NESTED_NAME", "WORKSPACE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F15LE56U "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\dsapi.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2CIE, "fileref:F15LE56U", "TEXT", "text/plain", 'Batch Code', 'NAME=BATCHCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\dsapi.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F35WRPMW "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\dsapimeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2CIE, "fileref:F35WRPMW", "BINARY", "text/xml", 'Batch Metadata', 'NAME=BATCHMETADATA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\dsapimeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3W3O_JJ "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\layout.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2CIE, "fileref:F3W3O_JJ", "BINARY", "text/xml", 'Properties', 'NAME=LAYOUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\layout.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F14BC4ER "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0NR2, "fileref:F14BC4ER", "TEXT", "text/plain", 'NODESTATUS', 'NAME=NODESTATUS TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1C8M = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1C8M, "PATHSCORE", ' NAME="Path score code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PATHSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0NR2, Pack1C8M, rc, "NESTED_NAME", "PATHSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1M_H = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1M_H, "SASSCORE", ' NAME="SAS Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package SASSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1C8M, Pack1M_H, rc, "NESTED_NAME", "SASSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1M_R9BE "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2TKXDFYscore.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1M_H, "fileref:F1M_R9BE", "TEXT", "text/plain", 'SASCODE', 'NAME=SASCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2TKXDFYscore.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0ZJH = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0ZJH, "PMMLSCORE", ' NAME="PMML Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PMMLSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1C8M, Pack0ZJH, rc, "NESTED_NAME", "PMMLSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   pubType = "TO_ARCHIVE";
MPRINT(EM_DIAGRAM):   properties='archive_path, archive_name';
MPRINT(EM_DIAGRAM):   path = "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof_3P4MR";
MPRINT(EM_DIAGRAM):   name = "miningResult";
MPRINT(EM_DIAGRAM):   call package_publish(Pack0NR2, pubType, rc, properties, path, name);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Publish package Pack0NR2 successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call package_end(Pack0NR2, rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Pack0NR2 ended successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
Package Profile began successfully.
Package MININGRESULT began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\input.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\output.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof_3P4MR\miningResult.xml inserted successfully.
Package File Import - Demographic - Task 1 began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT\EMCUSTOMGRAPH.xml inserted successfully.
spk_PACKAGEINSERT_note
Package Filter - Yes began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Filter_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter\EMCUSTOMGRAPH.xml inserted successfully.
CSV file EXCLUDECLASS inserted successfully.
CSV file LIMITINTERVAL inserted successfully.
spk_PACKAGEINSERT_note
Package Cluster began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus3_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMFLOWSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\EMCUSTOMGRAPH.xml inserted successfully.
CSV file CLUSMEAN inserted successfully.
CSV file CLUSSTAT inserted successfully.
CSV file INPUTMEAN inserted successfully.
CSV file TREE_PLOT inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\ENGLISHRULES.txt inserted successfully.
CSV file IMPORTANCE inserted successfully.
CSV file PROFILE inserted successfully.
Package GRAPH began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus3\GRAPH\Distance.gif inserted successfully.
CSV file DISTANCETABLE inserted successfully.
spk_PACKAGEINSERT_note
Package Segment Profile began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof\EMCUSTOMGRAPH.xml inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file profworth inserted successfully.
spk_PACKAGEINSERT_note
Package WORKSPACE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\dsapi.sas inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\dsapimeta.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OH5DQB\layout.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out inserted successfully.
Package PATHSCORE began successfully.
spk_PACKAGEINSERT_note
Package SASSCORE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2TKXDFYscore.sas inserted successfully.
Package PMMLSCORE began successfully.
spk_PACKAGEINSERT_note
Publish package Pack0NR2 successfully.
Package Pack0NR2 ended successfully.
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   filename F041ATRM;
MPRINT(EM_DIAGRAM):   filename F3SYF05E;
MPRINT(EM_DIAGRAM):   filename F27_ZICR;
MPRINT(EM_DIAGRAM):   filename F0_W9PI8;
MPRINT(EM_DIAGRAM):   filename F1Y6ZY_6;
MPRINT(EM_DIAGRAM):   filename F39R2MH2;
MPRINT(EM_DIAGRAM):   filename F2C7_ZFN;
MPRINT(EM_DIAGRAM):   filename F3CNHA9N;
MPRINT(EM_DIAGRAM):   filename F3CUZVG9;
MPRINT(EM_DIAGRAM):   filename F376KT2W;
MPRINT(EM_DIAGRAM):   filename F2H3WXI9;
MPRINT(EM_DIAGRAM):   filename F0M2AM3_;
MPRINT(EM_DIAGRAM):   filename F0Q4_O8Q;
MPRINT(EM_DIAGRAM):   filename F20L1K1E;
MPRINT(EM_DIAGRAM):   filename F2BWYXTJ;
MPRINT(EM_DIAGRAM):   filename F16AIBD5;
MPRINT(EM_DIAGRAM):   filename F2PAHNIQ;
MPRINT(EM_DIAGRAM):   filename F2MOUL00;
MPRINT(EM_DIAGRAM):   filename F01ELV41;
MPRINT(EM_DIAGRAM):   filename F17VI0VG;
MPRINT(EM_DIAGRAM):   filename F09EP_N4;
MPRINT(EM_DIAGRAM):   filename F28R87_Y;
MPRINT(EM_DIAGRAM):   filename F0NHUQJO;
MPRINT(EM_DIAGRAM):   filename F10DJBVQ;
MPRINT(EM_DIAGRAM):   filename F0D5EYP3;
MPRINT(EM_DIAGRAM):   filename F04B__KG;
MPRINT(EM_DIAGRAM):   filename F1ML81XV;
MPRINT(EM_DIAGRAM):   filename F1JPQRZ6;
MPRINT(EM_DIAGRAM):   filename F0DKJ23D;
MPRINT(EM_DIAGRAM):   filename F1Q7J03Z;
MPRINT(EM_DIAGRAM):   filename F3GCY7QZ;
MPRINT(EM_DIAGRAM):   filename F05RIAG5;
MPRINT(EM_DIAGRAM):   filename F3LWDDO5;
MPRINT(EM_DIAGRAM):   filename F0Y0Q8QJ;
MPRINT(EM_DIAGRAM):   filename F0QS48LH;
MPRINT(EM_DIAGRAM):   filename F0RP9GVV;
MPRINT(EM_DIAGRAM):   filename F156ELHP;
MPRINT(EM_DIAGRAM):   filename F0PCX6KY;
MPRINT(EM_DIAGRAM):   filename F3UP19V4;
MPRINT(EM_DIAGRAM):   filename F0I4NQ74;
MPRINT(EM_DIAGRAM):   filename F2BYKD7_;
MPRINT(EM_DIAGRAM):   filename F15LE56U;
MPRINT(EM_DIAGRAM):   filename F35WRPMW;
MPRINT(EM_DIAGRAM):   filename F3W3O_JJ;
MPRINT(EM_DIAGRAM):   filename F14BC4ER;
MPRINT(EM_DIAGRAM):   filename F1M_R9BE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options notes source;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
96155      %let eminfo= %str();
96156      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
96157      set EMWS1.Prof4_ExportSet;
MPRINT(EM_DIAGRAM):   set EMWS1.Prof4_ExportSet;
96158      where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
MPRINT(EM_DIAGRAM):   where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
96159      call symput('eminfo', strip(eminfo));
MPRINT(EM_DIAGRAM):   call symput('eminfo', strip(eminfo));
96160      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.PROF4_EXPORTSET.
      WHERE (eminfo not = ' ') and NODEPORT in ('DATA', 'TRAIN');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Retrieving Score Code FIMPORT2 
Traverser: WaitingNode "CLUS" 
Traverser: WaitingNode "PROF4" 
traverser_readyNode_note 
Retrieving Score Code Filter4 
Traverser: WaitingNode "PROF4" 
traverser_readyNode_note 
Retrieving Score Code Clus 
traverser_readyNode_note 
Retrieving Score Code Prof4 
96161      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
96162      * Report: Determine If validvarname ANY variables are score inputs;
MPRINT(EM_DIAGRAM):   * Report: Determine If validvarname ANY variables are score inputs;
96163      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
96164      filename _pref "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2LRNR1Xscore.sas";
MPRINT(EM_DIAGRAM):   filename _pref "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2LRNR1Xscore.sas";
96165      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
96166      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   * EM Version: 14.1;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M3P062415;
MPRINT(EM_DIAGRAM):   * Host: ba-teaching;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(EM_DIAGRAM):   * Project Name: 20161277_CAassignment2;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: All Tasks;
MPRINT(EM_DIAGRAM):   * Generated by: 20161277;
MPRINT(EM_DIAGRAM):   * Date: 28SEP2020:04:23:09;
MPRINT(EM_DIAGRAM):   * Macro variable identifying the scored data set;
MPRINT(EM_DIAGRAM):   *%let EM_SCORE_OUTPUT=;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Filter4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Clustering;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Clus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize Number_of_Contacts ;
MPRINT(EM_DIAGRAM):   drop T_Number_of_Contacts ;
MPRINT(EM_DIAGRAM):   if missing( Number_of_Contacts ) then T_Number_of_Contacts = .;
MPRINT(EM_DIAGRAM):   else T_Number_of_Contacts = (Number_of_Contacts - 2.63044693559302) * 0.34836416010646;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Contact_Type ;
MPRINT(EM_DIAGRAM):   drop Contact_Typecellular Contact_Typetelephone ;
MPRINT(EM_DIAGRAM):   if missing( Contact_Type ) then do;
MPRINT(EM_DIAGRAM):   Contact_Typecellular = .;
MPRINT(EM_DIAGRAM):   Contact_Typetelephone = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm11 $ 11;
MPRINT(EM_DIAGRAM):   drop _dm11 ;
MPRINT(EM_DIAGRAM):   _dm11 = put( Contact_Type , $11. );
MPRINT(DMNORMIP):   call dmnorm(_dm11,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm11 = 'CELLULAR' then do;
MPRINT(EM_DIAGRAM):   Contact_Typecellular = 0.55932420336349;
MPRINT(EM_DIAGRAM):   Contact_Typetelephone = -0.55932420336349;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'TELEPHONE' then do;
MPRINT(EM_DIAGRAM):   Contact_Typecellular = -0.89390962430374;
MPRINT(EM_DIAGRAM):   Contact_Typetelephone = 0.89390962430374;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Contact_Typecellular = .;
MPRINT(EM_DIAGRAM):   Contact_Typetelephone = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Mortage ;
MPRINT(EM_DIAGRAM):   drop Mortageno Mortageyes ;
MPRINT(EM_DIAGRAM):   if missing( Mortage ) then do;
MPRINT(EM_DIAGRAM):   Mortageno = .;
MPRINT(EM_DIAGRAM):   Mortageyes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
MPRINT(EM_DIAGRAM):   _dm5 = put( Mortage , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm5 = 'YES' then do;
MPRINT(EM_DIAGRAM):   Mortageno = -0.6575050953291;
MPRINT(EM_DIAGRAM):   Mortageyes = 0.6575050953291;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'NO' then do;
MPRINT(EM_DIAGRAM):   Mortageno = 0.76042800587332;
MPRINT(EM_DIAGRAM):   Mortageyes = -0.76042800587332;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Mortageno = .;
MPRINT(EM_DIAGRAM):   Mortageyes = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Personal_Loan ;
MPRINT(EM_DIAGRAM):   drop Personal_Loanno Personal_Loanyes ;
MPRINT(EM_DIAGRAM):   if missing( Personal_Loan ) then do;
MPRINT(EM_DIAGRAM):   Personal_Loanno = .;
MPRINT(EM_DIAGRAM):   Personal_Loanyes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
MPRINT(EM_DIAGRAM):   _dm5 = put( Personal_Loan , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm5 = 'NO' then do;
MPRINT(EM_DIAGRAM):   Personal_Loanno = 0.30460940329387;
MPRINT(EM_DIAGRAM):   Personal_Loanyes = -0.30460940329387;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'YES' then do;
MPRINT(EM_DIAGRAM):   Personal_Loanno = -1.64139807598223;
MPRINT(EM_DIAGRAM):   Personal_Loanyes = 1.64139807598223;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Personal_Loanno = .;
MPRINT(EM_DIAGRAM):   Personal_Loanyes = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUSvlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUSvads [5] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 5;
MPRINT(EM_DIAGRAM):   CLUSvads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_Number_of_Contacts ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( T_Number_of_Contacts - -0.24543788122031 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( T_Number_of_Contacts - 9.00740082260139 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( T_Number_of_Contacts - 1.8127882969574 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( T_Number_of_Contacts - 4.43256184372335 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( T_Number_of_Contacts - -0.17353892987368 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( Contact_Typecellular ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( Contact_Typecellular - 0.5593242033634 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( Contact_Typecellular - -0.25088580675186 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( Contact_Typecellular - 0.0881811646128 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( Contact_Typecellular - -0.38187408013585 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( Contact_Typecellular - -0.89390962430363 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Contact_Typetelephone ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( Contact_Typetelephone - -0.5593242033634 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( Contact_Typetelephone - 0.25088580675186 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( Contact_Typetelephone - -0.0881811646128 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( Contact_Typetelephone - 0.38187408013585 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( Contact_Typetelephone - 0.89390962430363 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Mortageno ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( Mortageno - -0.04861412943451 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( Mortageno - -0.01755298770676 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( Mortageno - -0.01350360713357 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( Mortageno - 0.13665295524252 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( Mortageno - 0.07482104698831 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Mortageyes ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( Mortageyes - 0.04861412943451 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( Mortageyes - 0.01755298770676 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( Mortageyes - 0.01350360713357 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( Mortageyes - -0.13665295524252 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( Mortageyes - -0.07482104698831 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( Personal_Loanno ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( Personal_Loanno - -0.00431903230682 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( Personal_Loanno - 0.11517504690416 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( Personal_Loanno - -0.02489385514929 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( Personal_Loanno - 0.02717452844799 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( Personal_Loanno - 0.00888862193819 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Personal_Loanyes ) then do;
MPRINT(EM_DIAGRAM):   CLUSvads [1] + ( Personal_Loanyes - 0.00431903230682 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [2] + ( Personal_Loanyes - -0.11517504690416 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [3] + ( Personal_Loanyes - 0.02489385514929 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [4] + ( Personal_Loanyes - -0.02717452844799 )**2;
MPRINT(EM_DIAGRAM):   CLUSvads [5] + ( Personal_Loanyes - -0.00888862193819 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   _vqnvar = 4 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 3.1832314562052E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 5;
MPRINT(EM_DIAGRAM):   if CLUSvads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUSvads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (4 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUSvlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Prof4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
96397      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
96398      quit;
96399      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
96400      proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
MPRINT(EM_DIAGRAM):    proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
96401      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
96402      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 195 observations read from the data set WORK._TEMP.
NOTE: 172 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 23 observations and 1 variables.
NOTE: Compressing data set WORK._TEMP increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Determine output variables meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.FIMPORT2_DATA noprint out=_originalvar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\DROPINPUT.sas";
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _drpfrf;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT2_DATA;
MPRINT(EM_DIAGRAM):   drop 'Age'n 'Career'n 'Contact_Type'n 'Cus_ID'n 'Education'n 'Marital_Statues'n 'Mortage'n 'Number_of_Contacts'n 'Personal_Loan'n 'Subscribed'n 'VAR1'n ;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf;
MPRINT(EM_DIAGRAM):   proc contents data =WORK.SCORE_OUTPUTMETA noprint out=WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   length role $32 name_prefix $8;
MPRINT(EM_DIAGRAM):   set WORK.SCORE_OUTPUTMETA(keep=name type length label format informat rename=(type=itype)) end=_eof;
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   else type = 'C';
MPRINT(EM_DIAGRAM):   drop name_prefix itype;
MPRINT(EM_DIAGRAM):   if name = '_WARN_' then do;
MPRINT(EM_DIAGRAM):   role = 'ASSESS';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   name_prefix = scan(NAME, 1, '_');
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then role = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   else if name_prefix ='P' then role = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix ='R' then role = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then role = 'DECISION';
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then role = 'ASSESS';
MPRINT(EM_DIAGRAM):   else role = 'TRANSFORM';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if _eof then call symput('NumOutputVars', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   run;
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _tempFmt;
MPRINT(EM_DIAGRAM):   length format $33;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_tempFmt;
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne '')) out=temp2(rename=(fmtname=format));
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data temp2;
MPRINT(EM_DIAGRAM):   merge temp2(in=_a) _tempFmt(in=_b);
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable format by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   proc sort data=temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   if first.libname and first.memname then do;
MPRINT(EM_DIAGRAM):   call execute("proc format lib="!!libname!!'.'!!memname!!"cntlout=work._fmtout;");
MPRINT(EM_DIAGRAM):   call execute("select");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call execute (format);
MPRINT(EM_DIAGRAM):   if last.libname and last.memname then do;
MPRINT(EM_DIAGRAM):   call execute(";");
MPRINT(EM_DIAGRAM):   call execute("proc append base=WORK._EMFORMAT data=work._fmtout force;");
MPRINT(EM_DIAGRAM):   call execute("run;");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK._EMFORMAT nodupkey;
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   where fmtname ne '_EMFMT';
MPRINT(EM_DIAGRAM):   run;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
MPRINT(EM_DIAGRAM):    options mprint;
MPRINT(EM_DIAGRAM):   filename _code "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2LRNR1Xscore.sas";
MPRINT(EM_DIAGRAM):   filename _xml "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml";




MPRINT(SCOREXML):   PROC FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK._alldeps;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(SCOREXML):   * Project Name: 20161277_CAassignment2;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: All Tasks;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 28SEP2020:04:23:09;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Filtering;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Filter4;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Number_of_Contacts ;
MPRINT(SCOREXML):   drop T_Number_of_Contacts ;
MPRINT(SCOREXML):   if missing( Number_of_Contacts ) then T_Number_of_Contacts = .;
MPRINT(SCOREXML):   else T_Number_of_Contacts = (Number_of_Contacts - 2.63044693559302) * 0.34836416010646;
MPRINT(SCOREXML):   *** Generate dummy variables for Contact_Type ;
MPRINT(SCOREXML):   drop Contact_Typecellular Contact_Typetelephone ;
MPRINT(SCOREXML):   if missing( Contact_Type ) then do;
MPRINT(SCOREXML):   Contact_Typecellular = .;
MPRINT(SCOREXML):   Contact_Typetelephone = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm11 $ 11;
MPRINT(SCOREXML):   drop _dm11 ;
MPRINT(SCOREXML):   _dm11 = put( Contact_Type , $11. );
MPRINT(DMNORMIP):   call dmnorm(_dm11,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm11 = 'CELLULAR' then do;
MPRINT(SCOREXML):   Contact_Typecellular = 0.55932420336349;
MPRINT(SCOREXML):   Contact_Typetelephone = -0.55932420336349;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm11 = 'TELEPHONE' then do;
MPRINT(SCOREXML):   Contact_Typecellular = -0.89390962430374;
MPRINT(SCOREXML):   Contact_Typetelephone = 0.89390962430374;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Contact_Typecellular = .;
MPRINT(SCOREXML):   Contact_Typetelephone = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Mortage ;
MPRINT(SCOREXML):   drop Mortageno Mortageyes ;
MPRINT(SCOREXML):   if missing( Mortage ) then do;
MPRINT(SCOREXML):   Mortageno = .;
MPRINT(SCOREXML):   Mortageyes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm5 $ 5;
MPRINT(SCOREXML):   drop _dm5 ;
MPRINT(SCOREXML):   _dm5 = put( Mortage , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm5 = 'YES' then do;
MPRINT(SCOREXML):   Mortageno = -0.6575050953291;
MPRINT(SCOREXML):   Mortageyes = 0.6575050953291;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm5 = 'NO' then do;
MPRINT(SCOREXML):   Mortageno = 0.76042800587332;
MPRINT(SCOREXML):   Mortageyes = -0.76042800587332;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Mortageno = .;
MPRINT(SCOREXML):   Mortageyes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Personal_Loan ;
MPRINT(SCOREXML):   drop Personal_Loanno Personal_Loanyes ;
MPRINT(SCOREXML):   if missing( Personal_Loan ) then do;
MPRINT(SCOREXML):   Personal_Loanno = .;
MPRINT(SCOREXML):   Personal_Loanyes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm5 $ 5;
MPRINT(SCOREXML):   drop _dm5 ;
MPRINT(SCOREXML):   _dm5 = put( Personal_Loan , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm5 = 'NO' then do;
MPRINT(SCOREXML):   Personal_Loanno = 0.30460940329387;
MPRINT(SCOREXML):   Personal_Loanyes = -0.30460940329387;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm5 = 'YES' then do;
MPRINT(SCOREXML):   Personal_Loanno = -1.64139807598223;
MPRINT(SCOREXML):   Personal_Loanyes = 1.64139807598223;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Personal_Loanno = .;
MPRINT(SCOREXML):   Personal_Loanyes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUSvlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUSvads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUSvads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Number_of_Contacts ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( T_Number_of_Contacts - -0.24543788122031 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( T_Number_of_Contacts - 9.00740082260139 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( T_Number_of_Contacts - 1.8127882969574 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( T_Number_of_Contacts - 4.43256184372335 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( T_Number_of_Contacts - -0.17353892987368 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( Contact_Typecellular ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( Contact_Typecellular - 0.5593242033634 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( Contact_Typecellular - -0.25088580675186 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( Contact_Typecellular - 0.0881811646128 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( Contact_Typecellular - -0.38187408013585 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( Contact_Typecellular - -0.89390962430363 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Contact_Typetelephone ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( Contact_Typetelephone - -0.5593242033634 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( Contact_Typetelephone - 0.25088580675186 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( Contact_Typetelephone - -0.0881811646128 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( Contact_Typetelephone - 0.38187408013585 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( Contact_Typetelephone - 0.89390962430363 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Mortageno ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( Mortageno - -0.04861412943451 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( Mortageno - -0.01755298770676 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( Mortageno - -0.01350360713357 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( Mortageno - 0.13665295524252 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( Mortageno - 0.07482104698831 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Mortageyes ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( Mortageyes - 0.04861412943451 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( Mortageyes - 0.01755298770676 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( Mortageyes - 0.01350360713357 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( Mortageyes - -0.13665295524252 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( Mortageyes - -0.07482104698831 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.49999999999999;
MPRINT(SCOREXML):   if not missing( Personal_Loanno ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( Personal_Loanno - -0.00431903230682 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( Personal_Loanno - 0.11517504690416 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( Personal_Loanno - -0.02489385514929 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( Personal_Loanno - 0.02717452844799 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( Personal_Loanno - 0.00888862193819 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Personal_Loanyes ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( Personal_Loanyes - 0.00431903230682 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( Personal_Loanyes - -0.11517504690416 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( Personal_Loanyes - 0.02489385514929 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( Personal_Loanyes - -0.02717452844799 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( Personal_Loanyes - -0.00888862193819 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   _vqnvar = 4 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 3.1832314562052E-12 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUSvads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUSvads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUSvads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (4 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUSvlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof4;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   QUIT;
MPRINT(SCOREXML):   Data _NULL_;
MPRINT(SCOREXML):   numobs=0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._alldeps","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numobs= attrn(dsid,"nlobs");
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open dependency data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if numobs <= 0 then do;
MPRINT(SCOREXML):   put "WARNING: ScoreXML: No variable dependencies found in code.";
MPRINT(SCOREXML):   call symput('SYSCC','4');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Rhs (keep=rhs RHS_NLiteral UNAME);
MPRINT(SCOREXML):   Set WORK._alldeps;
MPRINT(SCOREXML):   Length UNAME $32;
MPRINT(SCOREXML):   LABEL rhs = ;
MPRINT(SCOREXML):   LABEL RHS_NLiteral = ;
MPRINT(SCOREXML):   if RHS_Dropped = 0 AND (1 NE index(rhs, '_OLD_')) then do;
MPRINT(SCOREXML):   UNAME = UPCASE(rhs);
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Proc Sort Data=WORK._Rhs NODUP out=WORK._Rhs (rename=(rhs=NAME RHS_NLiteral=NLITERAL));
MPRINT(SCOREXML):   By UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Indatavmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("EMWS1.FIMPORT2_DATA","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   NAME = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open input data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Indatavmeta NODUP Out=Work._Indatavmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   dsid = open("EMWS1.FIMPORT2_DATA");
MPRINT(SCOREXML):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   call symput('_engineTable', upcase(attrc(dsid, 'ENGINE')));
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Progout;
MPRINT(SCOREXML):   Set EMWS1.FIMPORT2_DATA;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(SCOREXML):   * Project Name: 20161277_CAassignment2;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: All Tasks;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 28SEP2020:04:23:09;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Filtering;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Filter4;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Number_of_Contacts ;
MPRINT(SCOREXML):   drop T_Number_of_Contacts ;
MPRINT(SCOREXML):   if missing( Number_of_Contacts ) then T_Number_of_Contacts = .;
MPRINT(SCOREXML):   else T_Number_of_Contacts = (Number_of_Contacts - 2.63044693559302) * 0.34836416010646;
MPRINT(SCOREXML):   *** Generate dummy variables for Contact_Type ;
MPRINT(SCOREXML):   drop Contact_Typecellular Contact_Typetelephone ;
MPRINT(SCOREXML):   if missing( Contact_Type ) then do;
MPRINT(SCOREXML):   Contact_Typecellular = .;
MPRINT(SCOREXML):   Contact_Typetelephone = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm11 $ 11;
MPRINT(SCOREXML):   drop _dm11 ;
MPRINT(SCOREXML):   _dm11 = put( Contact_Type , $11. );
MPRINT(DMNORMIP):   call dmnorm(_dm11,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm11 = 'CELLULAR' then do;
MPRINT(SCOREXML):   Contact_Typecellular = 0.55932420336349;
MPRINT(SCOREXML):   Contact_Typetelephone = -0.55932420336349;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm11 = 'TELEPHONE' then do;
MPRINT(SCOREXML):   Contact_Typecellular = -0.89390962430374;
MPRINT(SCOREXML):   Contact_Typetelephone = 0.89390962430374;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Contact_Typecellular = .;
MPRINT(SCOREXML):   Contact_Typetelephone = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Mortage ;
MPRINT(SCOREXML):   drop Mortageno Mortageyes ;
MPRINT(SCOREXML):   if missing( Mortage ) then do;
MPRINT(SCOREXML):   Mortageno = .;
MPRINT(SCOREXML):   Mortageyes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm5 $ 5;
MPRINT(SCOREXML):   drop _dm5 ;
MPRINT(SCOREXML):   _dm5 = put( Mortage , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm5 = 'YES' then do;
MPRINT(SCOREXML):   Mortageno = -0.6575050953291;
MPRINT(SCOREXML):   Mortageyes = 0.6575050953291;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm5 = 'NO' then do;
MPRINT(SCOREXML):   Mortageno = 0.76042800587332;
MPRINT(SCOREXML):   Mortageyes = -0.76042800587332;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Mortageno = .;
MPRINT(SCOREXML):   Mortageyes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Personal_Loan ;
MPRINT(SCOREXML):   drop Personal_Loanno Personal_Loanyes ;
MPRINT(SCOREXML):   if missing( Personal_Loan ) then do;
MPRINT(SCOREXML):   Personal_Loanno = .;
MPRINT(SCOREXML):   Personal_Loanyes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm5 $ 5;
MPRINT(SCOREXML):   drop _dm5 ;
MPRINT(SCOREXML):   _dm5 = put( Personal_Loan , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm5 = 'NO' then do;
MPRINT(SCOREXML):   Personal_Loanno = 0.30460940329387;
MPRINT(SCOREXML):   Personal_Loanyes = -0.30460940329387;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm5 = 'YES' then do;
MPRINT(SCOREXML):   Personal_Loanno = -1.64139807598223;
MPRINT(SCOREXML):   Personal_Loanyes = 1.64139807598223;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Personal_Loanno = .;
MPRINT(SCOREXML):   Personal_Loanyes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUSvlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUSvads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUSvads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Number_of_Contacts ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( T_Number_of_Contacts - -0.24543788122031 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( T_Number_of_Contacts - 9.00740082260139 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( T_Number_of_Contacts - 1.8127882969574 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( T_Number_of_Contacts - 4.43256184372335 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( T_Number_of_Contacts - -0.17353892987368 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( Contact_Typecellular ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( Contact_Typecellular - 0.5593242033634 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( Contact_Typecellular - -0.25088580675186 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( Contact_Typecellular - 0.0881811646128 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( Contact_Typecellular - -0.38187408013585 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( Contact_Typecellular - -0.89390962430363 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Contact_Typetelephone ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( Contact_Typetelephone - -0.5593242033634 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( Contact_Typetelephone - 0.25088580675186 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( Contact_Typetelephone - -0.0881811646128 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( Contact_Typetelephone - 0.38187408013585 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( Contact_Typetelephone - 0.89390962430363 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Mortageno ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( Mortageno - -0.04861412943451 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( Mortageno - -0.01755298770676 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( Mortageno - -0.01350360713357 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( Mortageno - 0.13665295524252 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( Mortageno - 0.07482104698831 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Mortageyes ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( Mortageyes - 0.04861412943451 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( Mortageyes - 0.01755298770676 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( Mortageyes - 0.01350360713357 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( Mortageyes - -0.13665295524252 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( Mortageyes - -0.07482104698831 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.49999999999999;
MPRINT(SCOREXML):   if not missing( Personal_Loanno ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( Personal_Loanno - -0.00431903230682 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( Personal_Loanno - 0.11517504690416 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( Personal_Loanno - -0.02489385514929 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( Personal_Loanno - 0.02717452844799 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( Personal_Loanno - 0.00888862193819 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Personal_Loanyes ) then do;
MPRINT(SCOREXML):   CLUSvads [1] + ( Personal_Loanyes - 0.00431903230682 )**2;
MPRINT(SCOREXML):   CLUSvads [2] + ( Personal_Loanyes - -0.11517504690416 )**2;
MPRINT(SCOREXML):   CLUSvads [3] + ( Personal_Loanyes - 0.02489385514929 )**2;
MPRINT(SCOREXML):   CLUSvads [4] + ( Personal_Loanyes - -0.02717452844799 )**2;
MPRINT(SCOREXML):   CLUSvads [5] + ( Personal_Loanyes - -0.00888862193819 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   _vqnvar = 4 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 3.1832314562052E-12 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUSvads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUSvads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUSvads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (4 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUSvlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof4;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if _N_=1 then do;
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   stop;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Varsmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._Progout","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   Name = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open program output.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Varsmeta NODUP Out=Work._Varsmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Invarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Rhs (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   if (a and b) then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Outvarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Varsmeta (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   If a and not b then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   LENGTH strbuf $ 80;
MPRINT(SCOREXML):   strbuf = ' ';
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '<?xml version="1.0" encoding="utf-8"?>';
MPRINT(SCOREXML):   put '<Score>';
MPRINT(SCOREXML):   put @3 '<Producer>';
MPRINT(SCOREXML):   put @6 "<Name> SAS Enterprise Miner </Name>";
MPRINT(SCOREXML):   strbuf = '<Version> ' || "6.2" || ' </Version>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   syslocale = getpxlocale();
MPRINT(SCOREXML):   strbuf = '<Locale> '|| strip(syslocale) ||' </Locale>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   sysencode = getpxencoding('sas12');
MPRINT(SCOREXML):   strbuf = '<Encoding> '|| strip(sysencode) ||' </Encoding>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   put @3 '</Producer>';
MPRINT(SCOREXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(SCOREXML):   put @3 '<CFunction>';
MPRINT(SCOREXML):   put @6 '<Name> score </Name>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="input">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "4" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="output">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "3" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @3 '</CFunction>';
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Invarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = ' <Input count="' || "4" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "4" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Outvarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = ' <Input count="' || "3" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "3" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '</Score>';
MPRINT(SCOREXML):   Run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _code;
MPRINT(EM_DIAGRAM):   filename _xml;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Input table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc sort data=work._invarsmeta out=_inpckgtemp(keep=NAME);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.FIMPORT2_EMCMETADEFAULT out=_inpckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\input.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.input;
MPRINT(EM_DIAGRAM):   merge _inpckgtemp(in=_a) _inpckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=work._progout out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('work._progout');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set work._progout;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=work._progout out=WORK.M3KR4E5B noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3KR4E5B;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KR4E5B(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3KR4E5B;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KR4E5B;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1QBAG1U NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1QBAG1U;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1QBAG1U;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0RV7WYK(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1QBAG1U;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1QBAG1U;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1QBAG1U;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1QBAG1U;
MPRINT(EMADVISECOLUMNS):   set WORK.M1QBAG1U;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=work._empckgtemp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_outvarsmeta(keep=NAME LABEL) out=work._empckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\output.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.output;
MPRINT(EM_DIAGRAM):   merge work._empckgtemp(in=_a) work._empckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    proc datasets library=WORK NOLIST NOWARN NODETAILS;
MPRINT(EM_DIAGRAM):   delete _alldeps _Indatavmeta _Keepvars _Keepnames _Invarsmeta _Progout _Outvarsmeta _Rhs _Varsmeta;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof4_3GXP8\miningResult.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* FIMPORT2 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:14 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN18030";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT2_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.FIMPORT2_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.FIMPORT2_EMTRAINVARIABLE / view=WORK.FIMPORT2_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "DROP"n = "Drop (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT2_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:14 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base29PYNGF as select * from WORK.M381QZGG order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp29PYNGF as select * from WORK.M0G2XLBB order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base29PYNGF compare=work._comp29PYNGF out=WORK._DIFF1UTEFLF noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP11NJ2EZ6 as select * from WORK._DIFF1UTEFLF where NAME in (select NAME from WORK._DIFF1UTEFLF where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM2WSOWO_ as select * from WORK._DIFF1UTEFLF where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF1UTEFLF where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM2WSOWO_ as select * from WORK._DIFF1UTEFLF where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF1UTEFLF where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM2WSOWO_;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM2WSOWO_;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM2WSOWO_;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM2WSOWO_;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\VARIABLESETDELTA.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\DELTACODE.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "CLUS" 
Traverser: WaitingNode "PROF4" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Filter4 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:14 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Filter4_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter4_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter4_EMTRAINVARIABLE / view=WORK.Filter4_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Limit Method (C)";
MPRINT(EM_DIAGRAM):   label "KEEPMISSING"n = "Keep Missing Values (C)";
MPRINT(EM_DIAGRAM):   label "MINFREQ"n = "Minimum Frequency Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "MAXVALUES"n = "Number of Levels Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMIN"n = "Lower Limit (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMAX"n = "Upper Limit (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter4_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter4_CLASS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter4_CLASS / view=WORK.Filter4_CLASS;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Train Count (N)(10.0)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Train Percent (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Filter Method (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter4_CLASS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter4_INTERVAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter4_INTERVAL / view=WORK.Filter4_INTERVAL;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "INTERVALMIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Filter Method (C)";
MPRINT(EM_DIAGRAM):   label "KEEPMISSING"n = "Keep Missing Values (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter4_INTERVAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:15 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Filter4_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length CALCMETHOD $10;
MPRINT(EM_DIAGRAM):   length KEEPMISSING $1;
MPRINT(EM_DIAGRAM):   length MINFREQ 8;
MPRINT(EM_DIAGRAM):   length MAXVALUES 8;
MPRINT(EM_DIAGRAM):   length INTERVALMIN 8;
MPRINT(EM_DIAGRAM):   length INTERVALMAX 8;
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where(ROLE ^in("ID", "TEXT"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base2Y676GQ as select * from WORK.M2_MZRK4 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp2Y676GQ as select * from WORK.M2C17GUZ order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base2Y676GQ compare=work._comp2Y676GQ out=WORK._DIFF3F5QY6B noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP10UWTGM0 as select * from WORK._DIFF3F5QY6B where NAME in (select NAME from WORK._DIFF3F5QY6B where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM30PQGZX as select * from WORK._DIFF3F5QY6B where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF3F5QY6B where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM30PQGZX as select * from WORK._DIFF3F5QY6B where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF3F5QY6B where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM30PQGZX;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM30PQGZX;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM30PQGZX;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM30PQGZX;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "PROF4" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Clus : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:16 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus_EMTRAINVARIABLE / view=WORK.Clus_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus_OUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus_OUTMEAN / view=WORK.Clus_OUTMEAN;
MPRINT(EM_DIAGRAM):   label "_CRIT_"n = "Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_XCONV_"n = "Maximum Relative Change in Cluster Seeds (N)";
MPRINT(EM_DIAGRAM):   label "_FCONV_"n = "Improvement in Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "_FREQ_"n = "Frequency of Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_RMSSTD_"n = "Root-Mean-Square Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "_RADIUS_"n = "Maximum Distance from Cluster Seed (N)";
MPRINT(EM_DIAGRAM):   label "_NEAR_"n = "Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_GAP_"n = "Distance to Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "Number_of_Contacts"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Contact_Typecellular"n = "Contact_Type=cellular (N)";
MPRINT(EM_DIAGRAM):   label "Contact_Typetelephone"n = "Contact_Type=telephone (N)";
MPRINT(EM_DIAGRAM):   label "Mortageno"n = "Mortage=no (N)";
MPRINT(EM_DIAGRAM):   label "Mortageyes"n = "Mortage=yes (N)";
MPRINT(EM_DIAGRAM):   label "Personal_Loanno"n = "Personal_Loan=no (N)";
MPRINT(EM_DIAGRAM):   label "Personal_Loanyes"n = "Personal_Loan=yes (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_OUTMEAN(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus_OUTSTAT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus_OUTSTAT / view=WORK.Clus_OUTSTAT;
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Type of Observation (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "Over_All"n = "Statistic Applying Over All Variables (N)";
MPRINT(EM_DIAGRAM):   label "Number_of_Contacts"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Contact_Typecellular"n = "Contact_Type=cellular (N)";
MPRINT(EM_DIAGRAM):   label "Contact_Typetelephone"n = "Contact_Type=telephone (N)";
MPRINT(EM_DIAGRAM):   label "Mortageno"n = "Mortage=no (N)";
MPRINT(EM_DIAGRAM):   label "Mortageyes"n = "Mortage=yes (N)";
MPRINT(EM_DIAGRAM):   label "Personal_Loanno"n = "Personal_Loan=no (N)";
MPRINT(EM_DIAGRAM):   label "Personal_Loanyes"n = "Personal_Loan=yes (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_OUTSTAT(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus_INPUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus_INPUTMEAN / view=WORK.Clus_INPUTMEAN;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_CHAR_"n = "Segment Id (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Name (N)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "INPUT"n = "Input (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CV"n = "Coefficient of Variation (N)";
MPRINT(EM_DIAGRAM):   label "STDMEAN"n = "Normalized Mean (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_INPUTMEAN(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus_TREE_PLOT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus_TREE_PLOT / view=WORK.Clus_TREE_PLOT;
MPRINT(EM_DIAGRAM):   label "NODETEXT"n = "Node Text (C)";
MPRINT(EM_DIAGRAM):   label "TEXTALL"n = "All Text (C)";
MPRINT(EM_DIAGRAM):   label "N"n = "Train: Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "NODECOLOR"n = "Node Color (N)";
MPRINT(EM_DIAGRAM):   label "parent"n = "Parent Id (N)";
MPRINT(EM_DIAGRAM):   label "abovetext"n = "Above Text (C)";
MPRINT(EM_DIAGRAM):   label "NODE"n = "Node (N)";
MPRINT(EM_DIAGRAM):   label "DEPTH"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   label "LINKWIDTH"n = "Link Width (N)";
MPRINT(EM_DIAGRAM):   label "belowtext"n = "Below Text (C)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Square Error (N)";
MPRINT(EM_DIAGRAM):   label "P__SEGMENT_5"n = "Predicted Variable (N)";
MPRINT(EM_DIAGRAM):   label "traintotal"n = "Train Total (N)";
MPRINT(EM_DIAGRAM):   label "index"n = "Leaf Index (N)";
MPRINT(EM_DIAGRAM):   label "percevent_train"n = "Percent Cases (N)";
MPRINT(EM_DIAGRAM):   label "perc_train"n = "Event Percentage (N)";
MPRINT(EM_DIAGRAM):   label "tprob"n = "Training Percent (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_TREE_PLOT(obs=10000);
MPRINT(EM_DIAGRAM):   run;
693 The SAS System                                                                                                                                                                                                              12:35 Sunday, September 27, 2020

MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus_OUTIMPORT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus_OUTIMPORT / view=WORK.Clus_OUTIMPORT;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NRULES"n = "Number of Splitting Rules (N)";
MPRINT(EM_DIAGRAM):   label "NSURROGATES"n = "Number of Surrogate Rules (N)";
MPRINT(EM_DIAGRAM):   label "IMPORTANCE"n = "Importance (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_OUTIMPORT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus_PROFILE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus_PROFILE / view=WORK.Clus_PROFILE;
MPRINT(EM_DIAGRAM):   label "BYPERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Variable (N)";
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "NumericValue"n = "Numeric Value (N)";
MPRINT(EM_DIAGRAM):   label "FmtValue"n = "Formatted Value (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "_Label_"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "orderedValue"n = "Ordered Values (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_PROFILE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus_DISTANCE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus_DISTANCE / view=WORK.Clus_DISTANCE;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_1"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_2"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_3"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_4"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_5"n = " (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_DISTANCE(obs=60000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:16 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Clus_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where(ROLE in("INPUT" "REJECTED" "FREQ" "ID"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1MZZ2VN as select * from WORK.M0AUJKBY order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1MZZ2VN as select * from WORK.M2K1EO_7 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1MZZ2VN compare=work._comp1MZZ2VN out=WORK._DIFF1_6KCBD noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP126QU_6G as select * from WORK._DIFF1_6KCBD where NAME in (select NAME from WORK._DIFF1_6KCBD where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM0PDO_2U as select * from WORK._DIFF1_6KCBD where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF1_6KCBD where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM0PDO_2U as select * from WORK._DIFF1_6KCBD where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF1_6KCBD where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM0PDO_2U;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM0PDO_2U;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM0PDO_2U;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM0PDO_2U;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMNOTES.txt" encoding="UTF-8" NOBOM;
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Prof4 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:17 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN18194";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof4_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof4_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof4_EMTRAINVARIABLE / view=WORK.Prof4_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof4_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof4_SIZE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof4_SIZE / view=WORK.Prof4_SIZE;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Count"n = "Frequency Count (N)(12.0)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)(5.2)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof4_SIZE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof4_STATS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof4_STATS / view=WORK.Prof4_STATS;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof4_STATS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof4_CLASSDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof4_CLASSDIST / view=WORK.Prof4_CLASSDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (C)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Groupindex"n = "Group Index (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof4_CLASSDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof4_INTDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof4_INTDIST / view=WORK.Prof4_INTDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (N)(12.3)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Color"n = "Color (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof4_INTDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof4_WORTH OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof4_WORTH / view=WORK.Prof4_WORTH;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof4_WORTH(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:17 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Prof4_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base20B_922 as select * from WORK.M2X75T95 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp20B_922 as select * from WORK.M2HMFOPO order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base20B_922 compare=work._comp20B_922 out=WORK._DIFF3I8MO5M noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP1222HH62 as select * from WORK._DIFF3I8MO5M where NAME in (select NAME from WORK._DIFF3I8MO5M where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM3NSI30H as select * from WORK._DIFF3I8MO5M where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF3I8MO5M where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM3NSI30H as select * from WORK._DIFF3I8MO5M where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF3I8MO5M where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM3NSI30H;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM3NSI30H;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM3NSI30H;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM3NSI30H;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMNOTES.txt" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\dsapimeta.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\layout.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc printto print=#LN18267;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options NODATE NONUMBER;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RUNSTATUS noobs label;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options DATE NUMBER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof4_3GXP8;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   rc = 0;
MPRINT(EM_DIAGRAM):   Pack317I = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack317I, "Profile", ' type="EM Result" version="14.1" Report="20161277_Assignment2_Prof4_3GXP8" nodeid="Prof4" description="Segment Profile  2" component="Profile"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Profile began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0SS1 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0SS1, "MININGRESULT", ' NAME="Mining Result Metadata"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package MININGRESULT began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack317I, Pack0SS1, rc, "NESTED_NAME", "MININGRESULT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3Q3F265 "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0SS1, "fileref:F3Q3F265", "BINARY", "text/xml", 'SXML', 'NAME=SCOREXML TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F01XFC54 "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\input.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0SS1, "fileref:F01XFC54", "BINARY", "text/xml", 'INPUTTABLE', 'NAME=INPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\input.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1H0RIPO "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\output.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0SS1, "fileref:F1H0RIPO", "BINARY", "text/xml", 'OUTPUTTABLE', 'NAME=OUTPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\output.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3E4WCHX "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof4_3GXP8\miningResult.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0SS1, "fileref:F3E4WCHX", "BINARY", "text/xml", 'MININGRESULT', 'NAME=MININGRESULT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof4_3GXP8\miningResult.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1TM_ = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1TM_, "File Import - Behaviour - Task 2", ' NAME="FIMPORT2"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package File Import - Behaviour - Task 2 began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0KR6LRJ "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT2_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1TM_, "fileref:F0KR6LRJ", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT2_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F14CV2PE "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1TM_, "fileref:F14CV2PE", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3GLK6GN "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1TM_, "fileref:F3GLK6GN", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1TM_, "work", "FIMPORT2_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F08_G6F0 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1TM_, "fileref:F08_G6F0", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1WCE6MH "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1TM_, "fileref:F1WCE6MH", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3NU70J9 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1TM_, "fileref:F3NU70J9", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2P7XCGN "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1TM_, "fileref:F2P7XCGN", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack317I, Pack1TM_, rc, "NESTED_NAME", "FIMPORT2");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack001T = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack001T, "Filter - No", ' NAME="Filter4"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Filter - No began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2OC0HKE "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Filter4_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack001T, "fileref:F2OC0HKE", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Filter4_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0FUKS1G "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack001T, "fileref:F0FUKS1G", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F22LZQTN "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack001T, "fileref:F22LZQTN", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack001T, "work", "Filter4_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2GV0J8A "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack001T, "fileref:F2GV0J8A", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F290BCPV "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack001T, "fileref:F290BCPV", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F09VC_NS "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack001T, "fileref:F09VC_NS", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3UTP5VK "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack001T, "fileref:F3UTP5VK", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3WEQW3I "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack001T, "fileref:F3WEQW3I", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack001T, "work", "Filter4_CLASS", "EXCLUDECLASS", "NAME=CLASS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file EXCLUDECLASS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack001T, "work", "Filter4_INTERVAL", "LIMITINTERVAL", "NAME=INTERVAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file LIMITINTERVAL inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack317I, Pack001T, rc, "NESTED_NAME", "Filter4");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0P9_ = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0P9_, "Cluster (2)", ' NAME="Clus"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Cluster (2) began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F059SLBQ "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0P9_, "fileref:F059SLBQ", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2Y9KVSW "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0P9_, "fileref:F2Y9KVSW", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F19OGINR "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0P9_, "fileref:F19OGINR", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0P9_, "work", "Clus_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0ZSJB6D "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0P9_, "fileref:F0ZSJB6D", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2XS3BTN "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0P9_, "fileref:F2XS3BTN", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2JJ12UQ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0P9_, "fileref:F2JJ12UQ", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3C_ZSD7 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0P9_, "fileref:F3C_ZSD7", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3GQ8J56 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0P9_, "fileref:F3GQ8J56", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F380MPTH "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0P9_, "fileref:F380MPTH", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0P9_, "work", "Clus_OUTMEAN", "CLUSMEAN", "NAME=OUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0P9_, "work", "Clus_OUTSTAT", "CLUSSTAT", "NAME=OUTSTAT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0P9_, "work", "Clus_INPUTMEAN", "INPUTMEAN", "NAME=INPUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file INPUTMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0P9_, "work", "Clus_TREE_PLOT", "TREE_PLOT", "NAME=TREE_PLOT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file TREE_PLOT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3A4423I "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\ENGLISHRULES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0P9_, "fileref:F3A4423I", "TEXT", "text/plain", 'ENGLISHRULES', 'NAME=EnglishRules TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\ENGLISHRULES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0P9_, "work", "Clus_OUTIMPORT", "IMPORTANCE", "NAME=OUTIMPORT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file IMPORTANCE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0P9_, "work", "Clus_PROFILE", "Segment Profiles", "NAME=PROFILE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file PROFILE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0_GN = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0_GN, "GRAPH", ' NAME="GRAPH"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package GRAPH began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0P9_, Pack0_GN, rc, "NESTED_NAME", "GRAPH");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1PSYV1E "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\GRAPH\Distance.gif";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0_GN, "fileref:F1PSYV1E", "BINARY", "image/gif", 'Distance', 'NAME="Distance" TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\GRAPH\Distance.gif inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0P9_, "work", "Clus_DISTANCE", "Distance Table", "NAME=DISTANCE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file DISTANCETABLE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack317I, Pack0P9_, rc, "NESTED_NAME", "Clus");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0TA_ = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0TA_, "Segment Profile (2)", ' NAME="Prof4"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Segment Profile (2) began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F37AK5AE "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof4_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0TA_, "fileref:F37AK5AE", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof4_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1J_0O8C "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0TA_, "fileref:F1J_0O8C", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1VI6YLY "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0TA_, "fileref:F1VI6YLY", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0TA_, "work", "Prof4_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1CGEB4W "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0TA_, "fileref:F1CGEB4W", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F22SZUBI "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0TA_, "fileref:F22SZUBI", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2BNIKLJ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0TA_, "fileref:F2BNIKLJ", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F18P2NW4 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0TA_, "fileref:F18P2NW4", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0ETCXYD "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0TA_, "fileref:F0ETCXYD", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0TA_, "work", "Prof4_SIZE", "Profileview", "NAME=SIZE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0TA_, "work", "Prof4_STATS", "Profileview", "NAME=STATS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0TA_, "work", "Prof4_CLASSDIST", "Profileview", "NAME=CLASSDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0TA_, "work", "Prof4_INTDIST", "Profileview", "NAME=INTDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0TA_, "work", "Prof4_WORTH", "profworth", "NAME=WORTH TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file profworth inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack317I, Pack0TA_, rc, "NESTED_NAME", "Prof4");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3RV5 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3RV5, "WORKSPACE", ' NAME="Workspace configuration"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package WORKSPACE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack317I, Pack3RV5, rc, "NESTED_NAME", "WORKSPACE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0CHKL9S "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\dsapi.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3RV5, "fileref:F0CHKL9S", "TEXT", "text/plain", 'Batch Code', 'NAME=BATCHCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\dsapi.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F15N7IB7 "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\dsapimeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3RV5, "fileref:F15N7IB7", "BINARY", "text/xml", 'Batch Metadata', 'NAME=BATCHMETADATA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\dsapimeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F16K8L6A "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\layout.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3RV5, "fileref:F16K8L6A", "BINARY", "text/xml", 'Properties', 'NAME=LAYOUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\layout.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0VU7P0D "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack317I, "fileref:F0VU7P0D", "TEXT", "text/plain", 'NODESTATUS', 'NAME=NODESTATUS TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0NH6 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0NH6, "PATHSCORE", ' NAME="Path score code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PATHSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack317I, Pack0NH6, rc, "NESTED_NAME", "PATHSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0DH_ = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0DH_, "SASSCORE", ' NAME="SAS Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package SASSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0NH6, Pack0DH_, rc, "NESTED_NAME", "SASSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3A009UO "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2LRNR1Xscore.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0DH_, "fileref:F3A009UO", "TEXT", "text/plain", 'SASCODE', 'NAME=SASCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2LRNR1Xscore.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0RDR = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0RDR, "PMMLSCORE", ' NAME="PMML Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PMMLSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0NH6, Pack0RDR, rc, "NESTED_NAME", "PMMLSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   pubType = "TO_ARCHIVE";
MPRINT(EM_DIAGRAM):   properties='archive_path, archive_name';
MPRINT(EM_DIAGRAM):   path = "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof4_3GXP8";
MPRINT(EM_DIAGRAM):   name = "miningResult";
MPRINT(EM_DIAGRAM):   call package_publish(Pack317I, pubType, rc, properties, path, name);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Publish package Pack317I successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call package_end(Pack317I, rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Pack317I ended successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
Package Profile began successfully.
Package MININGRESULT began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\input.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\output.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof4_3GXP8\miningResult.xml inserted successfully.
Package File Import - Behaviour - Task 2 began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT2_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMTRAINCODE.sas inserted successfully.
spk_PACKAGEINSERT_note
Package Filter - No began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Filter4_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter4\EMPUBLISHSCORE.sas inserted successfully.
CSV file EXCLUDECLASS inserted successfully.
CSV file LIMITINTERVAL inserted successfully.
spk_PACKAGEINSERT_note
Package Cluster (2) began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMFLOWSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\EMPUBLISHSCORE.sas inserted successfully.
CSV file CLUSMEAN inserted successfully.
CSV file CLUSSTAT inserted successfully.
CSV file INPUTMEAN inserted successfully.
CSV file TREE_PLOT inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\ENGLISHRULES.txt inserted successfully.
CSV file IMPORTANCE inserted successfully.
CSV file PROFILE inserted successfully.
Package GRAPH began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus\GRAPH\Distance.gif inserted successfully.
CSV file DISTANCETABLE inserted successfully.
spk_PACKAGEINSERT_note
Package Segment Profile (2) began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof4_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof4\EMCUSTOMGRAPH.xml inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file profworth inserted successfully.
spk_PACKAGEINSERT_note
Package WORKSPACE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\dsapi.sas inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\dsapimeta.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1P2D02H\layout.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out inserted successfully.
Package PATHSCORE began successfully.
spk_PACKAGEINSERT_note
Package SASSCORE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2LRNR1Xscore.sas inserted successfully.
Package PMMLSCORE began successfully.
spk_PACKAGEINSERT_note
Publish package Pack317I successfully.
Package Pack317I ended successfully.
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   filename F3Q3F265;
MPRINT(EM_DIAGRAM):   filename F01XFC54;
MPRINT(EM_DIAGRAM):   filename F1H0RIPO;
MPRINT(EM_DIAGRAM):   filename F3E4WCHX;
MPRINT(EM_DIAGRAM):   filename F0KR6LRJ;
MPRINT(EM_DIAGRAM):   filename F14CV2PE;
MPRINT(EM_DIAGRAM):   filename F3GLK6GN;
MPRINT(EM_DIAGRAM):   filename F08_G6F0;
MPRINT(EM_DIAGRAM):   filename F1WCE6MH;
MPRINT(EM_DIAGRAM):   filename F3NU70J9;
MPRINT(EM_DIAGRAM):   filename F2P7XCGN;
MPRINT(EM_DIAGRAM):   filename F2OC0HKE;
MPRINT(EM_DIAGRAM):   filename F0FUKS1G;
MPRINT(EM_DIAGRAM):   filename F22LZQTN;
MPRINT(EM_DIAGRAM):   filename F2GV0J8A;
MPRINT(EM_DIAGRAM):   filename F290BCPV;
MPRINT(EM_DIAGRAM):   filename F09VC_NS;
MPRINT(EM_DIAGRAM):   filename F3UTP5VK;
MPRINT(EM_DIAGRAM):   filename F3WEQW3I;
MPRINT(EM_DIAGRAM):   filename F059SLBQ;
MPRINT(EM_DIAGRAM):   filename F2Y9KVSW;
MPRINT(EM_DIAGRAM):   filename F19OGINR;
MPRINT(EM_DIAGRAM):   filename F0ZSJB6D;
MPRINT(EM_DIAGRAM):   filename F2XS3BTN;
MPRINT(EM_DIAGRAM):   filename F2JJ12UQ;
MPRINT(EM_DIAGRAM):   filename F3C_ZSD7;
MPRINT(EM_DIAGRAM):   filename F3GQ8J56;
MPRINT(EM_DIAGRAM):   filename F380MPTH;
MPRINT(EM_DIAGRAM):   filename F3A4423I;
MPRINT(EM_DIAGRAM):   filename F1PSYV1E;
MPRINT(EM_DIAGRAM):   filename F37AK5AE;
MPRINT(EM_DIAGRAM):   filename F1J_0O8C;
MPRINT(EM_DIAGRAM):   filename F1VI6YLY;
MPRINT(EM_DIAGRAM):   filename F1CGEB4W;
MPRINT(EM_DIAGRAM):   filename F22SZUBI;
MPRINT(EM_DIAGRAM):   filename F2BNIKLJ;
MPRINT(EM_DIAGRAM):   filename F18P2NW4;
MPRINT(EM_DIAGRAM):   filename F0ETCXYD;
MPRINT(EM_DIAGRAM):   filename F0CHKL9S;
MPRINT(EM_DIAGRAM):   filename F15N7IB7;
MPRINT(EM_DIAGRAM):   filename F16K8L6A;
MPRINT(EM_DIAGRAM):   filename F0VU7P0D;
MPRINT(EM_DIAGRAM):   filename F3A009UO;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options notes source;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
98689      %let eminfo= %str();
98690      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
98691      set EMWS1.Prof3_ExportSet;
MPRINT(EM_DIAGRAM):   set EMWS1.Prof3_ExportSet;
98692      where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
MPRINT(EM_DIAGRAM):   where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
98693      call symput('eminfo', strip(eminfo));
MPRINT(EM_DIAGRAM):   call symput('eminfo', strip(eminfo));
98694      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.PROF3_EXPORTSET.
      WHERE (eminfo not = ' ') and NODEPORT in ('DATA', 'TRAIN');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Retrieving Score Code FIMPORT2 
Traverser: WaitingNode "CLUS4" 
Traverser: WaitingNode "PROF3" 
traverser_readyNode_note 
Retrieving Score Code Filter3 
Traverser: WaitingNode "PROF3" 
traverser_readyNode_note 
Retrieving Score Code Clus4 
traverser_readyNode_note 
Retrieving Score Code Prof3 
98695      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
98696      * Report: Determine If validvarname ANY variables are score inputs;
MPRINT(EM_DIAGRAM):   * Report: Determine If validvarname ANY variables are score inputs;
98697      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
98698      filename _pref "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2EEFO7Pscore.sas";
MPRINT(EM_DIAGRAM):   filename _pref "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2EEFO7Pscore.sas";
98699      proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
98700      %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   * EM Version: 14.1;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M3P062415;
MPRINT(EM_DIAGRAM):   * Host: ba-teaching;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(EM_DIAGRAM):   * Project Name: 20161277_CAassignment2;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: All Tasks;
MPRINT(EM_DIAGRAM):   * Generated by: 20161277;
MPRINT(EM_DIAGRAM):   * Date: 28SEP2020:04:23:22;
MPRINT(EM_DIAGRAM):   * Macro variable identifying the scored data set;
MPRINT(EM_DIAGRAM):   *%let EM_SCORE_OUTPUT=;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Filtering;
MPRINT(EM_DIAGRAM):   * TYPE: MODIFY;
MPRINT(EM_DIAGRAM):   * NODE: Filter3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Clustering;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Clus4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize Number_of_Contacts ;
MPRINT(EM_DIAGRAM):   drop T_Number_of_Contacts ;
MPRINT(EM_DIAGRAM):   if missing( Number_of_Contacts ) then T_Number_of_Contacts = .;
MPRINT(EM_DIAGRAM):   else T_Number_of_Contacts = (Number_of_Contacts - 2.05753875058713) * 0.60535013478507;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Contact_Type ;
MPRINT(EM_DIAGRAM):   drop Contact_Typecellular Contact_Typetelephone ;
MPRINT(EM_DIAGRAM):   if missing( Contact_Type ) then do;
MPRINT(EM_DIAGRAM):   Contact_Typecellular = .;
MPRINT(EM_DIAGRAM):   Contact_Typetelephone = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm11 $ 11;
MPRINT(EM_DIAGRAM):   drop _dm11 ;
MPRINT(EM_DIAGRAM):   _dm11 = put( Contact_Type , $11. );
MPRINT(DMNORMIP):   call dmnorm(_dm11,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm11 = 'CELLULAR' then do;
MPRINT(EM_DIAGRAM):   Contact_Typecellular = 0.31974844293148;
MPRINT(EM_DIAGRAM):   Contact_Typetelephone = -0.31974844293148;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'TELEPHONE' then do;
MPRINT(EM_DIAGRAM):   Contact_Typecellular = -1.56336202733443;
MPRINT(EM_DIAGRAM):   Contact_Typetelephone = 1.56336202733443;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Contact_Typecellular = .;
MPRINT(EM_DIAGRAM):   Contact_Typetelephone = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Mortage ;
MPRINT(EM_DIAGRAM):   drop Mortageno Mortageyes ;
MPRINT(EM_DIAGRAM):   if missing( Mortage ) then do;
MPRINT(EM_DIAGRAM):   Mortageno = .;
MPRINT(EM_DIAGRAM):   Mortageyes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
MPRINT(EM_DIAGRAM):   _dm5 = put( Mortage , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm5 = 'YES' then do;
MPRINT(EM_DIAGRAM):   Mortageno = -0.63677063966891;
MPRINT(EM_DIAGRAM):   Mortageyes = 0.63677063966891;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'NO' then do;
MPRINT(EM_DIAGRAM):   Mortageno = 0.78502767376068;
MPRINT(EM_DIAGRAM):   Mortageyes = -0.78502767376068;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Mortageno = .;
MPRINT(EM_DIAGRAM):   Mortageyes = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Personal_Loan ;
MPRINT(EM_DIAGRAM):   drop Personal_Loanno Personal_Loanyes ;
MPRINT(EM_DIAGRAM):   if missing( Personal_Loan ) then do;
MPRINT(EM_DIAGRAM):   Personal_Loanno = .;
MPRINT(EM_DIAGRAM):   Personal_Loanyes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
MPRINT(EM_DIAGRAM):   _dm5 = put( Personal_Loan , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm5 = 'NO' then do;
MPRINT(EM_DIAGRAM):   Personal_Loanno = 0.29709143824442;
MPRINT(EM_DIAGRAM):   Personal_Loanyes = -0.29709143824442;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'YES' then do;
MPRINT(EM_DIAGRAM):   Personal_Loanno = -1.68258828639526;
MPRINT(EM_DIAGRAM):   Personal_Loanyes = 1.68258828639526;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Personal_Loanno = .;
MPRINT(EM_DIAGRAM):   Personal_Loanyes = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUS4vlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUS4vads [5] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 5;
MPRINT(EM_DIAGRAM):   CLUS4vads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_Number_of_Contacts ) then do;
MPRINT(EM_DIAGRAM):   CLUS4vads [1] + ( T_Number_of_Contacts - 5.48744462894261 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [2] + ( T_Number_of_Contacts - 1.67977327486081 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [3] + ( T_Number_of_Contacts - 1.91307775913265 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [4] + ( T_Number_of_Contacts - -0.29140715709053 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [5] + ( T_Number_of_Contacts - -0.26221636642769 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( Contact_Typecellular ) then do;
MPRINT(EM_DIAGRAM):   CLUS4vads [1] + ( Contact_Typecellular - -0.56416055331578 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [2] + ( Contact_Typecellular - 0.31974844293148 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [3] + ( Contact_Typecellular - -1.56336202733443 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [4] + ( Contact_Typecellular - 0.31974844293145 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [5] + ( Contact_Typecellular - -1.56336202733441 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Contact_Typetelephone ) then do;
MPRINT(EM_DIAGRAM):   CLUS4vads [1] + ( Contact_Typetelephone - 0.56416055331578 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [2] + ( Contact_Typetelephone - -0.31974844293148 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [3] + ( Contact_Typetelephone - 1.56336202733443 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [4] + ( Contact_Typetelephone - -0.31974844293145 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [5] + ( Contact_Typetelephone - 1.56336202733441 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Mortageno ) then do;
MPRINT(EM_DIAGRAM):   CLUS4vads [1] + ( Mortageno - 0.03060407887967 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [2] + ( Mortageno - -0.03914662330977 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [3] + ( Mortageno - 0.15155317767818 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [4] + ( Mortageno - -0.01560978667932 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [5] + ( Mortageno - 0.07768894687918 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( Mortageyes ) then do;
MPRINT(EM_DIAGRAM):   CLUS4vads [1] + ( Mortageyes - -0.03060407887967 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [2] + ( Mortageyes - 0.03914662330977 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [3] + ( Mortageyes - -0.15155317767818 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [4] + ( Mortageyes - 0.01560978667932 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [5] + ( Mortageyes - -0.07768894687918 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.49999999999999;
MPRINT(EM_DIAGRAM):   if not missing( Personal_Loanno ) then do;
MPRINT(EM_DIAGRAM):   CLUS4vads [1] + ( Personal_Loanno - 0.13548493011057 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [2] + ( Personal_Loanno - -0.04554543717398 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [3] + ( Personal_Loanno - -0.09492434881293 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [4] + ( Personal_Loanno - 0.00124105014246 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [5] + ( Personal_Loanno - 0.02608352936219 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Personal_Loanyes ) then do;
MPRINT(EM_DIAGRAM):   CLUS4vads [1] + ( Personal_Loanyes - -0.13548493011057 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [2] + ( Personal_Loanyes - 0.04554543717398 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [3] + ( Personal_Loanyes - 0.09492434881293 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [4] + ( Personal_Loanyes - -0.00124105014246 )**2;
MPRINT(EM_DIAGRAM):   CLUS4vads [5] + ( Personal_Loanyes - -0.02608352936219 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   _vqnvar = 4 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 3.1832314562052E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUS4vads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 5;
MPRINT(EM_DIAGRAM):   if CLUS4vads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUS4vads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (4 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUS4vlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus4: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Prof3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
98931      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
98932      quit;
98933      filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
98934      proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
MPRINT(EM_DIAGRAM):    proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
98935      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
98936      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 195 observations read from the data set WORK._TEMP.
NOTE: 172 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 23 observations and 1 variables.
NOTE: Compressing data set WORK._TEMP increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Determine output variables meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.FIMPORT2_DATA noprint out=_originalvar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\DROPINPUT.sas";
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _drpfrf;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT2_DATA;
MPRINT(EM_DIAGRAM):   drop 'Age'n 'Career'n 'Contact_Type'n 'Cus_ID'n 'Education'n 'Marital_Statues'n 'Mortage'n 'Number_of_Contacts'n 'Personal_Loan'n 'Subscribed'n 'VAR1'n ;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf;
MPRINT(EM_DIAGRAM):   proc contents data =WORK.SCORE_OUTPUTMETA noprint out=WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   length role $32 name_prefix $8;
MPRINT(EM_DIAGRAM):   set WORK.SCORE_OUTPUTMETA(keep=name type length label format informat rename=(type=itype)) end=_eof;
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   else type = 'C';
MPRINT(EM_DIAGRAM):   drop name_prefix itype;
MPRINT(EM_DIAGRAM):   if name = '_WARN_' then do;
MPRINT(EM_DIAGRAM):   role = 'ASSESS';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   name_prefix = scan(NAME, 1, '_');
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then role = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   else if name_prefix ='P' then role = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix ='R' then role = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then role = 'DECISION';
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then role = 'ASSESS';
MPRINT(EM_DIAGRAM):   else role = 'TRANSFORM';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if _eof then call symput('NumOutputVars', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   run;
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _tempFmt;
MPRINT(EM_DIAGRAM):   length format $33;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_tempFmt;
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne '')) out=temp2(rename=(fmtname=format));
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data temp2;
MPRINT(EM_DIAGRAM):   merge temp2(in=_a) _tempFmt(in=_b);
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable format by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   proc sort data=temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   if first.libname and first.memname then do;
MPRINT(EM_DIAGRAM):   call execute("proc format lib="!!libname!!'.'!!memname!!"cntlout=work._fmtout;");
MPRINT(EM_DIAGRAM):   call execute("select");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call execute (format);
MPRINT(EM_DIAGRAM):   if last.libname and last.memname then do;
MPRINT(EM_DIAGRAM):   call execute(";");
MPRINT(EM_DIAGRAM):   call execute("proc append base=WORK._EMFORMAT data=work._fmtout force;");
MPRINT(EM_DIAGRAM):   call execute("run;");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK._EMFORMAT nodupkey;
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   where fmtname ne '_EMFMT';
MPRINT(EM_DIAGRAM):   run;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
MPRINT(EM_DIAGRAM):    options mprint;
MPRINT(EM_DIAGRAM):   filename _code "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2EEFO7Pscore.sas";
MPRINT(EM_DIAGRAM):   filename _xml "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml";




MPRINT(SCOREXML):   PROC FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK._alldeps;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(SCOREXML):   * Project Name: 20161277_CAassignment2;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: All Tasks;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 28SEP2020:04:23:22;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Filtering;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Filter3;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus4;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Number_of_Contacts ;
MPRINT(SCOREXML):   drop T_Number_of_Contacts ;
MPRINT(SCOREXML):   if missing( Number_of_Contacts ) then T_Number_of_Contacts = .;
MPRINT(SCOREXML):   else T_Number_of_Contacts = (Number_of_Contacts - 2.05753875058713) * 0.60535013478507;
MPRINT(SCOREXML):   *** Generate dummy variables for Contact_Type ;
MPRINT(SCOREXML):   drop Contact_Typecellular Contact_Typetelephone ;
MPRINT(SCOREXML):   if missing( Contact_Type ) then do;
MPRINT(SCOREXML):   Contact_Typecellular = .;
MPRINT(SCOREXML):   Contact_Typetelephone = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm11 $ 11;
MPRINT(SCOREXML):   drop _dm11 ;
MPRINT(SCOREXML):   _dm11 = put( Contact_Type , $11. );
MPRINT(DMNORMIP):   call dmnorm(_dm11,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm11 = 'CELLULAR' then do;
MPRINT(SCOREXML):   Contact_Typecellular = 0.31974844293148;
MPRINT(SCOREXML):   Contact_Typetelephone = -0.31974844293148;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm11 = 'TELEPHONE' then do;
MPRINT(SCOREXML):   Contact_Typecellular = -1.56336202733443;
MPRINT(SCOREXML):   Contact_Typetelephone = 1.56336202733443;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Contact_Typecellular = .;
MPRINT(SCOREXML):   Contact_Typetelephone = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Mortage ;
MPRINT(SCOREXML):   drop Mortageno Mortageyes ;
MPRINT(SCOREXML):   if missing( Mortage ) then do;
MPRINT(SCOREXML):   Mortageno = .;
MPRINT(SCOREXML):   Mortageyes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm5 $ 5;
MPRINT(SCOREXML):   drop _dm5 ;
MPRINT(SCOREXML):   _dm5 = put( Mortage , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm5 = 'YES' then do;
MPRINT(SCOREXML):   Mortageno = -0.63677063966891;
MPRINT(SCOREXML):   Mortageyes = 0.63677063966891;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm5 = 'NO' then do;
MPRINT(SCOREXML):   Mortageno = 0.78502767376068;
MPRINT(SCOREXML):   Mortageyes = -0.78502767376068;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Mortageno = .;
MPRINT(SCOREXML):   Mortageyes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Personal_Loan ;
MPRINT(SCOREXML):   drop Personal_Loanno Personal_Loanyes ;
MPRINT(SCOREXML):   if missing( Personal_Loan ) then do;
MPRINT(SCOREXML):   Personal_Loanno = .;
MPRINT(SCOREXML):   Personal_Loanyes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm5 $ 5;
MPRINT(SCOREXML):   drop _dm5 ;
MPRINT(SCOREXML):   _dm5 = put( Personal_Loan , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm5 = 'NO' then do;
MPRINT(SCOREXML):   Personal_Loanno = 0.29709143824442;
MPRINT(SCOREXML):   Personal_Loanyes = -0.29709143824442;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm5 = 'YES' then do;
MPRINT(SCOREXML):   Personal_Loanno = -1.68258828639526;
MPRINT(SCOREXML):   Personal_Loanyes = 1.68258828639526;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Personal_Loanno = .;
MPRINT(SCOREXML):   Personal_Loanyes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUS4vlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUS4vads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUS4vads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Number_of_Contacts ) then do;
MPRINT(SCOREXML):   CLUS4vads [1] + ( T_Number_of_Contacts - 5.48744462894261 )**2;
MPRINT(SCOREXML):   CLUS4vads [2] + ( T_Number_of_Contacts - 1.67977327486081 )**2;
MPRINT(SCOREXML):   CLUS4vads [3] + ( T_Number_of_Contacts - 1.91307775913265 )**2;
MPRINT(SCOREXML):   CLUS4vads [4] + ( T_Number_of_Contacts - -0.29140715709053 )**2;
MPRINT(SCOREXML):   CLUS4vads [5] + ( T_Number_of_Contacts - -0.26221636642769 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( Contact_Typecellular ) then do;
MPRINT(SCOREXML):   CLUS4vads [1] + ( Contact_Typecellular - -0.56416055331578 )**2;
MPRINT(SCOREXML):   CLUS4vads [2] + ( Contact_Typecellular - 0.31974844293148 )**2;
MPRINT(SCOREXML):   CLUS4vads [3] + ( Contact_Typecellular - -1.56336202733443 )**2;
MPRINT(SCOREXML):   CLUS4vads [4] + ( Contact_Typecellular - 0.31974844293145 )**2;
MPRINT(SCOREXML):   CLUS4vads [5] + ( Contact_Typecellular - -1.56336202733441 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Contact_Typetelephone ) then do;
MPRINT(SCOREXML):   CLUS4vads [1] + ( Contact_Typetelephone - 0.56416055331578 )**2;
MPRINT(SCOREXML):   CLUS4vads [2] + ( Contact_Typetelephone - -0.31974844293148 )**2;
MPRINT(SCOREXML):   CLUS4vads [3] + ( Contact_Typetelephone - 1.56336202733443 )**2;
MPRINT(SCOREXML):   CLUS4vads [4] + ( Contact_Typetelephone - -0.31974844293145 )**2;
MPRINT(SCOREXML):   CLUS4vads [5] + ( Contact_Typetelephone - 1.56336202733441 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Mortageno ) then do;
MPRINT(SCOREXML):   CLUS4vads [1] + ( Mortageno - 0.03060407887967 )**2;
MPRINT(SCOREXML):   CLUS4vads [2] + ( Mortageno - -0.03914662330977 )**2;
MPRINT(SCOREXML):   CLUS4vads [3] + ( Mortageno - 0.15155317767818 )**2;
MPRINT(SCOREXML):   CLUS4vads [4] + ( Mortageno - -0.01560978667932 )**2;
MPRINT(SCOREXML):   CLUS4vads [5] + ( Mortageno - 0.07768894687918 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.49999999999999;
MPRINT(SCOREXML):   if not missing( Mortageyes ) then do;
MPRINT(SCOREXML):   CLUS4vads [1] + ( Mortageyes - -0.03060407887967 )**2;
MPRINT(SCOREXML):   CLUS4vads [2] + ( Mortageyes - 0.03914662330977 )**2;
MPRINT(SCOREXML):   CLUS4vads [3] + ( Mortageyes - -0.15155317767818 )**2;
MPRINT(SCOREXML):   CLUS4vads [4] + ( Mortageyes - 0.01560978667932 )**2;
MPRINT(SCOREXML):   CLUS4vads [5] + ( Mortageyes - -0.07768894687918 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.49999999999999;
MPRINT(SCOREXML):   if not missing( Personal_Loanno ) then do;
MPRINT(SCOREXML):   CLUS4vads [1] + ( Personal_Loanno - 0.13548493011057 )**2;
MPRINT(SCOREXML):   CLUS4vads [2] + ( Personal_Loanno - -0.04554543717398 )**2;
MPRINT(SCOREXML):   CLUS4vads [3] + ( Personal_Loanno - -0.09492434881293 )**2;
MPRINT(SCOREXML):   CLUS4vads [4] + ( Personal_Loanno - 0.00124105014246 )**2;
MPRINT(SCOREXML):   CLUS4vads [5] + ( Personal_Loanno - 0.02608352936219 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Personal_Loanyes ) then do;
MPRINT(SCOREXML):   CLUS4vads [1] + ( Personal_Loanyes - -0.13548493011057 )**2;
MPRINT(SCOREXML):   CLUS4vads [2] + ( Personal_Loanyes - 0.04554543717398 )**2;
MPRINT(SCOREXML):   CLUS4vads [3] + ( Personal_Loanyes - 0.09492434881293 )**2;
MPRINT(SCOREXML):   CLUS4vads [4] + ( Personal_Loanyes - -0.00124105014246 )**2;
MPRINT(SCOREXML):   CLUS4vads [5] + ( Personal_Loanyes - -0.02608352936219 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   _vqnvar = 4 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 3.1832314562052E-12 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUS4vads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUS4vads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUS4vads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (4 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUS4vlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus4: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof3;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   QUIT;
MPRINT(SCOREXML):   Data _NULL_;
MPRINT(SCOREXML):   numobs=0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._alldeps","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numobs= attrn(dsid,"nlobs");
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open dependency data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if numobs <= 0 then do;
MPRINT(SCOREXML):   put "WARNING: ScoreXML: No variable dependencies found in code.";
MPRINT(SCOREXML):   call symput('SYSCC','4');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Rhs (keep=rhs RHS_NLiteral UNAME);
MPRINT(SCOREXML):   Set WORK._alldeps;
MPRINT(SCOREXML):   Length UNAME $32;
MPRINT(SCOREXML):   LABEL rhs = ;
MPRINT(SCOREXML):   LABEL RHS_NLiteral = ;
MPRINT(SCOREXML):   if RHS_Dropped = 0 AND (1 NE index(rhs, '_OLD_')) then do;
MPRINT(SCOREXML):   UNAME = UPCASE(rhs);
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Proc Sort Data=WORK._Rhs NODUP out=WORK._Rhs (rename=(rhs=NAME RHS_NLiteral=NLITERAL));
MPRINT(SCOREXML):   By UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Indatavmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("EMWS1.FIMPORT2_DATA","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   NAME = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open input data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Indatavmeta NODUP Out=Work._Indatavmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   dsid = open("EMWS1.FIMPORT2_DATA");
MPRINT(SCOREXML):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   call symput('_engineTable', upcase(attrc(dsid, 'ENGINE')));
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Progout;
MPRINT(SCOREXML):   Set EMWS1.FIMPORT2_DATA;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(SCOREXML):   * Project Name: 20161277_CAassignment2;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: All Tasks;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 28SEP2020:04:23:22;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT2;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Filtering;
MPRINT(SCOREXML):   * TYPE: MODIFY;
MPRINT(SCOREXML):   * NODE: Filter3;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus4;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Number_of_Contacts ;
MPRINT(SCOREXML):   drop T_Number_of_Contacts ;
MPRINT(SCOREXML):   if missing( Number_of_Contacts ) then T_Number_of_Contacts = .;
MPRINT(SCOREXML):   else T_Number_of_Contacts = (Number_of_Contacts - 2.05753875058713) * 0.60535013478507;
MPRINT(SCOREXML):   *** Generate dummy variables for Contact_Type ;
MPRINT(SCOREXML):   drop Contact_Typecellular Contact_Typetelephone ;
MPRINT(SCOREXML):   if missing( Contact_Type ) then do;
MPRINT(SCOREXML):   Contact_Typecellular = .;
MPRINT(SCOREXML):   Contact_Typetelephone = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm11 $ 11;
MPRINT(SCOREXML):   drop _dm11 ;
MPRINT(SCOREXML):   _dm11 = put( Contact_Type , $11. );
MPRINT(DMNORMIP):   call dmnorm(_dm11,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm11 = 'CELLULAR' then do;
MPRINT(SCOREXML):   Contact_Typecellular = 0.31974844293148;
MPRINT(SCOREXML):   Contact_Typetelephone = -0.31974844293148;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm11 = 'TELEPHONE' then do;
MPRINT(SCOREXML):   Contact_Typecellular = -1.56336202733443;
MPRINT(SCOREXML):   Contact_Typetelephone = 1.56336202733443;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Contact_Typecellular = .;
MPRINT(SCOREXML):   Contact_Typetelephone = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Mortage ;
MPRINT(SCOREXML):   drop Mortageno Mortageyes ;
MPRINT(SCOREXML):   if missing( Mortage ) then do;
MPRINT(SCOREXML):   Mortageno = .;
MPRINT(SCOREXML):   Mortageyes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm5 $ 5;
MPRINT(SCOREXML):   drop _dm5 ;
MPRINT(SCOREXML):   _dm5 = put( Mortage , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm5 = 'YES' then do;
MPRINT(SCOREXML):   Mortageno = -0.63677063966891;
MPRINT(SCOREXML):   Mortageyes = 0.63677063966891;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm5 = 'NO' then do;
MPRINT(SCOREXML):   Mortageno = 0.78502767376068;
MPRINT(SCOREXML):   Mortageyes = -0.78502767376068;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Mortageno = .;
MPRINT(SCOREXML):   Mortageyes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Personal_Loan ;
MPRINT(SCOREXML):   drop Personal_Loanno Personal_Loanyes ;
MPRINT(SCOREXML):   if missing( Personal_Loan ) then do;
MPRINT(SCOREXML):   Personal_Loanno = .;
MPRINT(SCOREXML):   Personal_Loanyes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm5 $ 5;
MPRINT(SCOREXML):   drop _dm5 ;
MPRINT(SCOREXML):   _dm5 = put( Personal_Loan , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm5 = 'NO' then do;
MPRINT(SCOREXML):   Personal_Loanno = 0.29709143824442;
MPRINT(SCOREXML):   Personal_Loanyes = -0.29709143824442;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm5 = 'YES' then do;
MPRINT(SCOREXML):   Personal_Loanno = -1.68258828639526;
MPRINT(SCOREXML):   Personal_Loanyes = 1.68258828639526;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Personal_Loanno = .;
MPRINT(SCOREXML):   Personal_Loanyes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUS4vlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUS4vads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUS4vads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Number_of_Contacts ) then do;
MPRINT(SCOREXML):   CLUS4vads [1] + ( T_Number_of_Contacts - 5.48744462894261 )**2;
MPRINT(SCOREXML):   CLUS4vads [2] + ( T_Number_of_Contacts - 1.67977327486081 )**2;
MPRINT(SCOREXML):   CLUS4vads [3] + ( T_Number_of_Contacts - 1.91307775913265 )**2;
MPRINT(SCOREXML):   CLUS4vads [4] + ( T_Number_of_Contacts - -0.29140715709053 )**2;
MPRINT(SCOREXML):   CLUS4vads [5] + ( T_Number_of_Contacts - -0.26221636642769 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( Contact_Typecellular ) then do;
MPRINT(SCOREXML):   CLUS4vads [1] + ( Contact_Typecellular - -0.56416055331578 )**2;
MPRINT(SCOREXML):   CLUS4vads [2] + ( Contact_Typecellular - 0.31974844293148 )**2;
MPRINT(SCOREXML):   CLUS4vads [3] + ( Contact_Typecellular - -1.56336202733443 )**2;
MPRINT(SCOREXML):   CLUS4vads [4] + ( Contact_Typecellular - 0.31974844293145 )**2;
MPRINT(SCOREXML):   CLUS4vads [5] + ( Contact_Typecellular - -1.56336202733441 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Contact_Typetelephone ) then do;
MPRINT(SCOREXML):   CLUS4vads [1] + ( Contact_Typetelephone - 0.56416055331578 )**2;
MPRINT(SCOREXML):   CLUS4vads [2] + ( Contact_Typetelephone - -0.31974844293148 )**2;
MPRINT(SCOREXML):   CLUS4vads [3] + ( Contact_Typetelephone - 1.56336202733443 )**2;
MPRINT(SCOREXML):   CLUS4vads [4] + ( Contact_Typetelephone - -0.31974844293145 )**2;
MPRINT(SCOREXML):   CLUS4vads [5] + ( Contact_Typetelephone - 1.56336202733441 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Mortageno ) then do;
MPRINT(SCOREXML):   CLUS4vads [1] + ( Mortageno - 0.03060407887967 )**2;
MPRINT(SCOREXML):   CLUS4vads [2] + ( Mortageno - -0.03914662330977 )**2;
MPRINT(SCOREXML):   CLUS4vads [3] + ( Mortageno - 0.15155317767818 )**2;
MPRINT(SCOREXML):   CLUS4vads [4] + ( Mortageno - -0.01560978667932 )**2;
MPRINT(SCOREXML):   CLUS4vads [5] + ( Mortageno - 0.07768894687918 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.49999999999999;
MPRINT(SCOREXML):   if not missing( Mortageyes ) then do;
MPRINT(SCOREXML):   CLUS4vads [1] + ( Mortageyes - -0.03060407887967 )**2;
MPRINT(SCOREXML):   CLUS4vads [2] + ( Mortageyes - 0.03914662330977 )**2;
MPRINT(SCOREXML):   CLUS4vads [3] + ( Mortageyes - -0.15155317767818 )**2;
MPRINT(SCOREXML):   CLUS4vads [4] + ( Mortageyes - 0.01560978667932 )**2;
MPRINT(SCOREXML):   CLUS4vads [5] + ( Mortageyes - -0.07768894687918 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.49999999999999;
MPRINT(SCOREXML):   if not missing( Personal_Loanno ) then do;
MPRINT(SCOREXML):   CLUS4vads [1] + ( Personal_Loanno - 0.13548493011057 )**2;
MPRINT(SCOREXML):   CLUS4vads [2] + ( Personal_Loanno - -0.04554543717398 )**2;
MPRINT(SCOREXML):   CLUS4vads [3] + ( Personal_Loanno - -0.09492434881293 )**2;
MPRINT(SCOREXML):   CLUS4vads [4] + ( Personal_Loanno - 0.00124105014246 )**2;
MPRINT(SCOREXML):   CLUS4vads [5] + ( Personal_Loanno - 0.02608352936219 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Personal_Loanyes ) then do;
MPRINT(SCOREXML):   CLUS4vads [1] + ( Personal_Loanyes - -0.13548493011057 )**2;
MPRINT(SCOREXML):   CLUS4vads [2] + ( Personal_Loanyes - 0.04554543717398 )**2;
MPRINT(SCOREXML):   CLUS4vads [3] + ( Personal_Loanyes - 0.09492434881293 )**2;
MPRINT(SCOREXML):   CLUS4vads [4] + ( Personal_Loanyes - -0.00124105014246 )**2;
MPRINT(SCOREXML):   CLUS4vads [5] + ( Personal_Loanyes - -0.02608352936219 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   _vqnvar = 4 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 3.1832314562052E-12 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUS4vads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUS4vads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUS4vads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (4 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUS4vlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus4: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof3;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if _N_=1 then do;
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   stop;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Varsmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._Progout","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   Name = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open program output.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Varsmeta NODUP Out=Work._Varsmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Invarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Rhs (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   if (a and b) then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Outvarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Varsmeta (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   If a and not b then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   LENGTH strbuf $ 80;
MPRINT(SCOREXML):   strbuf = ' ';
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '<?xml version="1.0" encoding="utf-8"?>';
MPRINT(SCOREXML):   put '<Score>';
MPRINT(SCOREXML):   put @3 '<Producer>';
MPRINT(SCOREXML):   put @6 "<Name> SAS Enterprise Miner </Name>";
MPRINT(SCOREXML):   strbuf = '<Version> ' || "6.2" || ' </Version>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   syslocale = getpxlocale();
MPRINT(SCOREXML):   strbuf = '<Locale> '|| strip(syslocale) ||' </Locale>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   sysencode = getpxencoding('sas12');
MPRINT(SCOREXML):   strbuf = '<Encoding> '|| strip(sysencode) ||' </Encoding>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   put @3 '</Producer>';
MPRINT(SCOREXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(SCOREXML):   put @3 '<CFunction>';
MPRINT(SCOREXML):   put @6 '<Name> score </Name>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="input">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "4" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="output">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "3" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @3 '</CFunction>';
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Invarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = ' <Input count="' || "4" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "4" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Outvarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = ' <Input count="' || "3" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "3" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '</Score>';
MPRINT(SCOREXML):   Run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _code;
MPRINT(EM_DIAGRAM):   filename _xml;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Input table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc sort data=work._invarsmeta out=_inpckgtemp(keep=NAME);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.FIMPORT2_EMCMETADEFAULT out=_inpckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\input.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.input;
MPRINT(EM_DIAGRAM):   merge _inpckgtemp(in=_a) _inpckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=work._progout out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('work._progout');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set work._progout;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=work._progout out=WORK.M1C68X66 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1C68X66;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1C68X66(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1C68X66;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1C68X66;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0A85FZW NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0A85FZW;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0A85FZW;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M257NKDD(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0A85FZW;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0A85FZW;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0A85FZW;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0A85FZW;
MPRINT(EMADVISECOLUMNS):   set WORK.M0A85FZW;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=work._empckgtemp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_outvarsmeta(keep=NAME LABEL) out=work._empckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\output.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.output;
MPRINT(EM_DIAGRAM):   merge work._empckgtemp(in=_a) work._empckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    proc datasets library=WORK NOLIST NOWARN NODETAILS;
MPRINT(EM_DIAGRAM):   delete _alldeps _Indatavmeta _Keepvars _Keepnames _Invarsmeta _Progout _Outvarsmeta _Rhs _Varsmeta;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof3_37WMZ\miningResult.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* FIMPORT2 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:26 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN18437";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT2_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.FIMPORT2_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.FIMPORT2_EMTRAINVARIABLE / view=WORK.FIMPORT2_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "DROP"n = "Drop (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT2_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:27 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base0OISP0I as select * from WORK.M3RE52RY order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp0OISP0I as select * from WORK.M02LA8YY order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base0OISP0I compare=work._comp0OISP0I out=WORK._DIFF29U7F8J noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP12I54X4S as select * from WORK._DIFF29U7F8J where NAME in (select NAME from WORK._DIFF29U7F8J where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM2LAB6JR as select * from WORK._DIFF29U7F8J where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF29U7F8J where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM2LAB6JR as select * from WORK._DIFF29U7F8J where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF29U7F8J where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM2LAB6JR;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM2LAB6JR;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM2LAB6JR;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM2LAB6JR;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\VARIABLESETDELTA.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\DELTACODE.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "CLUS4" 
Traverser: WaitingNode "PROF3" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Filter3 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:27 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Filter3_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter3_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter3_EMTRAINVARIABLE / view=WORK.Filter3_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Limit Method (C)";
MPRINT(EM_DIAGRAM):   label "KEEPMISSING"n = "Keep Missing Values (C)";
MPRINT(EM_DIAGRAM):   label "MINFREQ"n = "Minimum Frequency Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "MAXVALUES"n = "Number of Levels Cutoff (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMIN"n = "Lower Limit (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMAX"n = "Upper Limit (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter3_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter3_CLASS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter3_CLASS / view=WORK.Filter3_CLASS;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "VALUE"n = "Level (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Train Count (N)(10.0)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Train Percent (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Filter Method (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter3_CLASS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Filter3_INTERVAL OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Filter3_INTERVAL / view=WORK.Filter3_INTERVAL;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "INTERVALMIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "INTERVALMAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "CALCMETHOD"n = "Filter Method (C)";
MPRINT(EM_DIAGRAM):   label "KEEPMISSING"n = "Keep Missing Values (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Filter3_INTERVAL(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:27 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1SJPFFQ as select * from WORK.M2D8W7E0 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1SJPFFQ as select * from WORK.M1MAWN1Q order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1SJPFFQ compare=work._comp1SJPFFQ out=WORK._DIFF1_VJ5AE noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP12BIIJM1 as select * from WORK._DIFF1_VJ5AE where NAME in (select NAME from WORK._DIFF1_VJ5AE where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM3C2AP68 as select * from WORK._DIFF1_VJ5AE where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF1_VJ5AE where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM3C2AP68 as select * from WORK._DIFF1_VJ5AE where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF1_VJ5AE where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM3C2AP68;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM3C2AP68;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM3C2AP68;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM3C2AP68;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "PROF3" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Clus4 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:28 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus4_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus4_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus4_EMTRAINVARIABLE / view=WORK.Clus4_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus4_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus4_OUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus4_OUTMEAN / view=WORK.Clus4_OUTMEAN;
MPRINT(EM_DIAGRAM):   label "_CRIT_"n = "Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_XCONV_"n = "Maximum Relative Change in Cluster Seeds (N)";
MPRINT(EM_DIAGRAM):   label "_FCONV_"n = "Improvement in Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "_FREQ_"n = "Frequency of Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_RMSSTD_"n = "Root-Mean-Square Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "_RADIUS_"n = "Maximum Distance from Cluster Seed (N)";
MPRINT(EM_DIAGRAM):   label "_NEAR_"n = "Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_GAP_"n = "Distance to Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "Number_of_Contacts"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Contact_Typecellular"n = "Contact_Type=cellular (N)";
MPRINT(EM_DIAGRAM):   label "Contact_Typetelephone"n = "Contact_Type=telephone (N)";
MPRINT(EM_DIAGRAM):   label "Mortageno"n = "Mortage=no (N)";
MPRINT(EM_DIAGRAM):   label "Mortageyes"n = "Mortage=yes (N)";
MPRINT(EM_DIAGRAM):   label "Personal_Loanno"n = "Personal_Loan=no (N)";
MPRINT(EM_DIAGRAM):   label "Personal_Loanyes"n = "Personal_Loan=yes (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus4_OUTMEAN(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus4_OUTSTAT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus4_OUTSTAT / view=WORK.Clus4_OUTSTAT;
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Type of Observation (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "Over_All"n = "Statistic Applying Over All Variables (N)";
MPRINT(EM_DIAGRAM):   label "Number_of_Contacts"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Contact_Typecellular"n = "Contact_Type=cellular (N)";
MPRINT(EM_DIAGRAM):   label "Contact_Typetelephone"n = "Contact_Type=telephone (N)";
MPRINT(EM_DIAGRAM):   label "Mortageno"n = "Mortage=no (N)";
MPRINT(EM_DIAGRAM):   label "Mortageyes"n = "Mortage=yes (N)";
MPRINT(EM_DIAGRAM):   label "Personal_Loanno"n = "Personal_Loan=no (N)";
MPRINT(EM_DIAGRAM):   label "Personal_Loanyes"n = "Personal_Loan=yes (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus4_OUTSTAT(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus4_INPUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus4_INPUTMEAN / view=WORK.Clus4_INPUTMEAN;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_CHAR_"n = "Segment Id (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Name (N)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "INPUT"n = "Input (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CV"n = "Coefficient of Variation (N)";
MPRINT(EM_DIAGRAM):   label "STDMEAN"n = "Normalized Mean (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus4_INPUTMEAN(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus4_TREE_PLOT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus4_TREE_PLOT / view=WORK.Clus4_TREE_PLOT;
MPRINT(EM_DIAGRAM):   label "NODETEXT"n = "Node Text (C)";
MPRINT(EM_DIAGRAM):   label "TEXTALL"n = "All Text (C)";
MPRINT(EM_DIAGRAM):   label "N"n = "Train: Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "NODECOLOR"n = "Node Color (N)";
MPRINT(EM_DIAGRAM):   label "parent"n = "Parent Id (N)";
MPRINT(EM_DIAGRAM):   label "abovetext"n = "Above Text (C)";
MPRINT(EM_DIAGRAM):   label "NODE"n = "Node (N)";
MPRINT(EM_DIAGRAM):   label "DEPTH"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   label "LINKWIDTH"n = "Link Width (N)";
MPRINT(EM_DIAGRAM):   label "belowtext"n = "Below Text (C)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Square Error (N)";
MPRINT(EM_DIAGRAM):   label "P__SEGMENT_5"n = "Predicted Variable (N)";
MPRINT(EM_DIAGRAM):   label "traintotal"n = "Train Total (N)";
MPRINT(EM_DIAGRAM):   label "index"n = "Leaf Index (N)";
MPRINT(EM_DIAGRAM):   label "percevent_train"n = "Percent Cases (N)";
MPRINT(EM_DIAGRAM):   label "perc_train"n = "Event Percentage (N)";
MPRINT(EM_DIAGRAM):   label "tprob"n = "Training Percent (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus4_TREE_PLOT(obs=10000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus4_OUTIMPORT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus4_OUTIMPORT / view=WORK.Clus4_OUTIMPORT;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NRULES"n = "Number of Splitting Rules (N)";
MPRINT(EM_DIAGRAM):   label "NSURROGATES"n = "Number of Surrogate Rules (N)";
MPRINT(EM_DIAGRAM):   label "IMPORTANCE"n = "Importance (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus4_OUTIMPORT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus4_PROFILE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus4_PROFILE / view=WORK.Clus4_PROFILE;
MPRINT(EM_DIAGRAM):   label "BYPERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Variable (N)";
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "NumericValue"n = "Numeric Value (N)";
MPRINT(EM_DIAGRAM):   label "FmtValue"n = "Formatted Value (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "_Label_"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "orderedValue"n = "Ordered Values (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus4_PROFILE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus4_DISTANCE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus4_DISTANCE / view=WORK.Clus4_DISTANCE;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_1"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_2"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_3"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_4"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_5"n = " (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus4_DISTANCE(obs=60000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:29 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base3GOB2QF as select * from WORK.M1DDX5J5 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp3GOB2QF as select * from WORK.M1M17TJ0 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base3GOB2QF compare=work._comp3GOB2QF out=WORK._DIFF27HP2GL noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP12IVJ66M as select * from WORK._DIFF27HP2GL where NAME in (select NAME from WORK._DIFF27HP2GL where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM1SQHGL9 as select * from WORK._DIFF27HP2GL where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF27HP2GL where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM1SQHGL9 as select * from WORK._DIFF27HP2GL where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF27HP2GL where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM1SQHGL9;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM1SQHGL9;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM1SQHGL9;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM1SQHGL9;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMNOTES.txt" encoding="UTF-8" NOBOM;
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Prof3 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:30 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN18601";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof3_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof3_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof3_EMTRAINVARIABLE / view=WORK.Prof3_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof3_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof3_SIZE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof3_SIZE / view=WORK.Prof3_SIZE;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Count"n = "Frequency Count (N)(12.0)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)(5.2)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof3_SIZE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof3_STATS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof3_STATS / view=WORK.Prof3_STATS;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof3_STATS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof3_CLASSDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof3_CLASSDIST / view=WORK.Prof3_CLASSDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (C)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Groupindex"n = "Group Index (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof3_CLASSDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof3_INTDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof3_INTDIST / view=WORK.Prof3_INTDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (N)(12.3)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Color"n = "Color (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof3_INTDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof3_WORTH OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof3_WORTH / view=WORK.Prof3_WORTH;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof3_WORTH(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:30 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Prof3_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1CNAMPD as select * from WORK.M3K0RX79 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1CNAMPD as select * from WORK.M2_U0MYF order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1CNAMPD compare=work._comp1CNAMPD out=WORK._DIFF0Q7K6DX noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP103U7ULK as select * from WORK._DIFF0Q7K6DX where NAME in (select NAME from WORK._DIFF0Q7K6DX where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM19RAX7W as select * from WORK._DIFF0Q7K6DX where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF0Q7K6DX where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM19RAX7W as select * from WORK._DIFF0Q7K6DX where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF0Q7K6DX where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM19RAX7W;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM19RAX7W;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM19RAX7W;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM19RAX7W;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMNOTES.txt" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\dsapimeta.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\layout.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc printto print=#LN18674;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options NODATE NONUMBER;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RUNSTATUS noobs label;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options DATE NUMBER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof3_37WMZ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   rc = 0;
MPRINT(EM_DIAGRAM):   Pack1N5Q = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1N5Q, "Profile", ' type="EM Result" version="14.1" Report="20161277_Assignment2_Prof3_37WMZ" nodeid="Prof3" description="Segment Profile" component="Profile"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Profile began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack25C4 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack25C4, "MININGRESULT", ' NAME="Mining Result Metadata"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package MININGRESULT began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1N5Q, Pack25C4, rc, "NESTED_NAME", "MININGRESULT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3J3FUZG "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack25C4, "fileref:F3J3FUZG", "BINARY", "text/xml", 'SXML', 'NAME=SCOREXML TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0G6M344 "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\input.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack25C4, "fileref:F0G6M344", "BINARY", "text/xml", 'INPUTTABLE', 'NAME=INPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\input.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2SIYPOH "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\output.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack25C4, "fileref:F2SIYPOH", "BINARY", "text/xml", 'OUTPUTTABLE', 'NAME=OUTPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\output.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F34V9MQJ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof3_37WMZ\miningResult.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack25C4, "fileref:F34V9MQJ", "BINARY", "text/xml", 'MININGRESULT', 'NAME=MININGRESULT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof3_37WMZ\miningResult.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0QKM = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0QKM, "File Import - Behaviour - Task 2", ' NAME="FIMPORT2"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package File Import - Behaviour - Task 2 began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F30V4F3U "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT2_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QKM, "fileref:F30V4F3U", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT2_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3P_B77I "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QKM, "fileref:F3P_B77I", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F12NZDLN "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QKM, "fileref:F12NZDLN", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0QKM, "work", "FIMPORT2_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1WPK6A4 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QKM, "fileref:F1WPK6A4", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F16BLGBA "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QKM, "fileref:F16BLGBA", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0J66VS_ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QKM, "fileref:F0J66VS_", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2885MFZ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0QKM, "fileref:F2885MFZ", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1N5Q, Pack0QKM, rc, "NESTED_NAME", "FIMPORT2");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2XNU = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2XNU, "Filter - Yes", ' NAME="Filter3"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Filter - Yes began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0AGOA69 "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Filter3_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2XNU, "fileref:F0AGOA69", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Filter3_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2IKHX62 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2XNU, "fileref:F2IKHX62", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2ZEB5VT "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2XNU, "fileref:F2ZEB5VT", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2XNU, "work", "Filter3_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2YO6QBI "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2XNU, "fileref:F2YO6QBI", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0GI3ELA "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2XNU, "fileref:F0GI3ELA", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0PZ9KWZ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2XNU, "fileref:F0PZ9KWZ", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0F4CNYZ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2XNU, "fileref:F0F4CNYZ", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2ZGJ1F1 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2XNU, "fileref:F2ZGJ1F1", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0L1TJMR "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2XNU, "fileref:F0L1TJMR", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2XNU, "work", "Filter3_CLASS", "EXCLUDECLASS", "NAME=CLASS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file EXCLUDECLASS inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2XNU, "work", "Filter3_INTERVAL", "LIMITINTERVAL", "NAME=INTERVAL TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file LIMITINTERVAL inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1N5Q, Pack2XNU, rc, "NESTED_NAME", "Filter3");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1VMN = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1VMN, "Cluster", ' NAME="Clus4"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Cluster began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0SNLNJN "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus4_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1VMN, "fileref:F0SNLNJN", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus4_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3Q4_FV4 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1VMN, "fileref:F3Q4_FV4", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0R3HAI9 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1VMN, "fileref:F0R3HAI9", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1VMN, "work", "Clus4_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3UO8WK5 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1VMN, "fileref:F3UO8WK5", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3L0I791 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1VMN, "fileref:F3L0I791", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3G_G8I2 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1VMN, "fileref:F3G_G8I2", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2WKQWM6 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1VMN, "fileref:F2WKQWM6", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2WJOFR8 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1VMN, "fileref:F2WJOFR8", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1JQ7WQT "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1VMN, "fileref:F1JQ7WQT", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3IH02MG "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1VMN, "fileref:F3IH02MG", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1VMN, "work", "Clus4_OUTMEAN", "CLUSMEAN", "NAME=OUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1VMN, "work", "Clus4_OUTSTAT", "CLUSSTAT", "NAME=OUTSTAT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1VMN, "work", "Clus4_INPUTMEAN", "INPUTMEAN", "NAME=INPUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file INPUTMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1VMN, "work", "Clus4_TREE_PLOT", "TREE_PLOT", "NAME=TREE_PLOT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file TREE_PLOT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3J8NLHT "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\ENGLISHRULES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1VMN, "fileref:F3J8NLHT", "TEXT", "text/plain", 'ENGLISHRULES', 'NAME=EnglishRules TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\ENGLISHRULES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1VMN, "work", "Clus4_OUTIMPORT", "IMPORTANCE", "NAME=OUTIMPORT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file IMPORTANCE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1VMN, "work", "Clus4_PROFILE", "Segment Profiles", "NAME=PROFILE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file PROFILE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2HQY = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2HQY, "GRAPH", ' NAME="GRAPH"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package GRAPH began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1VMN, Pack2HQY, rc, "NESTED_NAME", "GRAPH");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2SPJCGW "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\GRAPH\Distance.gif";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2HQY, "fileref:F2SPJCGW", "BINARY", "image/gif", 'Distance', 'NAME="Distance" TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\GRAPH\Distance.gif inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1VMN, "work", "Clus4_DISTANCE", "Distance Table", "NAME=DISTANCE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file DISTANCETABLE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1N5Q, Pack1VMN, rc, "NESTED_NAME", "Clus4");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0MDZ = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0MDZ, "Segment Profile", ' NAME="Prof3"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Segment Profile began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3W1CWAB "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof3_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0MDZ, "fileref:F3W1CWAB", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof3_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3C1Y8GQ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0MDZ, "fileref:F3C1Y8GQ", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F072QRT1 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0MDZ, "fileref:F072QRT1", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0MDZ, "work", "Prof3_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0RVV628 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0MDZ, "fileref:F0RVV628", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2R40MX3 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0MDZ, "fileref:F2R40MX3", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0WYO6OC "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0MDZ, "fileref:F0WYO6OC", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2FV1OZ2 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0MDZ, "fileref:F2FV1OZ2", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1MFFYF2 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0MDZ, "fileref:F1MFFYF2", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0MDZ, "work", "Prof3_SIZE", "Profileview", "NAME=SIZE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0MDZ, "work", "Prof3_STATS", "Profileview", "NAME=STATS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0MDZ, "work", "Prof3_CLASSDIST", "Profileview", "NAME=CLASSDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0MDZ, "work", "Prof3_INTDIST", "Profileview", "NAME=INTDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0MDZ, "work", "Prof3_WORTH", "profworth", "NAME=WORTH TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file profworth inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1N5Q, Pack0MDZ, rc, "NESTED_NAME", "Prof3");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack09C1 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack09C1, "WORKSPACE", ' NAME="Workspace configuration"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package WORKSPACE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1N5Q, Pack09C1, rc, "NESTED_NAME", "WORKSPACE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0P_7JQU "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\dsapi.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack09C1, "fileref:F0P_7JQU", "TEXT", "text/plain", 'Batch Code', 'NAME=BATCHCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\dsapi.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0YY_D0D "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\dsapimeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack09C1, "fileref:F0YY_D0D", "BINARY", "text/xml", 'Batch Metadata', 'NAME=BATCHMETADATA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\dsapimeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0_O4PQU "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\layout.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack09C1, "fileref:F0_O4PQU", "BINARY", "text/xml", 'Properties', 'NAME=LAYOUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\layout.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F18N5VPC "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1N5Q, "fileref:F18N5VPC", "TEXT", "text/plain", 'NODESTATUS', 'NAME=NODESTATUS TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0LK1 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0LK1, "PATHSCORE", ' NAME="Path score code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PATHSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1N5Q, Pack0LK1, rc, "NESTED_NAME", "PATHSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1VUY = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1VUY, "SASSCORE", ' NAME="SAS Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package SASSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0LK1, Pack1VUY, rc, "NESTED_NAME", "SASSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1SP2TVU "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2EEFO7Pscore.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1VUY, "fileref:F1SP2TVU", "TEXT", "text/plain", 'SASCODE', 'NAME=SASCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2EEFO7Pscore.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0OMZ = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0OMZ, "PMMLSCORE", ' NAME="PMML Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PMMLSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0LK1, Pack0OMZ, rc, "NESTED_NAME", "PMMLSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   pubType = "TO_ARCHIVE";
MPRINT(EM_DIAGRAM):   properties='archive_path, archive_name';
MPRINT(EM_DIAGRAM):   path = "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof3_37WMZ";
MPRINT(EM_DIAGRAM):   name = "miningResult";
MPRINT(EM_DIAGRAM):   call package_publish(Pack1N5Q, pubType, rc, properties, path, name);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Publish package Pack1N5Q successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call package_end(Pack1N5Q, rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Pack1N5Q ended successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
Package Profile began successfully.
Package MININGRESULT began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\input.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\output.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof3_37WMZ\miningResult.xml inserted successfully.
Package File Import - Behaviour - Task 2 began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT2_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT2\EMTRAINCODE.sas inserted successfully.
spk_PACKAGEINSERT_note
Package Filter - Yes began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Filter3_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Filter3\EMCUSTOMGRAPH.xml inserted successfully.
CSV file EXCLUDECLASS inserted successfully.
CSV file LIMITINTERVAL inserted successfully.
spk_PACKAGEINSERT_note
Package Cluster began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus4_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMFLOWSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMPUBLISHSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\EMCUSTOMGRAPH.xml inserted successfully.
CSV file CLUSMEAN inserted successfully.
CSV file CLUSSTAT inserted successfully.
CSV file INPUTMEAN inserted successfully.
CSV file TREE_PLOT inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\ENGLISHRULES.txt inserted successfully.
CSV file IMPORTANCE inserted successfully.
CSV file PROFILE inserted successfully.
Package GRAPH began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus4\GRAPH\Distance.gif inserted successfully.
CSV file DISTANCETABLE inserted successfully.
spk_PACKAGEINSERT_note
Package Segment Profile began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof3_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof3\EMCUSTOMGRAPH.xml inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file profworth inserted successfully.
spk_PACKAGEINSERT_note
Package WORKSPACE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\dsapi.sas inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\dsapimeta.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1S972ZB\layout.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out inserted successfully.
Package PATHSCORE began successfully.
spk_PACKAGEINSERT_note
Package SASSCORE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_2EEFO7Pscore.sas inserted successfully.
Package PMMLSCORE began successfully.
spk_PACKAGEINSERT_note
Publish package Pack1N5Q successfully.
Package Pack1N5Q ended successfully.
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   filename F3J3FUZG;
MPRINT(EM_DIAGRAM):   filename F0G6M344;
MPRINT(EM_DIAGRAM):   filename F2SIYPOH;
MPRINT(EM_DIAGRAM):   filename F34V9MQJ;
MPRINT(EM_DIAGRAM):   filename F30V4F3U;
MPRINT(EM_DIAGRAM):   filename F3P_B77I;
MPRINT(EM_DIAGRAM):   filename F12NZDLN;
MPRINT(EM_DIAGRAM):   filename F1WPK6A4;
MPRINT(EM_DIAGRAM):   filename F16BLGBA;
MPRINT(EM_DIAGRAM):   filename F0J66VS_;
MPRINT(EM_DIAGRAM):   filename F2885MFZ;
MPRINT(EM_DIAGRAM):   filename F0AGOA69;
MPRINT(EM_DIAGRAM):   filename F2IKHX62;
MPRINT(EM_DIAGRAM):   filename F2ZEB5VT;
MPRINT(EM_DIAGRAM):   filename F2YO6QBI;
MPRINT(EM_DIAGRAM):   filename F0GI3ELA;
MPRINT(EM_DIAGRAM):   filename F0PZ9KWZ;
MPRINT(EM_DIAGRAM):   filename F0F4CNYZ;
MPRINT(EM_DIAGRAM):   filename F2ZGJ1F1;
MPRINT(EM_DIAGRAM):   filename F0L1TJMR;
MPRINT(EM_DIAGRAM):   filename F0SNLNJN;
MPRINT(EM_DIAGRAM):   filename F3Q4_FV4;
MPRINT(EM_DIAGRAM):   filename F0R3HAI9;
MPRINT(EM_DIAGRAM):   filename F3UO8WK5;
MPRINT(EM_DIAGRAM):   filename F3L0I791;
MPRINT(EM_DIAGRAM):   filename F3G_G8I2;
MPRINT(EM_DIAGRAM):   filename F2WKQWM6;
MPRINT(EM_DIAGRAM):   filename F2WJOFR8;
MPRINT(EM_DIAGRAM):   filename F1JQ7WQT;
MPRINT(EM_DIAGRAM):   filename F3IH02MG;
MPRINT(EM_DIAGRAM):   filename F3J8NLHT;
MPRINT(EM_DIAGRAM):   filename F2SPJCGW;
MPRINT(EM_DIAGRAM):   filename F3W1CWAB;
MPRINT(EM_DIAGRAM):   filename F3C1Y8GQ;
MPRINT(EM_DIAGRAM):   filename F072QRT1;
MPRINT(EM_DIAGRAM):   filename F0RVV628;
MPRINT(EM_DIAGRAM):   filename F2R40MX3;
MPRINT(EM_DIAGRAM):   filename F0WYO6OC;
MPRINT(EM_DIAGRAM):   filename F2FV1OZ2;
MPRINT(EM_DIAGRAM):   filename F1MFFYF2;
MPRINT(EM_DIAGRAM):   filename F0P_7JQU;
MPRINT(EM_DIAGRAM):   filename F0YY_D0D;
MPRINT(EM_DIAGRAM):   filename F0_O4PQU;
MPRINT(EM_DIAGRAM):   filename F18N5VPC;
MPRINT(EM_DIAGRAM):   filename F1SP2TVU;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options notes source;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
101219     %let eminfo= %str();
101220     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
101221     set EMWS1.EMSave5_ExportSet;
MPRINT(EM_DIAGRAM):   set EMWS1.EMSave5_ExportSet;
101222     where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
MPRINT(EM_DIAGRAM):   where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
101223     call symput('eminfo', strip(eminfo));
MPRINT(EM_DIAGRAM):   call symput('eminfo', strip(eminfo));
101224     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.EMSAVE5_EXPORTSET.
      WHERE (eminfo not = ' ') and NODEPORT in ('DATA', 'TRAIN');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Retrieving Score Code FIMPORT4 
Traverser: WaitingNode "PROF7" 
Traverser: WaitingNode "EMSAVE5" 
traverser_readyNode_note 
Retrieving Score Code Clus7 
Traverser: WaitingNode "EMSAVE5" 
traverser_readyNode_note 
Retrieving Score Code Prof7 
traverser_readyNode_note 
Retrieving Score Code EMSave5 
101225     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
101226     * Report: Determine If validvarname ANY variables are score inputs;
MPRINT(EM_DIAGRAM):   * Report: Determine If validvarname ANY variables are score inputs;
101227     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
101228     filename _pref "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_23F0PK8score.sas";
MPRINT(EM_DIAGRAM):   filename _pref "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_23F0PK8score.sas";
101229     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
101230     %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   * EM Version: 14.1;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M3P062415;
MPRINT(EM_DIAGRAM):   * Host: ba-teaching;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(EM_DIAGRAM):   * Project Name: 20161277_CAassignment2;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: All Tasks;
MPRINT(EM_DIAGRAM):   * Generated by: 20161277;
MPRINT(EM_DIAGRAM):   * Date: 28SEP2020:04:23:34;
MPRINT(EM_DIAGRAM):   * Macro variable identifying the scored data set;
MPRINT(EM_DIAGRAM):   *%let EM_SCORE_OUTPUT=;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT4;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Clustering;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Clus7;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize Age ;
MPRINT(EM_DIAGRAM):   drop T_Age ;
MPRINT(EM_DIAGRAM):   if missing( Age ) then T_Age = .;
MPRINT(EM_DIAGRAM):   else T_Age = (Age - 39.8608707020525) * 0.09718656389406;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Career ;
MPRINT(EM_DIAGRAM):   drop Careeradministration Careerblue_collar Careerentrepreneur Careerhousemaid Careermanagement Careerretired Careerself_employed Careerservices Careerstudent Careertechnician Careerunemployed ;
MPRINT(EM_DIAGRAM):   if missing( Career ) then do;
MPRINT(EM_DIAGRAM):   Careeradministration = .;
MPRINT(EM_DIAGRAM):   Careerblue_collar = .;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = .;
MPRINT(EM_DIAGRAM):   Careerhousemaid = .;
MPRINT(EM_DIAGRAM):   Careermanagement = .;
MPRINT(EM_DIAGRAM):   Careerretired = .;
MPRINT(EM_DIAGRAM):   Careerself_employed = .;
MPRINT(EM_DIAGRAM):   Careerservices = .;
MPRINT(EM_DIAGRAM):   Careerstudent = .;
MPRINT(EM_DIAGRAM):   Careertechnician = .;
MPRINT(EM_DIAGRAM):   Careerunemployed = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm16 $ 16;
MPRINT(EM_DIAGRAM):   drop _dm16 ;
MPRINT(EM_DIAGRAM):   _dm16 = put( Career , $16. );
MPRINT(DMNORMIP):   call dmnorm(_dm16,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm16 <= 'RETIRED' then do;
MPRINT(EM_DIAGRAM):   if _dm16 <= 'ENTREPRENEUR' then do;
MPRINT(EM_DIAGRAM):   if _dm16 <= 'BLUE-COLLAR' then do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'ADMINISTRATION' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = 0.50889118500978;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'BLUE-COLLAR' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = 0.56147396576531;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'ENTREPRENEUR' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = 1.5701943823646;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 <= 'MANAGEMENT' then do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'HOUSEMAID' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = 1.85246142180295;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'MANAGEMENT' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = 1.08791241838279;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'RETIRED' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = 1.45387056599005;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 <= 'STUDENT' then do;
MPRINT(EM_DIAGRAM):   if _dm16 <= 'SERVICES' then do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'SELF-EMPLOYED' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = 1.57681828530897;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'SERVICES' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = 0.91907748535592;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'STUDENT' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = 2.22766154295433;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'TECHNICIAN' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = 0.67382109265536;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm16 = 'UNEMPLOYED' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = 1.87600692443571;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   Careeradministration = .;
MPRINT(EM_DIAGRAM):   Careerblue_collar = .;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = .;
MPRINT(EM_DIAGRAM):   Careerhousemaid = .;
MPRINT(EM_DIAGRAM):   Careermanagement = .;
MPRINT(EM_DIAGRAM):   Careerretired = .;
MPRINT(EM_DIAGRAM):   Careerself_employed = .;
MPRINT(EM_DIAGRAM):   Careerservices = .;
MPRINT(EM_DIAGRAM):   Careerstudent = .;
MPRINT(EM_DIAGRAM):   Careertechnician = .;
MPRINT(EM_DIAGRAM):   Careerunemployed = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   drop Educationilliterate Educationprimary_education Educationprofessional_educat Educationsecondary_education Educationuniversity_educatio ;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = .;
MPRINT(EM_DIAGRAM):   Educationprimary_education = .;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = .;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = .;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm24 $ 24;
MPRINT(EM_DIAGRAM):   drop _dm24 ;
MPRINT(EM_DIAGRAM):   _dm24 = put( Education , $24. );
MPRINT(DMNORMIP):   call dmnorm(_dm24,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'PROFESSIONAL EDUCATION' then do;
MPRINT(EM_DIAGRAM):   if _dm24 <= 'PRIMARY EDUCATION' then do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'ILLITERATE' then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = 20.6090596234465;
MPRINT(EM_DIAGRAM):   Educationprimary_education = -0.19682294664746;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = -0.17542254053591;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = -0.36121784809716;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'PRIMARY EDUCATION' then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = -0.00970421621424;
MPRINT(EM_DIAGRAM):   Educationprimary_education = 1.01611511241349;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = -0.17542254053591;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = -0.36121784809716;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'PROFESSIONAL EDUCATION' then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = -0.00970421621424;
MPRINT(EM_DIAGRAM):   Educationprimary_education = -0.19682294664746;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = 1.14007453060057;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = -0.36121784809716;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'SECONDARY EDUCATION' then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = -0.00970421621424;
MPRINT(EM_DIAGRAM):   Educationprimary_education = -0.19682294664746;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = -0.17542254053591;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = 0.55366801948403;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm24 = 'UNIVERSITY EDUCATION' then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = -0.00970421621424;
MPRINT(EM_DIAGRAM):   Educationprimary_education = -0.19682294664746;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = -0.17542254053591;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = -0.36121784809716;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = 0.66862327682085;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = .;
MPRINT(EM_DIAGRAM):   Educationprimary_education = .;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = .;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = .;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Statues ;
MPRINT(EM_DIAGRAM):   drop Marital_Statuesdivorced Marital_Statuesmarried Marital_Statuessingle ;
MPRINT(EM_DIAGRAM):   if missing( Marital_Statues ) then do;
MPRINT(EM_DIAGRAM):   Marital_Statuesdivorced = .;
MPRINT(EM_DIAGRAM):   Marital_Statuesmarried = .;
MPRINT(EM_DIAGRAM):   Marital_Statuessingle = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
MPRINT(EM_DIAGRAM):   _dm10 = put( Marital_Statues , $10. );
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm10 = 'MARRIED' then do;
MPRINT(EM_DIAGRAM):   Marital_Statuesdivorced = -0.20553878536687;
MPRINT(EM_DIAGRAM):   Marital_Statuesmarried = 0.46536123012655;
MPRINT(EM_DIAGRAM):   Marital_Statuessingle = -0.36123677782606;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'SINGLE' then do;
MPRINT(EM_DIAGRAM):   Marital_Statuesdivorced = -0.20553878536687;
MPRINT(EM_DIAGRAM):   Marital_Statuesmarried = -0.71627070761013;
MPRINT(EM_DIAGRAM):   Marital_Statuessingle = 0.9227316764451;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'DIVORCED' then do;
MPRINT(EM_DIAGRAM):   Marital_Statuesdivorced = 1.62171152759367;
MPRINT(EM_DIAGRAM):   Marital_Statuesmarried = -0.71627070761013;
MPRINT(EM_DIAGRAM):   Marital_Statuessingle = -0.36123677782606;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Marital_Statuesdivorced = .;
MPRINT(EM_DIAGRAM):   Marital_Statuesmarried = .;
MPRINT(EM_DIAGRAM):   Marital_Statuessingle = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUS7vlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUS7vads [5] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 5;
MPRINT(EM_DIAGRAM):   CLUS7vads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_Age ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( T_Age - -0.40255113472262 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( T_Age - 0.39315868658023 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( T_Age - -0.73258092353267 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( T_Age - 0.83960729150403 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( T_Age - 1.28090455713015 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( Careeradministration ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Careeradministration - -0.01135022935391 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Careeradministration - 0.0214070871274 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Careeradministration - 0.06098738450022 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Careeradministration - -0.14044083990246 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Careeradministration - -0.06050539258479 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerblue_collar ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Careerblue_collar - 0.04178889401241 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Careerblue_collar - -0.04942346719474 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Careerblue_collar - -0.04853686639569 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Careerblue_collar - 0.15959550450178 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Careerblue_collar - 0.01121903602917 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerentrepreneur ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Careerentrepreneur - 0.00891552514965 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Careerentrepreneur - 0.00578395610668 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Careerentrepreneur - -0.02902112688486 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Careerentrepreneur - 0.12300364470167 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Careerentrepreneur - 0.01585102039736 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerhousemaid ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Careerhousemaid - -0.00703608583967 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Careerhousemaid - 0.01487034379795 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Careerhousemaid - -0.0311119858684 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Careerhousemaid - 0.05656735534367 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Careerhousemaid - 0.03933630574618 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careermanagement ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Careermanagement - 0.00271152515894 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Careermanagement - 0.00193198007523 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Careermanagement - -0.03162067884575 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Careermanagement - -0.08356069142518 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Careermanagement - 0.03072936806827 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerretired ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Careerretired - -0.06022266226517 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Careerretired - 0.02209869411984 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Careerretired - -0.059896518537 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Careerretired - 0.19020561298176 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Careerretired - 0.15211954384056 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerself_employed ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Careerself_employed - 0.0019680644933 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Careerself_employed - -0.00853602294626 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Careerself_employed - -0.00377354930275 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Careerself_employed - 0.21475972156128 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Careerself_employed - 0.00463727239776 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerservices ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Careerservices - 0.00932295651812 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Careerservices - 0.02320892548581 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Careerservices - 0.00225022868367 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Careerservices - -0.09891082671327 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Careerservices - -0.02763834362742 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerstudent ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Careerstudent - -0.03469619637911 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Careerstudent - -0.03756205430465 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Careerstudent - 0.09978232272964 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Careerstudent - -0.04080813540891 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Careerstudent - -0.04080813540891 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careertechnician ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Careertechnician - -0.00126870872531 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Careertechnician - 0.00473071924215 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Careertechnician - 0.0304980848788 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Careertechnician - -0.13491224136642 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Careertechnician - -0.03434892827268 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerunemployed ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Careerunemployed - 0.00166493687589 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Careerunemployed - 0.0052420235508 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Careerunemployed - -0.00486727791767 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Careerunemployed - -0.04845755775525 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Careerunemployed - 0.00057605383366 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Educationilliterate ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Educationilliterate - 20.6090596234465 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.19999999999999;
MPRINT(EM_DIAGRAM):   if not missing( Educationprimary_education ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Educationprimary_education - -0.01272450687151 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Educationprimary_education - -0.03540643413708 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Educationprimary_education - -0.12048091748438 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Educationprimary_education - -0.19682294664746 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Educationprimary_education - 0.17271110052725 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.2;
MPRINT(EM_DIAGRAM):   if not missing( Educationprofessional_educat ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Educationprofessional_educat - -0.00002293105105 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Educationprofessional_educat - 0.02317265288869 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Educationprofessional_educat - -0.00716571032886 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Educationprofessional_educat - -0.17542254053591 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Educationprofessional_educat - -0.00210465551031 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.2;
MPRINT(EM_DIAGRAM):   if not missing( Educationsecondary_education ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Educationsecondary_education - 0.03494827404438 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Educationsecondary_education - 0.01058408807225 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Educationsecondary_education - 0.01108558640189 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Educationsecondary_education - -0.36121784809716 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Educationsecondary_education - -0.07172978938734 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.19999999999999;
MPRINT(EM_DIAGRAM):   if not missing( Educationuniversity_educatio ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Educationuniversity_educatio - -0.02634265832584 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Educationuniversity_educatio - 0.00046200106339 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Educationuniversity_educatio - 0.09012608817189 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Educationuniversity_educatio - -0.29911428077881 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Educationuniversity_educatio - -0.05991956652018 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.19999999999999;
MPRINT(EM_DIAGRAM):   if not missing( Marital_Statuesdivorced ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Marital_Statuesdivorced - -0.2055387853669 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Marital_Statuesdivorced - 1.62171152759379 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Marital_Statuesdivorced - -0.20553878536685 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Marital_Statuesdivorced - -0.0025109728157 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Marital_Statuesdivorced - -0.18425004587569 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.33333333333333;
MPRINT(EM_DIAGRAM):   if not missing( Marital_Statuesmarried ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Marital_Statuesmarried - 0.4653612301265 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Marital_Statuesmarried - -0.71627070761011 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Marital_Statuesmarried - -0.71627070761022 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Marital_Statuesmarried - 0.2684225738371 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Marital_Statuesmarried - 0.40218818119057 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.33333333333333;
MPRINT(EM_DIAGRAM):   if not missing( Marital_Statuessingle ) then do;
MPRINT(EM_DIAGRAM):   CLUS7vads [1] + ( Marital_Statuessingle - -0.36123677782599 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [2] + ( Marital_Statuessingle - -0.36123677782604 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [3] + ( Marital_Statuessingle - 0.92273167644514 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [4] + ( Marital_Statuessingle - -0.28990519703322 )**2;
MPRINT(EM_DIAGRAM):   CLUS7vads [5] + ( Marital_Statuessingle - -0.30755168566136 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.33333333333333;
MPRINT(EM_DIAGRAM):   _vqnvar = 4 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 9.0949470177293E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUS7vads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 5;
MPRINT(EM_DIAGRAM):   if CLUS7vads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUS7vads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (4 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUS7vlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus7: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Prof7;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * NODE: EMSave5;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
101824     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
101825     quit;
101826     filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
101827     proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
MPRINT(EM_DIAGRAM):    proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
101828     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
101829     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 406 observations read from the data set WORK._TEMP.
NOTE: 368 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 38 observations and 1 variables.
NOTE: Compressing data set WORK._TEMP increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Determine output variables meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.FIMPORT4_DATA noprint out=_originalvar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\DROPINPUT.sas";
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _drpfrf;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT4_DATA;
MPRINT(EM_DIAGRAM):   drop 'Age'n 'Career'n 'Contact_Type'n 'Cus_ID'n 'Education'n 'Marital_Statues'n 'Mortage'n 'Number_of_Contacts'n 'Personal_Loan'n 'Subscribed'n 'VAR1'n ;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf;
MPRINT(EM_DIAGRAM):   proc contents data =WORK.SCORE_OUTPUTMETA noprint out=WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   length role $32 name_prefix $8;
MPRINT(EM_DIAGRAM):   set WORK.SCORE_OUTPUTMETA(keep=name type length label format informat rename=(type=itype)) end=_eof;
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   else type = 'C';
MPRINT(EM_DIAGRAM):   drop name_prefix itype;
MPRINT(EM_DIAGRAM):   if name = '_WARN_' then do;
MPRINT(EM_DIAGRAM):   role = 'ASSESS';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   name_prefix = scan(NAME, 1, '_');
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then role = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   else if name_prefix ='P' then role = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix ='R' then role = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then role = 'DECISION';
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then role = 'ASSESS';
MPRINT(EM_DIAGRAM):   else role = 'TRANSFORM';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if _eof then call symput('NumOutputVars', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   run;
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _tempFmt;
MPRINT(EM_DIAGRAM):   length format $33;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_tempFmt;
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne '')) out=temp2(rename=(fmtname=format));
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data temp2;
MPRINT(EM_DIAGRAM):   merge temp2(in=_a) _tempFmt(in=_b);
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable format by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   proc sort data=temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   if first.libname and first.memname then do;
MPRINT(EM_DIAGRAM):   call execute("proc format lib="!!libname!!'.'!!memname!!"cntlout=work._fmtout;");
MPRINT(EM_DIAGRAM):   call execute("select");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call execute (format);
MPRINT(EM_DIAGRAM):   if last.libname and last.memname then do;
MPRINT(EM_DIAGRAM):   call execute(";");
MPRINT(EM_DIAGRAM):   call execute("proc append base=WORK._EMFORMAT data=work._fmtout force;");
MPRINT(EM_DIAGRAM):   call execute("run;");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK._EMFORMAT nodupkey;
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   where fmtname ne '_EMFMT';
MPRINT(EM_DIAGRAM):   run;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
MPRINT(EM_DIAGRAM):    options mprint;
MPRINT(EM_DIAGRAM):   filename _code "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_23F0PK8score.sas";
MPRINT(EM_DIAGRAM):   filename _xml "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml";




MPRINT(SCOREXML):   PROC FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK._alldeps;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(SCOREXML):   * Project Name: 20161277_CAassignment2;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: All Tasks;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 28SEP2020:04:23:34;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT4;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus7;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Age ;
MPRINT(SCOREXML):   drop T_Age ;
MPRINT(SCOREXML):   if missing( Age ) then T_Age = .;
MPRINT(SCOREXML):   else T_Age = (Age - 39.8608707020525) * 0.09718656389406;
MPRINT(SCOREXML):   *** Generate dummy variables for Career ;
MPRINT(SCOREXML):   drop Careeradministration Careerblue_collar Careerentrepreneur Careerhousemaid Careermanagement Careerretired Careerself_employed Careerservices Careerstudent Careertechnician Careerunemployed ;
MPRINT(SCOREXML):   if missing( Career ) then do;
MPRINT(SCOREXML):   Careeradministration = .;
MPRINT(SCOREXML):   Careerblue_collar = .;
MPRINT(SCOREXML):   Careerentrepreneur = .;
MPRINT(SCOREXML):   Careerhousemaid = .;
MPRINT(SCOREXML):   Careermanagement = .;
MPRINT(SCOREXML):   Careerretired = .;
MPRINT(SCOREXML):   Careerself_employed = .;
MPRINT(SCOREXML):   Careerservices = .;
MPRINT(SCOREXML):   Careerstudent = .;
MPRINT(SCOREXML):   Careertechnician = .;
MPRINT(SCOREXML):   Careerunemployed = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm16 $ 16;
MPRINT(SCOREXML):   drop _dm16 ;
MPRINT(SCOREXML):   _dm16 = put( Career , $16. );
MPRINT(DMNORMIP):   call dmnorm(_dm16,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   _dm_find = 0;
MPRINT(SCOREXML):   drop _dm_find;
MPRINT(SCOREXML):   if _dm16 <= 'RETIRED' then do;
MPRINT(SCOREXML):   if _dm16 <= 'ENTREPRENEUR' then do;
MPRINT(SCOREXML):   if _dm16 <= 'BLUE-COLLAR' then do;
MPRINT(SCOREXML):   if _dm16 = 'ADMINISTRATION' then do;
MPRINT(SCOREXML):   Careeradministration = 0.50889118500978;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'BLUE-COLLAR' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = 0.56147396576531;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'ENTREPRENEUR' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = 1.5701943823646;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 <= 'MANAGEMENT' then do;
MPRINT(SCOREXML):   if _dm16 = 'HOUSEMAID' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = 1.85246142180295;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'MANAGEMENT' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = 1.08791241838279;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'RETIRED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = 1.45387056599005;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 <= 'STUDENT' then do;
MPRINT(SCOREXML):   if _dm16 <= 'SERVICES' then do;
MPRINT(SCOREXML):   if _dm16 = 'SELF-EMPLOYED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = 1.57681828530897;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'SERVICES' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = 0.91907748535592;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'STUDENT' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = 2.22766154295433;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'TECHNICIAN' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = 0.67382109265536;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'UNEMPLOYED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = 1.87600692443571;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not _dm_find then do;
MPRINT(SCOREXML):   Careeradministration = .;
MPRINT(SCOREXML):   Careerblue_collar = .;
MPRINT(SCOREXML):   Careerentrepreneur = .;
MPRINT(SCOREXML):   Careerhousemaid = .;
MPRINT(SCOREXML):   Careermanagement = .;
MPRINT(SCOREXML):   Careerretired = .;
MPRINT(SCOREXML):   Careerself_employed = .;
MPRINT(SCOREXML):   Careerservices = .;
MPRINT(SCOREXML):   Careerstudent = .;
MPRINT(SCOREXML):   Careertechnician = .;
MPRINT(SCOREXML):   Careerunemployed = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Education ;
MPRINT(SCOREXML):   drop Educationilliterate Educationprimary_education Educationprofessional_educat Educationsecondary_education Educationuniversity_educatio ;
MPRINT(SCOREXML):   if missing( Education ) then do;
MPRINT(SCOREXML):   Educationilliterate = .;
MPRINT(SCOREXML):   Educationprimary_education = .;
MPRINT(SCOREXML):   Educationprofessional_educat = .;
MPRINT(SCOREXML):   Educationsecondary_education = .;
MPRINT(SCOREXML):   Educationuniversity_educatio = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm24 $ 24;
MPRINT(SCOREXML):   drop _dm24 ;
MPRINT(SCOREXML):   _dm24 = put( Education , $24. );
MPRINT(DMNORMIP):   call dmnorm(_dm24,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   _dm_find = 0;
MPRINT(SCOREXML):   drop _dm_find;
MPRINT(SCOREXML):   if _dm24 <= 'PROFESSIONAL EDUCATION' then do;
MPRINT(SCOREXML):   if _dm24 <= 'PRIMARY EDUCATION' then do;
MPRINT(SCOREXML):   if _dm24 = 'ILLITERATE' then do;
MPRINT(SCOREXML):   Educationilliterate = 20.6090596234465;
MPRINT(SCOREXML):   Educationprimary_education = -0.19682294664746;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17542254053591;
MPRINT(SCOREXML):   Educationsecondary_education = -0.36121784809716;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'PRIMARY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00970421621424;
MPRINT(SCOREXML):   Educationprimary_education = 1.01611511241349;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17542254053591;
MPRINT(SCOREXML):   Educationsecondary_education = -0.36121784809716;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'PROFESSIONAL EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00970421621424;
MPRINT(SCOREXML):   Educationprimary_education = -0.19682294664746;
MPRINT(SCOREXML):   Educationprofessional_educat = 1.14007453060057;
MPRINT(SCOREXML):   Educationsecondary_education = -0.36121784809716;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'SECONDARY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00970421621424;
MPRINT(SCOREXML):   Educationprimary_education = -0.19682294664746;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17542254053591;
MPRINT(SCOREXML):   Educationsecondary_education = 0.55366801948403;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'UNIVERSITY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00970421621424;
MPRINT(SCOREXML):   Educationprimary_education = -0.19682294664746;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17542254053591;
MPRINT(SCOREXML):   Educationsecondary_education = -0.36121784809716;
MPRINT(SCOREXML):   Educationuniversity_educatio = 0.66862327682085;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not _dm_find then do;
MPRINT(SCOREXML):   Educationilliterate = .;
MPRINT(SCOREXML):   Educationprimary_education = .;
MPRINT(SCOREXML):   Educationprofessional_educat = .;
MPRINT(SCOREXML):   Educationsecondary_education = .;
MPRINT(SCOREXML):   Educationuniversity_educatio = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Marital_Statues ;
MPRINT(SCOREXML):   drop Marital_Statuesdivorced Marital_Statuesmarried Marital_Statuessingle ;
MPRINT(SCOREXML):   if missing( Marital_Statues ) then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = .;
MPRINT(SCOREXML):   Marital_Statuesmarried = .;
MPRINT(SCOREXML):   Marital_Statuessingle = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm10 $ 10;
MPRINT(SCOREXML):   drop _dm10 ;
MPRINT(SCOREXML):   _dm10 = put( Marital_Statues , $10. );
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm10 = 'MARRIED' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = -0.20553878536687;
MPRINT(SCOREXML):   Marital_Statuesmarried = 0.46536123012655;
MPRINT(SCOREXML):   Marital_Statuessingle = -0.36123677782606;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm10 = 'SINGLE' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = -0.20553878536687;
MPRINT(SCOREXML):   Marital_Statuesmarried = -0.71627070761013;
MPRINT(SCOREXML):   Marital_Statuessingle = 0.9227316764451;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm10 = 'DIVORCED' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = 1.62171152759367;
MPRINT(SCOREXML):   Marital_Statuesmarried = -0.71627070761013;
MPRINT(SCOREXML):   Marital_Statuessingle = -0.36123677782606;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = .;
MPRINT(SCOREXML):   Marital_Statuesmarried = .;
MPRINT(SCOREXML):   Marital_Statuessingle = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUS7vlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUS7vads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUS7vads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Age ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( T_Age - -0.40255113472262 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( T_Age - 0.39315868658023 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( T_Age - -0.73258092353267 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( T_Age - 0.83960729150403 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( T_Age - 1.28090455713015 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( Careeradministration ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careeradministration - -0.01135022935391 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careeradministration - 0.0214070871274 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careeradministration - 0.06098738450022 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careeradministration - -0.14044083990246 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careeradministration - -0.06050539258479 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerblue_collar ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careerblue_collar - 0.04178889401241 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careerblue_collar - -0.04942346719474 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careerblue_collar - -0.04853686639569 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careerblue_collar - 0.15959550450178 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careerblue_collar - 0.01121903602917 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerentrepreneur ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careerentrepreneur - 0.00891552514965 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careerentrepreneur - 0.00578395610668 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careerentrepreneur - -0.02902112688486 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careerentrepreneur - 0.12300364470167 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careerentrepreneur - 0.01585102039736 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerhousemaid ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careerhousemaid - -0.00703608583967 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careerhousemaid - 0.01487034379795 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careerhousemaid - -0.0311119858684 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careerhousemaid - 0.05656735534367 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careerhousemaid - 0.03933630574618 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careermanagement ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careermanagement - 0.00271152515894 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careermanagement - 0.00193198007523 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careermanagement - -0.03162067884575 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careermanagement - -0.08356069142518 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careermanagement - 0.03072936806827 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerretired ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careerretired - -0.06022266226517 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careerretired - 0.02209869411984 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careerretired - -0.059896518537 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careerretired - 0.19020561298176 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careerretired - 0.15211954384056 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerself_employed ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careerself_employed - 0.0019680644933 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careerself_employed - -0.00853602294626 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careerself_employed - -0.00377354930275 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careerself_employed - 0.21475972156128 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careerself_employed - 0.00463727239776 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerservices ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careerservices - 0.00932295651812 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careerservices - 0.02320892548581 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careerservices - 0.00225022868367 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careerservices - -0.09891082671327 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careerservices - -0.02763834362742 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerstudent ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careerstudent - -0.03469619637911 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careerstudent - -0.03756205430465 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careerstudent - 0.09978232272964 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careerstudent - -0.04080813540891 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careerstudent - -0.04080813540891 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careertechnician ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careertechnician - -0.00126870872531 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careertechnician - 0.00473071924215 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careertechnician - 0.0304980848788 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careertechnician - -0.13491224136642 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careertechnician - -0.03434892827268 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerunemployed ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careerunemployed - 0.00166493687589 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careerunemployed - 0.0052420235508 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careerunemployed - -0.00486727791767 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careerunemployed - -0.04845755775525 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careerunemployed - 0.00057605383366 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Educationilliterate ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Educationilliterate - 20.6090596234465 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Educationprimary_education ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Educationprimary_education - -0.01272450687151 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Educationprimary_education - -0.03540643413708 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Educationprimary_education - -0.12048091748438 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Educationprimary_education - -0.19682294664746 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Educationprimary_education - 0.17271110052725 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationprofessional_educat ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Educationprofessional_educat - -0.00002293105105 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Educationprofessional_educat - 0.02317265288869 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Educationprofessional_educat - -0.00716571032886 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Educationprofessional_educat - -0.17542254053591 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Educationprofessional_educat - -0.00210465551031 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationsecondary_education ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Educationsecondary_education - 0.03494827404438 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Educationsecondary_education - 0.01058408807225 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Educationsecondary_education - 0.01108558640189 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Educationsecondary_education - -0.36121784809716 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Educationsecondary_education - -0.07172978938734 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Educationuniversity_educatio ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Educationuniversity_educatio - -0.02634265832584 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Educationuniversity_educatio - 0.00046200106339 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Educationuniversity_educatio - 0.09012608817189 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Educationuniversity_educatio - -0.29911428077881 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Educationuniversity_educatio - -0.05991956652018 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Marital_Statuesdivorced ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Marital_Statuesdivorced - -0.2055387853669 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Marital_Statuesdivorced - 1.62171152759379 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Marital_Statuesdivorced - -0.20553878536685 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Marital_Statuesdivorced - -0.0025109728157 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Marital_Statuesdivorced - -0.18425004587569 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Marital_Statuesmarried ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Marital_Statuesmarried - 0.4653612301265 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Marital_Statuesmarried - -0.71627070761011 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Marital_Statuesmarried - -0.71627070761022 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Marital_Statuesmarried - 0.2684225738371 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Marital_Statuesmarried - 0.40218818119057 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Marital_Statuessingle ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Marital_Statuessingle - -0.36123677782599 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Marital_Statuessingle - -0.36123677782604 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Marital_Statuessingle - 0.92273167644514 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Marital_Statuessingle - -0.28990519703322 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Marital_Statuessingle - -0.30755168566136 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   _vqnvar = 4 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 9.0949470177293E-12 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUS7vads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUS7vads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUS7vads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (4 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUS7vlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus7: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof7;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: UTILITY;
MPRINT(SCOREXML):   * NODE: EMSave5;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   QUIT;
MPRINT(SCOREXML):   Data _NULL_;
MPRINT(SCOREXML):   numobs=0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._alldeps","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numobs= attrn(dsid,"nlobs");
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open dependency data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if numobs <= 0 then do;
MPRINT(SCOREXML):   put "WARNING: ScoreXML: No variable dependencies found in code.";
MPRINT(SCOREXML):   call symput('SYSCC','4');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Rhs (keep=rhs RHS_NLiteral UNAME);
MPRINT(SCOREXML):   Set WORK._alldeps;
MPRINT(SCOREXML):   Length UNAME $32;
MPRINT(SCOREXML):   LABEL rhs = ;
MPRINT(SCOREXML):   LABEL RHS_NLiteral = ;
MPRINT(SCOREXML):   if RHS_Dropped = 0 AND (1 NE index(rhs, '_OLD_')) then do;
MPRINT(SCOREXML):   UNAME = UPCASE(rhs);
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Proc Sort Data=WORK._Rhs NODUP out=WORK._Rhs (rename=(rhs=NAME RHS_NLiteral=NLITERAL));
MPRINT(SCOREXML):   By UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Indatavmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("EMWS1.FIMPORT4_DATA","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   NAME = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open input data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Indatavmeta NODUP Out=Work._Indatavmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   dsid = open("EMWS1.FIMPORT4_DATA");
MPRINT(SCOREXML):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   call symput('_engineTable', upcase(attrc(dsid, 'ENGINE')));
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Progout;
MPRINT(SCOREXML):   Set EMWS1.FIMPORT4_DATA;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(SCOREXML):   * Project Name: 20161277_CAassignment2;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: All Tasks;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 28SEP2020:04:23:34;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT4;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus7;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Age ;
MPRINT(SCOREXML):   drop T_Age ;
MPRINT(SCOREXML):   if missing( Age ) then T_Age = .;
MPRINT(SCOREXML):   else T_Age = (Age - 39.8608707020525) * 0.09718656389406;
MPRINT(SCOREXML):   *** Generate dummy variables for Career ;
MPRINT(SCOREXML):   drop Careeradministration Careerblue_collar Careerentrepreneur Careerhousemaid Careermanagement Careerretired Careerself_employed Careerservices Careerstudent Careertechnician Careerunemployed ;
MPRINT(SCOREXML):   if missing( Career ) then do;
MPRINT(SCOREXML):   Careeradministration = .;
MPRINT(SCOREXML):   Careerblue_collar = .;
MPRINT(SCOREXML):   Careerentrepreneur = .;
MPRINT(SCOREXML):   Careerhousemaid = .;
MPRINT(SCOREXML):   Careermanagement = .;
MPRINT(SCOREXML):   Careerretired = .;
MPRINT(SCOREXML):   Careerself_employed = .;
MPRINT(SCOREXML):   Careerservices = .;
MPRINT(SCOREXML):   Careerstudent = .;
MPRINT(SCOREXML):   Careertechnician = .;
MPRINT(SCOREXML):   Careerunemployed = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm16 $ 16;
MPRINT(SCOREXML):   drop _dm16 ;
MPRINT(SCOREXML):   _dm16 = put( Career , $16. );
MPRINT(DMNORMIP):   call dmnorm(_dm16,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   _dm_find = 0;
MPRINT(SCOREXML):   drop _dm_find;
MPRINT(SCOREXML):   if _dm16 <= 'RETIRED' then do;
MPRINT(SCOREXML):   if _dm16 <= 'ENTREPRENEUR' then do;
MPRINT(SCOREXML):   if _dm16 <= 'BLUE-COLLAR' then do;
MPRINT(SCOREXML):   if _dm16 = 'ADMINISTRATION' then do;
MPRINT(SCOREXML):   Careeradministration = 0.50889118500978;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'BLUE-COLLAR' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = 0.56147396576531;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'ENTREPRENEUR' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = 1.5701943823646;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 <= 'MANAGEMENT' then do;
MPRINT(SCOREXML):   if _dm16 = 'HOUSEMAID' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = 1.85246142180295;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'MANAGEMENT' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = 1.08791241838279;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'RETIRED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = 1.45387056599005;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 <= 'STUDENT' then do;
MPRINT(SCOREXML):   if _dm16 <= 'SERVICES' then do;
MPRINT(SCOREXML):   if _dm16 = 'SELF-EMPLOYED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = 1.57681828530897;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'SERVICES' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = 0.91907748535592;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'STUDENT' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = 2.22766154295433;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'TECHNICIAN' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = 0.67382109265536;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm16 = 'UNEMPLOYED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = 1.87600692443571;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not _dm_find then do;
MPRINT(SCOREXML):   Careeradministration = .;
MPRINT(SCOREXML):   Careerblue_collar = .;
MPRINT(SCOREXML):   Careerentrepreneur = .;
MPRINT(SCOREXML):   Careerhousemaid = .;
MPRINT(SCOREXML):   Careermanagement = .;
MPRINT(SCOREXML):   Careerretired = .;
MPRINT(SCOREXML):   Careerself_employed = .;
MPRINT(SCOREXML):   Careerservices = .;
MPRINT(SCOREXML):   Careerstudent = .;
MPRINT(SCOREXML):   Careertechnician = .;
MPRINT(SCOREXML):   Careerunemployed = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Education ;
MPRINT(SCOREXML):   drop Educationilliterate Educationprimary_education Educationprofessional_educat Educationsecondary_education Educationuniversity_educatio ;
MPRINT(SCOREXML):   if missing( Education ) then do;
MPRINT(SCOREXML):   Educationilliterate = .;
MPRINT(SCOREXML):   Educationprimary_education = .;
MPRINT(SCOREXML):   Educationprofessional_educat = .;
MPRINT(SCOREXML):   Educationsecondary_education = .;
MPRINT(SCOREXML):   Educationuniversity_educatio = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm24 $ 24;
MPRINT(SCOREXML):   drop _dm24 ;
MPRINT(SCOREXML):   _dm24 = put( Education , $24. );
MPRINT(DMNORMIP):   call dmnorm(_dm24,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   _dm_find = 0;
MPRINT(SCOREXML):   drop _dm_find;
MPRINT(SCOREXML):   if _dm24 <= 'PROFESSIONAL EDUCATION' then do;
MPRINT(SCOREXML):   if _dm24 <= 'PRIMARY EDUCATION' then do;
MPRINT(SCOREXML):   if _dm24 = 'ILLITERATE' then do;
MPRINT(SCOREXML):   Educationilliterate = 20.6090596234465;
MPRINT(SCOREXML):   Educationprimary_education = -0.19682294664746;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17542254053591;
MPRINT(SCOREXML):   Educationsecondary_education = -0.36121784809716;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'PRIMARY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00970421621424;
MPRINT(SCOREXML):   Educationprimary_education = 1.01611511241349;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17542254053591;
MPRINT(SCOREXML):   Educationsecondary_education = -0.36121784809716;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'PROFESSIONAL EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00970421621424;
MPRINT(SCOREXML):   Educationprimary_education = -0.19682294664746;
MPRINT(SCOREXML):   Educationprofessional_educat = 1.14007453060057;
MPRINT(SCOREXML):   Educationsecondary_education = -0.36121784809716;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'SECONDARY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00970421621424;
MPRINT(SCOREXML):   Educationprimary_education = -0.19682294664746;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17542254053591;
MPRINT(SCOREXML):   Educationsecondary_education = 0.55366801948403;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm24 = 'UNIVERSITY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00970421621424;
MPRINT(SCOREXML):   Educationprimary_education = -0.19682294664746;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17542254053591;
MPRINT(SCOREXML):   Educationsecondary_education = -0.36121784809716;
MPRINT(SCOREXML):   Educationuniversity_educatio = 0.66862327682085;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not _dm_find then do;
MPRINT(SCOREXML):   Educationilliterate = .;
MPRINT(SCOREXML):   Educationprimary_education = .;
MPRINT(SCOREXML):   Educationprofessional_educat = .;
MPRINT(SCOREXML):   Educationsecondary_education = .;
MPRINT(SCOREXML):   Educationuniversity_educatio = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Marital_Statues ;
MPRINT(SCOREXML):   drop Marital_Statuesdivorced Marital_Statuesmarried Marital_Statuessingle ;
MPRINT(SCOREXML):   if missing( Marital_Statues ) then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = .;
MPRINT(SCOREXML):   Marital_Statuesmarried = .;
MPRINT(SCOREXML):   Marital_Statuessingle = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm10 $ 10;
MPRINT(SCOREXML):   drop _dm10 ;
MPRINT(SCOREXML):   _dm10 = put( Marital_Statues , $10. );
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm10 = 'MARRIED' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = -0.20553878536687;
MPRINT(SCOREXML):   Marital_Statuesmarried = 0.46536123012655;
MPRINT(SCOREXML):   Marital_Statuessingle = -0.36123677782606;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm10 = 'SINGLE' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = -0.20553878536687;
MPRINT(SCOREXML):   Marital_Statuesmarried = -0.71627070761013;
MPRINT(SCOREXML):   Marital_Statuessingle = 0.9227316764451;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm10 = 'DIVORCED' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = 1.62171152759367;
MPRINT(SCOREXML):   Marital_Statuesmarried = -0.71627070761013;
MPRINT(SCOREXML):   Marital_Statuessingle = -0.36123677782606;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = .;
MPRINT(SCOREXML):   Marital_Statuesmarried = .;
MPRINT(SCOREXML):   Marital_Statuessingle = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUS7vlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUS7vads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUS7vads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Age ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( T_Age - -0.40255113472262 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( T_Age - 0.39315868658023 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( T_Age - -0.73258092353267 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( T_Age - 0.83960729150403 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( T_Age - 1.28090455713015 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( Careeradministration ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careeradministration - -0.01135022935391 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careeradministration - 0.0214070871274 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careeradministration - 0.06098738450022 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careeradministration - -0.14044083990246 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careeradministration - -0.06050539258479 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerblue_collar ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careerblue_collar - 0.04178889401241 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careerblue_collar - -0.04942346719474 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careerblue_collar - -0.04853686639569 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careerblue_collar - 0.15959550450178 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careerblue_collar - 0.01121903602917 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerentrepreneur ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careerentrepreneur - 0.00891552514965 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careerentrepreneur - 0.00578395610668 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careerentrepreneur - -0.02902112688486 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careerentrepreneur - 0.12300364470167 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careerentrepreneur - 0.01585102039736 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerhousemaid ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careerhousemaid - -0.00703608583967 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careerhousemaid - 0.01487034379795 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careerhousemaid - -0.0311119858684 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careerhousemaid - 0.05656735534367 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careerhousemaid - 0.03933630574618 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careermanagement ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careermanagement - 0.00271152515894 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careermanagement - 0.00193198007523 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careermanagement - -0.03162067884575 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careermanagement - -0.08356069142518 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careermanagement - 0.03072936806827 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerretired ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careerretired - -0.06022266226517 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careerretired - 0.02209869411984 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careerretired - -0.059896518537 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careerretired - 0.19020561298176 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careerretired - 0.15211954384056 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerself_employed ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careerself_employed - 0.0019680644933 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careerself_employed - -0.00853602294626 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careerself_employed - -0.00377354930275 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careerself_employed - 0.21475972156128 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careerself_employed - 0.00463727239776 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerservices ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careerservices - 0.00932295651812 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careerservices - 0.02320892548581 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careerservices - 0.00225022868367 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careerservices - -0.09891082671327 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careerservices - -0.02763834362742 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerstudent ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careerstudent - -0.03469619637911 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careerstudent - -0.03756205430465 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careerstudent - 0.09978232272964 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careerstudent - -0.04080813540891 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careerstudent - -0.04080813540891 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careertechnician ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careertechnician - -0.00126870872531 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careertechnician - 0.00473071924215 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careertechnician - 0.0304980848788 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careertechnician - -0.13491224136642 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careertechnician - -0.03434892827268 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerunemployed ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Careerunemployed - 0.00166493687589 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Careerunemployed - 0.0052420235508 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Careerunemployed - -0.00486727791767 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Careerunemployed - -0.04845755775525 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Careerunemployed - 0.00057605383366 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Educationilliterate ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Educationilliterate - 20.6090596234465 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Educationprimary_education ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Educationprimary_education - -0.01272450687151 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Educationprimary_education - -0.03540643413708 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Educationprimary_education - -0.12048091748438 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Educationprimary_education - -0.19682294664746 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Educationprimary_education - 0.17271110052725 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationprofessional_educat ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Educationprofessional_educat - -0.00002293105105 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Educationprofessional_educat - 0.02317265288869 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Educationprofessional_educat - -0.00716571032886 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Educationprofessional_educat - -0.17542254053591 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Educationprofessional_educat - -0.00210465551031 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationsecondary_education ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Educationsecondary_education - 0.03494827404438 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Educationsecondary_education - 0.01058408807225 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Educationsecondary_education - 0.01108558640189 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Educationsecondary_education - -0.36121784809716 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Educationsecondary_education - -0.07172978938734 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Educationuniversity_educatio ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Educationuniversity_educatio - -0.02634265832584 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Educationuniversity_educatio - 0.00046200106339 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Educationuniversity_educatio - 0.09012608817189 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Educationuniversity_educatio - -0.29911428077881 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Educationuniversity_educatio - -0.05991956652018 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Marital_Statuesdivorced ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Marital_Statuesdivorced - -0.2055387853669 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Marital_Statuesdivorced - 1.62171152759379 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Marital_Statuesdivorced - -0.20553878536685 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Marital_Statuesdivorced - -0.0025109728157 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Marital_Statuesdivorced - -0.18425004587569 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Marital_Statuesmarried ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Marital_Statuesmarried - 0.4653612301265 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Marital_Statuesmarried - -0.71627070761011 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Marital_Statuesmarried - -0.71627070761022 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Marital_Statuesmarried - 0.2684225738371 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Marital_Statuesmarried - 0.40218818119057 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Marital_Statuessingle ) then do;
MPRINT(SCOREXML):   CLUS7vads [1] + ( Marital_Statuessingle - -0.36123677782599 )**2;
MPRINT(SCOREXML):   CLUS7vads [2] + ( Marital_Statuessingle - -0.36123677782604 )**2;
MPRINT(SCOREXML):   CLUS7vads [3] + ( Marital_Statuessingle - 0.92273167644514 )**2;
MPRINT(SCOREXML):   CLUS7vads [4] + ( Marital_Statuessingle - -0.28990519703322 )**2;
MPRINT(SCOREXML):   CLUS7vads [5] + ( Marital_Statuessingle - -0.30755168566136 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   _vqnvar = 4 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 9.0949470177293E-12 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUS7vads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUS7vads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUS7vads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (4 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUS7vlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus7: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof7;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: UTILITY;
MPRINT(SCOREXML):   * NODE: EMSave5;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if _N_=1 then do;
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   stop;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Varsmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._Progout","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   Name = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open program output.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Varsmeta NODUP Out=Work._Varsmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Invarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Rhs (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   if (a and b) then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Outvarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Varsmeta (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   If a and not b then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   LENGTH strbuf $ 80;
MPRINT(SCOREXML):   strbuf = ' ';
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '<?xml version="1.0" encoding="utf-8"?>';
MPRINT(SCOREXML):   put '<Score>';
MPRINT(SCOREXML):   put @3 '<Producer>';
MPRINT(SCOREXML):   put @6 "<Name> SAS Enterprise Miner </Name>";
MPRINT(SCOREXML):   strbuf = '<Version> ' || "6.2" || ' </Version>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   syslocale = getpxlocale();
MPRINT(SCOREXML):   strbuf = '<Locale> '|| strip(syslocale) ||' </Locale>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   sysencode = getpxencoding('sas12');
MPRINT(SCOREXML):   strbuf = '<Encoding> '|| strip(sysencode) ||' </Encoding>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   put @3 '</Producer>';
MPRINT(SCOREXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(SCOREXML):   put @3 '<CFunction>';
MPRINT(SCOREXML):   put @6 '<Name> score </Name>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="input">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "4" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="output">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "3" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @3 '</CFunction>';
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Invarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = ' <Input count="' || "4" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "4" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Outvarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = ' <Input count="' || "3" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "3" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '</Score>';
MPRINT(SCOREXML):   Run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _code;
MPRINT(EM_DIAGRAM):   filename _xml;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Input table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc sort data=work._invarsmeta out=_inpckgtemp(keep=NAME);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.FIMPORT4_EMCMETADEFAULT out=_inpckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\input.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.input;
MPRINT(EM_DIAGRAM):   merge _inpckgtemp(in=_a) _inpckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=work._progout out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('work._progout');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set work._progout;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=work._progout out=WORK.M1X_ETXR noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1X_ETXR;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1X_ETXR(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1X_ETXR;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1X_ETXR;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2M5RZ9W NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2M5RZ9W;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2M5RZ9W;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0N5XTYS(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2M5RZ9W;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2M5RZ9W;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2M5RZ9W;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2M5RZ9W;
MPRINT(EMADVISECOLUMNS):   set WORK.M2M5RZ9W;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=work._empckgtemp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_outvarsmeta(keep=NAME LABEL) out=work._empckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\output.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.output;
MPRINT(EM_DIAGRAM):   merge work._empckgtemp(in=_a) work._empckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    proc datasets library=WORK NOLIST NOWARN NODETAILS;
MPRINT(EM_DIAGRAM):   delete _alldeps _Indatavmeta _Keepvars _Keepnames _Invarsmeta _Progout _Outvarsmeta _Rhs _Varsmeta;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_EMSave5_01KNL\miningResult.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* FIMPORT4 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:39 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN18843";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT4_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.FIMPORT4_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.FIMPORT4_EMTRAINVARIABLE / view=WORK.FIMPORT4_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "DROP"n = "Drop (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT4_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:39 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1R9MLHO as select * from WORK.M0NU6UBA order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1R9MLHO as select * from WORK.M0_AROIY order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1R9MLHO compare=work._comp1R9MLHO out=WORK._DIFF1DVT1GP noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP108RND71 as select * from WORK._DIFF1DVT1GP where NAME in (select NAME from WORK._DIFF1DVT1GP where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM0WB08CV as select * from WORK._DIFF1DVT1GP where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF1DVT1GP where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM0WB08CV as select * from WORK._DIFF1DVT1GP where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF1DVT1GP where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM0WB08CV;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM0WB08CV;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM0WB08CV;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM0WB08CV;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\VARIABLESETDELTA.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\DELTACODE.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "PROF7" 
Traverser: WaitingNode "EMSAVE5" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Clus7 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:40 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus7_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus7_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus7_EMTRAINVARIABLE / view=WORK.Clus7_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus7_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus7_OUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus7_OUTMEAN / view=WORK.Clus7_OUTMEAN;
MPRINT(EM_DIAGRAM):   label "_CRIT_"n = "Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_XCONV_"n = "Maximum Relative Change in Cluster Seeds (N)";
MPRINT(EM_DIAGRAM):   label "_FCONV_"n = "Improvement in Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "_FREQ_"n = "Frequency of Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_RMSSTD_"n = "Root-Mean-Square Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "_RADIUS_"n = "Maximum Distance from Cluster Seed (N)";
MPRINT(EM_DIAGRAM):   label "_NEAR_"n = "Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_GAP_"n = "Distance to Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "Age"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Careeradministration"n = "Career=administration (N)";
MPRINT(EM_DIAGRAM):   label "Careerblue_collar"n = "Career=blue-collar (N)";
MPRINT(EM_DIAGRAM):   label "Careerentrepreneur"n = "Career=entrepreneur (N)";
MPRINT(EM_DIAGRAM):   label "Careerhousemaid"n = "Career=housemaid (N)";
MPRINT(EM_DIAGRAM):   label "Careermanagement"n = "Career=management (N)";
MPRINT(EM_DIAGRAM):   label "Careerretired"n = "Career=retired (N)";
MPRINT(EM_DIAGRAM):   label "Careerself_employed"n = "Career=self-employed (N)";
MPRINT(EM_DIAGRAM):   label "Careerservices"n = "Career=services (N)";
MPRINT(EM_DIAGRAM):   label "Careerstudent"n = "Career=student (N)";
MPRINT(EM_DIAGRAM):   label "Careertechnician"n = "Career=technician (N)";
MPRINT(EM_DIAGRAM):   label "Careerunemployed"n = "Career=unemployed (N)";
MPRINT(EM_DIAGRAM):   label "Educationilliterate"n = "Education=illiterate (N)";
MPRINT(EM_DIAGRAM):   label "Educationprimary_education"n = "Education=primary education (N)";
MPRINT(EM_DIAGRAM):   label "Educationprofessional_educat"n = "Education=professional education (N)";
MPRINT(EM_DIAGRAM):   label "Educationsecondary_education"n = "Education=secondary education (N)";
MPRINT(EM_DIAGRAM):   label "Educationuniversity_educatio"n = "Education=university education (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuesdivorced"n = "Marital_Statues=divorced (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuesmarried"n = "Marital_Statues=married (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuessingle"n = "Marital_Statues=single (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus7_OUTMEAN(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus7_OUTSTAT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus7_OUTSTAT / view=WORK.Clus7_OUTSTAT;
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Type of Observation (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "Over_All"n = "Statistic Applying Over All Variables (N)";
MPRINT(EM_DIAGRAM):   label "Age"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Careeradministration"n = "Career=administration (N)";
MPRINT(EM_DIAGRAM):   label "Careerblue_collar"n = "Career=blue-collar (N)";
MPRINT(EM_DIAGRAM):   label "Careerentrepreneur"n = "Career=entrepreneur (N)";
MPRINT(EM_DIAGRAM):   label "Careerhousemaid"n = "Career=housemaid (N)";
MPRINT(EM_DIAGRAM):   label "Careermanagement"n = "Career=management (N)";
MPRINT(EM_DIAGRAM):   label "Careerretired"n = "Career=retired (N)";
MPRINT(EM_DIAGRAM):   label "Careerself_employed"n = "Career=self-employed (N)";
MPRINT(EM_DIAGRAM):   label "Careerservices"n = "Career=services (N)";
MPRINT(EM_DIAGRAM):   label "Careerstudent"n = "Career=student (N)";
MPRINT(EM_DIAGRAM):   label "Careertechnician"n = "Career=technician (N)";
MPRINT(EM_DIAGRAM):   label "Careerunemployed"n = "Career=unemployed (N)";
MPRINT(EM_DIAGRAM):   label "Educationilliterate"n = "Education=illiterate (N)";
MPRINT(EM_DIAGRAM):   label "Educationprimary_education"n = "Education=primary education (N)";
MPRINT(EM_DIAGRAM):   label "Educationprofessional_educat"n = "Education=professional education (N)";
MPRINT(EM_DIAGRAM):   label "Educationsecondary_education"n = "Education=secondary education (N)";
MPRINT(EM_DIAGRAM):   label "Educationuniversity_educatio"n = "Education=university education (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuesdivorced"n = "Marital_Statues=divorced (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuesmarried"n = "Marital_Statues=married (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuessingle"n = "Marital_Statues=single (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus7_OUTSTAT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus7_INPUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus7_INPUTMEAN / view=WORK.Clus7_INPUTMEAN;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_CHAR_"n = "Segment Id (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Name (N)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "INPUT"n = "Input (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CV"n = "Coefficient of Variation (N)";
MPRINT(EM_DIAGRAM):   label "STDMEAN"n = "Normalized Mean (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus7_INPUTMEAN(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus7_TREE_PLOT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus7_TREE_PLOT / view=WORK.Clus7_TREE_PLOT;
MPRINT(EM_DIAGRAM):   label "NODETEXT"n = "Node Text (C)";
MPRINT(EM_DIAGRAM):   label "TEXTALL"n = "All Text (C)";
MPRINT(EM_DIAGRAM):   label "N"n = "Train: Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "NODECOLOR"n = "Node Color (N)";
MPRINT(EM_DIAGRAM):   label "parent"n = "Parent Id (N)";
MPRINT(EM_DIAGRAM):   label "abovetext"n = "Above Text (C)";
MPRINT(EM_DIAGRAM):   label "NODE"n = "Node (N)";
MPRINT(EM_DIAGRAM):   label "DEPTH"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   label "LINKWIDTH"n = "Link Width (N)";
MPRINT(EM_DIAGRAM):   label "belowtext"n = "Below Text (C)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Square Error (N)";
MPRINT(EM_DIAGRAM):   label "P__SEGMENT_5"n = "Predicted Variable (N)";
MPRINT(EM_DIAGRAM):   label "traintotal"n = "Train Total (N)";
MPRINT(EM_DIAGRAM):   label "index"n = "Leaf Index (N)";
MPRINT(EM_DIAGRAM):   label "percevent_train"n = "Percent Cases (N)";
MPRINT(EM_DIAGRAM):   label "perc_train"n = "Event Percentage (N)";
MPRINT(EM_DIAGRAM):   label "tprob"n = "Training Percent (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus7_TREE_PLOT(obs=10000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus7_OUTIMPORT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus7_OUTIMPORT / view=WORK.Clus7_OUTIMPORT;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NRULES"n = "Number of Splitting Rules (N)";
MPRINT(EM_DIAGRAM):   label "NSURROGATES"n = "Number of Surrogate Rules (N)";
MPRINT(EM_DIAGRAM):   label "IMPORTANCE"n = "Importance (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus7_OUTIMPORT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus7_PROFILE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus7_PROFILE / view=WORK.Clus7_PROFILE;
MPRINT(EM_DIAGRAM):   label "BYPERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Variable (N)";
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "NumericValue"n = "Numeric Value (N)";
MPRINT(EM_DIAGRAM):   label "FmtValue"n = "Formatted Value (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "_Label_"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "orderedValue"n = "Ordered Values (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus7_PROFILE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus7_DISTANCE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus7_DISTANCE / view=WORK.Clus7_DISTANCE;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_1"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_2"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_3"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_4"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_5"n = " (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus7_DISTANCE(obs=60000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:40 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base18CXACV as select * from WORK.M0T6KQ7D order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp18CXACV as select * from WORK.M3SMZPYW order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base18CXACV compare=work._comp18CXACV out=WORK._DIFF1K1LF8I noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP137ZJI7K as select * from WORK._DIFF1K1LF8I where NAME in (select NAME from WORK._DIFF1K1LF8I where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM3N9MEE1 as select * from WORK._DIFF1K1LF8I where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF1K1LF8I where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM3N9MEE1 as select * from WORK._DIFF1K1LF8I where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF1K1LF8I where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM3N9MEE1;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM3N9MEE1;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM3N9MEE1;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM3N9MEE1;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "EMSAVE5" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Prof7 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:41 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN18957";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof7_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof7_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof7_EMTRAINVARIABLE / view=WORK.Prof7_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof7_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof7_SIZE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof7_SIZE / view=WORK.Prof7_SIZE;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Count"n = "Frequency Count (N)(12.0)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)(5.2)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof7_SIZE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof7_STATS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof7_STATS / view=WORK.Prof7_STATS;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof7_STATS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof7_CLASSDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof7_CLASSDIST / view=WORK.Prof7_CLASSDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (C)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Groupindex"n = "Group Index (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof7_CLASSDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof7_INTDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof7_INTDIST / view=WORK.Prof7_INTDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (N)(12.3)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Color"n = "Color (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof7_INTDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof7_WORTH OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof7_WORTH / view=WORK.Prof7_WORTH;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof7_WORTH(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:41 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base3BJ3VE0 as select * from WORK.M2KTGYMX order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp3BJ3VE0 as select * from WORK.M3CJ8DUS order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base3BJ3VE0 compare=work._comp3BJ3VE0 out=WORK._DIFF0DTZ1F9 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP12KPAWNF as select * from WORK._DIFF0DTZ1F9 where NAME in (select NAME from WORK._DIFF0DTZ1F9 where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM2HKE0_1 as select * from WORK._DIFF0DTZ1F9 where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF0DTZ1F9 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM2HKE0_1 as select * from WORK._DIFF0DTZ1F9 where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF0DTZ1F9 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM2HKE0_1;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM2HKE0_1;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM2HKE0_1;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM2HKE0_1;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMNOTES.txt" encoding="UTF-8" NOBOM;
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* EMSave5 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:42 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN19011";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\EMSave5_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.EMSave5_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.EMSave5_EMTRAINVARIABLE / view=WORK.EMSave5_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   label "REPORT"n = "Report (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.EMSave5_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.EMSave5_SAVEOUT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.EMSave5_SAVEOUT / view=WORK.EMSave5_SAVEOUT;
MPRINT(EM_DIAGRAM):   label "name"n = "Output Location (C)";
MPRINT(EM_DIAGRAM):   label "nobs"n = "Total Observations (C)";
MPRINT(EM_DIAGRAM):   label "outnobs"n = "Saved Observations (C)";
MPRINT(EM_DIAGRAM):   label "vars"n = "Number of Variables (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.EMSave5_SAVEOUT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:42 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.EMSave5_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof7_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base149Z46K as select * from WORK.M24CAW5X order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp149Z46K as select * from WORK.M17UEFF6 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base149Z46K compare=work._comp149Z46K out=WORK._DIFF08AZ_C5 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\EMNOTES.txt" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\dsapimeta.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\layout.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc printto print=#LN19085;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options NODATE NONUMBER;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RUNSTATUS noobs label;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options DATE NUMBER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_EMSave5_01KNL;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   rc = 0;
MPRINT(EM_DIAGRAM):   Pack3WN4 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3WN4, "EMSave", ' type="EM Result" version="14.1" Report="20161277_Assignment2_EMSave5_01KNL" nodeid="EMSave5" description="Save Data" component="EMSave"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package EMSave began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3MYM = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3MYM, "MININGRESULT", ' NAME="Mining Result Metadata"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package MININGRESULT began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3WN4, Pack3MYM, rc, "NESTED_NAME", "MININGRESULT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0Z4FA73 "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3MYM, "fileref:F0Z4FA73", "BINARY", "text/xml", 'SXML', 'NAME=SCOREXML TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F00FK4L4 "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\input.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3MYM, "fileref:F00FK4L4", "BINARY", "text/xml", 'INPUTTABLE', 'NAME=INPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\input.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1EIFJNC "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\output.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3MYM, "fileref:F1EIFJNC", "BINARY", "text/xml", 'OUTPUTTABLE', 'NAME=OUTPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\output.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0Z92LBP "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_EMSave5_01KNL\miningResult.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3MYM, "fileref:F0Z92LBP", "BINARY", "text/xml", 'MININGRESULT', 'NAME=MININGRESULT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_EMSave5_01KNL\miningResult.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2L86 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2L86, "File Import - Demographic - Task 1", ' NAME="FIMPORT4"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package File Import - Demographic - Task 1 began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3BMWYNV "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT4_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2L86, "fileref:F3BMWYNV", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT4_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1E3I4T5 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2L86, "fileref:F1E3I4T5", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1CW9C3N "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2L86, "fileref:F1CW9C3N", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2L86, "work", "FIMPORT4_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1FEYZNF "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2L86, "fileref:F1FEYZNF", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0NQB_F1 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2L86, "fileref:F0NQB_F1", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F049ZPOT "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2L86, "fileref:F049ZPOT", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F36FT0E3 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2L86, "fileref:F36FT0E3", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3WN4, Pack2L86, rc, "NESTED_NAME", "FIMPORT4");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0HQ8 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0HQ8, "Cluster", ' NAME="Clus7"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Cluster began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0CF3MYG "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus7_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0HQ8, "fileref:F0CF3MYG", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus7_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2_SG4QF "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0HQ8, "fileref:F2_SG4QF", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F35NQINQ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0HQ8, "fileref:F35NQINQ", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0HQ8, "work", "Clus7_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2JGDKZ6 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0HQ8, "fileref:F2JGDKZ6", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1G5FV04 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0HQ8, "fileref:F1G5FV04", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2FMUYX3 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0HQ8, "fileref:F2FMUYX3", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0D983ZI "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0HQ8, "fileref:F0D983ZI", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2GHLW12 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0HQ8, "fileref:F2GHLW12", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F33KSZO6 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0HQ8, "fileref:F33KSZO6", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0HQ8, "work", "Clus7_OUTMEAN", "CLUSMEAN", "NAME=OUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0HQ8, "work", "Clus7_OUTSTAT", "CLUSSTAT", "NAME=OUTSTAT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0HQ8, "work", "Clus7_INPUTMEAN", "INPUTMEAN", "NAME=INPUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file INPUTMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0HQ8, "work", "Clus7_TREE_PLOT", "TREE_PLOT", "NAME=TREE_PLOT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file TREE_PLOT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2CB79H8 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\ENGLISHRULES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0HQ8, "fileref:F2CB79H8", "TEXT", "text/plain", 'ENGLISHRULES', 'NAME=EnglishRules TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\ENGLISHRULES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0HQ8, "work", "Clus7_OUTIMPORT", "IMPORTANCE", "NAME=OUTIMPORT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file IMPORTANCE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0HQ8, "work", "Clus7_PROFILE", "Segment Profiles", "NAME=PROFILE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file PROFILE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1EG_ = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1EG_, "GRAPH", ' NAME="GRAPH"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package GRAPH began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0HQ8, Pack1EG_, rc, "NESTED_NAME", "GRAPH");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2X_KW8I "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\GRAPH\Distance.gif";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1EG_, "fileref:F2X_KW8I", "BINARY", "image/gif", 'Distance', 'NAME="Distance" TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\GRAPH\Distance.gif inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0HQ8, "work", "Clus7_DISTANCE", "Distance Table", "NAME=DISTANCE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file DISTANCETABLE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3WN4, Pack0HQ8, rc, "NESTED_NAME", "Clus7");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0YHT = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0YHT, "Segment Profile", ' NAME="Prof7"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Segment Profile began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0BB6TXE "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof7_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0YHT, "fileref:F0BB6TXE", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof7_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2ADLP2H "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0YHT, "fileref:F2ADLP2H", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F13YJHTF "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0YHT, "fileref:F13YJHTF", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0YHT, "work", "Prof7_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1DB73OK "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0YHT, "fileref:F1DB73OK", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3AC4JWV "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0YHT, "fileref:F3AC4JWV", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F18F1YGM "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0YHT, "fileref:F18F1YGM", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0DO3DXN "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0YHT, "fileref:F0DO3DXN", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1ZPVK7V "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0YHT, "fileref:F1ZPVK7V", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0YHT, "work", "Prof7_SIZE", "Profileview", "NAME=SIZE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0YHT, "work", "Prof7_STATS", "Profileview", "NAME=STATS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0YHT, "work", "Prof7_CLASSDIST", "Profileview", "NAME=CLASSDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0YHT, "work", "Prof7_INTDIST", "Profileview", "NAME=INTDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0YHT, "work", "Prof7_WORTH", "profworth", "NAME=WORTH TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file profworth inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3WN4, Pack0YHT, rc, "NESTED_NAME", "Prof7");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0CQG = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0CQG, "Save Data", ' NAME="EMSave5"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Save Data began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2PP58GW "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\EMSave5_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CQG, "fileref:F2PP58GW", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\EMSave5_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1UE2P15 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CQG, "fileref:F1UE2P15", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1S5JUE3 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CQG, "fileref:F1S5JUE3", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0CQG, "work", "EMSave5_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3OQMZ5P "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CQG, "fileref:F3OQMZ5P", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3MN0QXM "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CQG, "fileref:F3MN0QXM", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1TLCPD3 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CQG, "fileref:F1TLCPD3", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F16DYY2Y "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0CQG, "fileref:F16DYY2Y", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack0CQG, "work", "EMSave5_SAVEOUT", "SAVEOUT", "NAME=SAVEOUT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file SAVEOUT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3WN4, Pack0CQG, rc, "NESTED_NAME", "EMSave5");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1WRC = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1WRC, "WORKSPACE", ' NAME="Workspace configuration"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package WORKSPACE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3WN4, Pack1WRC, rc, "NESTED_NAME", "WORKSPACE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3P6KDIE "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\dsapi.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1WRC, "fileref:F3P6KDIE", "TEXT", "text/plain", 'Batch Code', 'NAME=BATCHCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\dsapi.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3I4K2DO "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\dsapimeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1WRC, "fileref:F3I4K2DO", "BINARY", "text/xml", 'Batch Metadata', 'NAME=BATCHMETADATA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\dsapimeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1JOL2AX "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\layout.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1WRC, "fileref:F1JOL2AX", "BINARY", "text/xml", 'Properties', 'NAME=LAYOUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\layout.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2W8XSM0 "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3WN4, "fileref:F2W8XSM0", "TEXT", "text/plain", 'NODESTATUS', 'NAME=NODESTATUS TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1EP6 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1EP6, "PATHSCORE", ' NAME="Path score code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PATHSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3WN4, Pack1EP6, rc, "NESTED_NAME", "PATHSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3FCC = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3FCC, "SASSCORE", ' NAME="SAS Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package SASSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1EP6, Pack3FCC, rc, "NESTED_NAME", "SASSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F124OYIA "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_23F0PK8score.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3FCC, "fileref:F124OYIA", "TEXT", "text/plain", 'SASCODE', 'NAME=SASCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_23F0PK8score.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack286_ = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack286_, "PMMLSCORE", ' NAME="PMML Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PMMLSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1EP6, Pack286_, rc, "NESTED_NAME", "PMMLSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   pubType = "TO_ARCHIVE";
MPRINT(EM_DIAGRAM):   properties='archive_path, archive_name';
MPRINT(EM_DIAGRAM):   path = "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_EMSave5_01KNL";
MPRINT(EM_DIAGRAM):   name = "miningResult";
MPRINT(EM_DIAGRAM):   call package_publish(Pack3WN4, pubType, rc, properties, path, name);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Publish package Pack3WN4 successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call package_end(Pack3WN4, rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Pack3WN4 ended successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
Package EMSave began successfully.
Package MININGRESULT began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\input.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\output.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_EMSave5_01KNL\miningResult.xml inserted successfully.
Package File Import - Demographic - Task 1 began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT4_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT4\EMTRAINCODE.sas inserted successfully.
spk_PACKAGEINSERT_note
Package Cluster began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus7_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMFLOWSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\EMPUBLISHSCORE.sas inserted successfully.
CSV file CLUSMEAN inserted successfully.
CSV file CLUSSTAT inserted successfully.
CSV file INPUTMEAN inserted successfully.
CSV file TREE_PLOT inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\ENGLISHRULES.txt inserted successfully.
CSV file IMPORTANCE inserted successfully.
CSV file PROFILE inserted successfully.
Package GRAPH began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus7\GRAPH\Distance.gif inserted successfully.
CSV file DISTANCETABLE inserted successfully.
spk_PACKAGEINSERT_note
Package Segment Profile began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof7_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof7\EMCUSTOMGRAPH.xml inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file profworth inserted successfully.
spk_PACKAGEINSERT_note
Package Save Data began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\EMSave5_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave5\EMTRAINCODE.sas inserted successfully.
CSV file SAVEOUT inserted successfully.
spk_PACKAGEINSERT_note
Package WORKSPACE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\dsapi.sas inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\dsapimeta.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_3OBTCPR\layout.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out inserted successfully.
Package PATHSCORE began successfully.
spk_PACKAGEINSERT_note
Package SASSCORE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_23F0PK8score.sas inserted successfully.
Package PMMLSCORE began successfully.
spk_PACKAGEINSERT_note
Publish package Pack3WN4 successfully.
Package Pack3WN4 ended successfully.
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   filename F0Z4FA73;
MPRINT(EM_DIAGRAM):   filename F00FK4L4;
MPRINT(EM_DIAGRAM):   filename F1EIFJNC;
MPRINT(EM_DIAGRAM):   filename F0Z92LBP;
MPRINT(EM_DIAGRAM):   filename F3BMWYNV;
MPRINT(EM_DIAGRAM):   filename F1E3I4T5;
MPRINT(EM_DIAGRAM):   filename F1CW9C3N;
MPRINT(EM_DIAGRAM):   filename F1FEYZNF;
MPRINT(EM_DIAGRAM):   filename F0NQB_F1;
MPRINT(EM_DIAGRAM):   filename F049ZPOT;
MPRINT(EM_DIAGRAM):   filename F36FT0E3;
MPRINT(EM_DIAGRAM):   filename F0CF3MYG;
MPRINT(EM_DIAGRAM):   filename F2_SG4QF;
MPRINT(EM_DIAGRAM):   filename F35NQINQ;
MPRINT(EM_DIAGRAM):   filename F2JGDKZ6;
MPRINT(EM_DIAGRAM):   filename F1G5FV04;
MPRINT(EM_DIAGRAM):   filename F2FMUYX3;
MPRINT(EM_DIAGRAM):   filename F0D983ZI;
MPRINT(EM_DIAGRAM):   filename F2GHLW12;
MPRINT(EM_DIAGRAM):   filename F33KSZO6;
MPRINT(EM_DIAGRAM):   filename F2CB79H8;
MPRINT(EM_DIAGRAM):   filename F2X_KW8I;
MPRINT(EM_DIAGRAM):   filename F0BB6TXE;
MPRINT(EM_DIAGRAM):   filename F2ADLP2H;
MPRINT(EM_DIAGRAM):   filename F13YJHTF;
MPRINT(EM_DIAGRAM):   filename F1DB73OK;
MPRINT(EM_DIAGRAM):   filename F3AC4JWV;
MPRINT(EM_DIAGRAM):   filename F18F1YGM;
MPRINT(EM_DIAGRAM):   filename F0DO3DXN;
MPRINT(EM_DIAGRAM):   filename F1ZPVK7V;
MPRINT(EM_DIAGRAM):   filename F2PP58GW;
MPRINT(EM_DIAGRAM):   filename F1UE2P15;
MPRINT(EM_DIAGRAM):   filename F1S5JUE3;
MPRINT(EM_DIAGRAM):   filename F3OQMZ5P;
MPRINT(EM_DIAGRAM):   filename F3MN0QXM;
MPRINT(EM_DIAGRAM):   filename F1TLCPD3;
MPRINT(EM_DIAGRAM):   filename F16DYY2Y;
MPRINT(EM_DIAGRAM):   filename F3P6KDIE;
MPRINT(EM_DIAGRAM):   filename F3I4K2DO;
MPRINT(EM_DIAGRAM):   filename F1JOL2AX;
MPRINT(EM_DIAGRAM):   filename F2W8XSM0;
MPRINT(EM_DIAGRAM):   filename F124OYIA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options notes source;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
104793     %let eminfo= %str();
104794     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
104795     set EMWS1.EMSave6_ExportSet;
MPRINT(EM_DIAGRAM):   set EMWS1.EMSave6_ExportSet;
104796     where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
MPRINT(EM_DIAGRAM):   where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
104797     call symput('eminfo', strip(eminfo));
MPRINT(EM_DIAGRAM):   call symput('eminfo', strip(eminfo));
104798     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.EMSAVE6_EXPORTSET.
      WHERE (eminfo not = ' ') and NODEPORT in ('DATA', 'TRAIN');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

Retrieving Score Code FIMPORT5 
Traverser: WaitingNode "PROF8" 
Traverser: WaitingNode "EMSAVE6" 
traverser_readyNode_note 
Retrieving Score Code Clus8 
Traverser: WaitingNode "EMSAVE6" 
traverser_readyNode_note 
Retrieving Score Code Prof8 
traverser_readyNode_note 
Retrieving Score Code EMSave6 
104799     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
104800     * Report: Determine If validvarname ANY variables are score inputs;
MPRINT(EM_DIAGRAM):   * Report: Determine If validvarname ANY variables are score inputs;
104801     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
104802     filename _pref "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_00NRZK7score.sas";
MPRINT(EM_DIAGRAM):   filename _pref "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_00NRZK7score.sas";
104803     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
104804     %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   * EM Version: 14.1;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M3P062415;
MPRINT(EM_DIAGRAM):   * Host: ba-teaching;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(EM_DIAGRAM):   * Project Name: 20161277_CAassignment2;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: All Tasks;
MPRINT(EM_DIAGRAM):   * Generated by: 20161277;
MPRINT(EM_DIAGRAM):   * Date: 28SEP2020:04:23:46;
MPRINT(EM_DIAGRAM):   * Macro variable identifying the scored data set;
MPRINT(EM_DIAGRAM):   *%let EM_SCORE_OUTPUT=;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT5;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Clustering;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Clus8;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize Number_of_Contacts ;
MPRINT(EM_DIAGRAM):   drop T_Number_of_Contacts ;
MPRINT(EM_DIAGRAM):   if missing( Number_of_Contacts ) then T_Number_of_Contacts = .;
MPRINT(EM_DIAGRAM):   else T_Number_of_Contacts = (Number_of_Contacts - 2.56666230879853) * 0.36134043338427;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Contact_Type ;
MPRINT(EM_DIAGRAM):   drop Contact_Typecellular Contact_Typetelephone ;
MPRINT(EM_DIAGRAM):   if missing( Contact_Type ) then do;
MPRINT(EM_DIAGRAM):   Contact_Typecellular = .;
MPRINT(EM_DIAGRAM):   Contact_Typetelephone = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm11 $ 11;
MPRINT(EM_DIAGRAM):   drop _dm11 ;
MPRINT(EM_DIAGRAM):   _dm11 = put( Contact_Type , $11. );
MPRINT(DMNORMIP):   call dmnorm(_dm11,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm11 = 'CELLULAR' then do;
MPRINT(EM_DIAGRAM):   Contact_Typecellular = 0.5314009348507;
MPRINT(EM_DIAGRAM):   Contact_Typetelephone = -0.5314009348507;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm11 = 'TELEPHONE' then do;
MPRINT(EM_DIAGRAM):   Contact_Typecellular = -0.94088454423979;
MPRINT(EM_DIAGRAM):   Contact_Typetelephone = 0.94088454423979;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Contact_Typecellular = .;
MPRINT(EM_DIAGRAM):   Contact_Typetelephone = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Mortage ;
MPRINT(EM_DIAGRAM):   drop Mortageno Mortageyes ;
MPRINT(EM_DIAGRAM):   if missing( Mortage ) then do;
MPRINT(EM_DIAGRAM):   Mortageno = .;
MPRINT(EM_DIAGRAM):   Mortageyes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
MPRINT(EM_DIAGRAM):   _dm5 = put( Mortage , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm5 = 'YES' then do;
MPRINT(EM_DIAGRAM):   Mortageno = -0.65517776074461;
MPRINT(EM_DIAGRAM):   Mortageyes = 0.65517776074461;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'NO' then do;
MPRINT(EM_DIAGRAM):   Mortageno = 0.76313171226595;
MPRINT(EM_DIAGRAM):   Mortageyes = -0.76313171226595;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Mortageno = .;
MPRINT(EM_DIAGRAM):   Mortageyes = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Personal_Loan ;
MPRINT(EM_DIAGRAM):   drop Personal_Loanno Personal_Loanyes ;
MPRINT(EM_DIAGRAM):   if missing( Personal_Loan ) then do;
MPRINT(EM_DIAGRAM):   Personal_Loanno = .;
MPRINT(EM_DIAGRAM):   Personal_Loanyes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm5 $ 5;
MPRINT(EM_DIAGRAM):   drop _dm5 ;
MPRINT(EM_DIAGRAM):   _dm5 = put( Personal_Loan , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm5 = 'NO' then do;
MPRINT(EM_DIAGRAM):   Personal_Loanno = 0.30377980276534;
MPRINT(EM_DIAGRAM):   Personal_Loanyes = -0.30377980276534;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm5 = 'YES' then do;
MPRINT(EM_DIAGRAM):   Personal_Loanno = -1.64588600639067;
MPRINT(EM_DIAGRAM):   Personal_Loanyes = 1.64588600639067;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Personal_Loanno = .;
MPRINT(EM_DIAGRAM):   Personal_Loanyes = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUS8vlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUS8vads [5] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 5;
MPRINT(EM_DIAGRAM):   CLUS8vads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_Number_of_Contacts ) then do;
MPRINT(EM_DIAGRAM):   CLUS8vads [1] + ( T_Number_of_Contacts - 10.7903151830205 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [2] + ( T_Number_of_Contacts - 2.52017908239013 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [3] + ( T_Number_of_Contacts - -0.12550862331438 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [4] + ( T_Number_of_Contacts - -0.20398232926234 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [5] + ( T_Number_of_Contacts - 6.26509244330862 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( Contact_Typecellular ) then do;
MPRINT(EM_DIAGRAM):   CLUS8vads [1] + ( Contact_Typecellular - -0.309905053201 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [2] + ( Contact_Typecellular - -0.03254726128919 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [3] + ( Contact_Typecellular - -0.94088454423959 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [4] + ( Contact_Typecellular - 0.5314009348508 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [5] + ( Contact_Typecellular - -0.36477283503046 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Contact_Typetelephone ) then do;
MPRINT(EM_DIAGRAM):   CLUS8vads [1] + ( Contact_Typetelephone - 0.309905053201 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [2] + ( Contact_Typetelephone - 0.03254726128919 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [3] + ( Contact_Typetelephone - 0.94088454423959 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [4] + ( Contact_Typetelephone - -0.5314009348508 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [5] + ( Contact_Typetelephone - 0.36477283503046 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Mortageno ) then do;
MPRINT(EM_DIAGRAM):   CLUS8vads [1] + ( Mortageno - 0.00332306601029 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [2] + ( Mortageno - 0.00834885982196 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [3] + ( Mortageno - 0.07599294978511 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [4] + ( Mortageno - -0.04412093601248 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [5] + ( Mortageno - 0.10723365557727 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Mortageyes ) then do;
MPRINT(EM_DIAGRAM):   CLUS8vads [1] + ( Mortageyes - -0.00332306601029 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [2] + ( Mortageyes - -0.00834885982196 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [3] + ( Mortageyes - -0.07599294978511 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [4] + ( Mortageyes - 0.04412093601248 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [5] + ( Mortageyes - -0.10723365557727 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Personal_Loanno ) then do;
MPRINT(EM_DIAGRAM):   CLUS8vads [1] + ( Personal_Loanno - 0.12970249837641 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [2] + ( Personal_Loanno - -0.00221104280874 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [3] + ( Personal_Loanno - 0.00849877812928 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [4] + ( Personal_Loanno - -0.00459083268591 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [5] + ( Personal_Loanno - -0.02758632290148 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Personal_Loanyes ) then do;
MPRINT(EM_DIAGRAM):   CLUS8vads [1] + ( Personal_Loanyes - -0.12970249837641 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [2] + ( Personal_Loanyes - 0.00221104280874 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [3] + ( Personal_Loanyes - -0.00849877812928 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [4] + ( Personal_Loanyes - 0.00459083268591 )**2;
MPRINT(EM_DIAGRAM):   CLUS8vads [5] + ( Personal_Loanyes - 0.02758632290148 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   _vqnvar = 4 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 3.1832314562052E-12 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUS8vads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 5;
MPRINT(EM_DIAGRAM):   if CLUS8vads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUS8vads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (4 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUS8vlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus8: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Prof8;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: UTILITY;
MPRINT(EM_DIAGRAM):   * NODE: EMSave6;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
105034     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
105035     quit;
105036     filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
105037     proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
MPRINT(EM_DIAGRAM):    proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
105038     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
105039     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 195 observations read from the data set WORK._TEMP.
NOTE: 172 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 23 observations and 1 variables.
NOTE: Compressing data set WORK._TEMP increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Determine output variables meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.FIMPORT5_DATA noprint out=_originalvar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\DROPINPUT.sas";
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _drpfrf;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT5_DATA;
MPRINT(EM_DIAGRAM):   drop 'Age'n 'Career'n 'Contact_Type'n 'Cus_ID'n 'Education'n 'Marital_Statues'n 'Mortage'n 'Number_of_Contacts'n 'Personal_Loan'n 'Subscribed'n 'VAR1'n ;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf;
MPRINT(EM_DIAGRAM):   proc contents data =WORK.SCORE_OUTPUTMETA noprint out=WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   length role $32 name_prefix $8;
MPRINT(EM_DIAGRAM):   set WORK.SCORE_OUTPUTMETA(keep=name type length label format informat rename=(type=itype)) end=_eof;
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   else type = 'C';
MPRINT(EM_DIAGRAM):   drop name_prefix itype;
MPRINT(EM_DIAGRAM):   if name = '_WARN_' then do;
MPRINT(EM_DIAGRAM):   role = 'ASSESS';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   name_prefix = scan(NAME, 1, '_');
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then role = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   else if name_prefix ='P' then role = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix ='R' then role = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then role = 'DECISION';
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then role = 'ASSESS';
MPRINT(EM_DIAGRAM):   else role = 'TRANSFORM';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if _eof then call symput('NumOutputVars', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   run;
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _tempFmt;
MPRINT(EM_DIAGRAM):   length format $33;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_tempFmt;
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne '')) out=temp2(rename=(fmtname=format));
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data temp2;
MPRINT(EM_DIAGRAM):   merge temp2(in=_a) _tempFmt(in=_b);
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable format by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   proc sort data=temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   if first.libname and first.memname then do;
MPRINT(EM_DIAGRAM):   call execute("proc format lib="!!libname!!'.'!!memname!!"cntlout=work._fmtout;");
MPRINT(EM_DIAGRAM):   call execute("select");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call execute (format);
MPRINT(EM_DIAGRAM):   if last.libname and last.memname then do;
MPRINT(EM_DIAGRAM):   call execute(";");
MPRINT(EM_DIAGRAM):   call execute("proc append base=WORK._EMFORMAT data=work._fmtout force;");
MPRINT(EM_DIAGRAM):   call execute("run;");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK._EMFORMAT nodupkey;
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   where fmtname ne '_EMFMT';
MPRINT(EM_DIAGRAM):   run;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
MPRINT(EM_DIAGRAM):    options mprint;
MPRINT(EM_DIAGRAM):   filename _code "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_00NRZK7score.sas";
MPRINT(EM_DIAGRAM):   filename _xml "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml";




MPRINT(SCOREXML):   PROC FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK._alldeps;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(SCOREXML):   * Project Name: 20161277_CAassignment2;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: All Tasks;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 28SEP2020:04:23:46;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT5;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus8;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Number_of_Contacts ;
MPRINT(SCOREXML):   drop T_Number_of_Contacts ;
MPRINT(SCOREXML):   if missing( Number_of_Contacts ) then T_Number_of_Contacts = .;
MPRINT(SCOREXML):   else T_Number_of_Contacts = (Number_of_Contacts - 2.56666230879853) * 0.36134043338427;
MPRINT(SCOREXML):   *** Generate dummy variables for Contact_Type ;
MPRINT(SCOREXML):   drop Contact_Typecellular Contact_Typetelephone ;
MPRINT(SCOREXML):   if missing( Contact_Type ) then do;
MPRINT(SCOREXML):   Contact_Typecellular = .;
MPRINT(SCOREXML):   Contact_Typetelephone = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm11 $ 11;
MPRINT(SCOREXML):   drop _dm11 ;
MPRINT(SCOREXML):   _dm11 = put( Contact_Type , $11. );
MPRINT(DMNORMIP):   call dmnorm(_dm11,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm11 = 'CELLULAR' then do;
MPRINT(SCOREXML):   Contact_Typecellular = 0.5314009348507;
MPRINT(SCOREXML):   Contact_Typetelephone = -0.5314009348507;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm11 = 'TELEPHONE' then do;
MPRINT(SCOREXML):   Contact_Typecellular = -0.94088454423979;
MPRINT(SCOREXML):   Contact_Typetelephone = 0.94088454423979;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Contact_Typecellular = .;
MPRINT(SCOREXML):   Contact_Typetelephone = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Mortage ;
MPRINT(SCOREXML):   drop Mortageno Mortageyes ;
MPRINT(SCOREXML):   if missing( Mortage ) then do;
MPRINT(SCOREXML):   Mortageno = .;
MPRINT(SCOREXML):   Mortageyes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm5 $ 5;
MPRINT(SCOREXML):   drop _dm5 ;
MPRINT(SCOREXML):   _dm5 = put( Mortage , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm5 = 'YES' then do;
MPRINT(SCOREXML):   Mortageno = -0.65517776074461;
MPRINT(SCOREXML):   Mortageyes = 0.65517776074461;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm5 = 'NO' then do;
MPRINT(SCOREXML):   Mortageno = 0.76313171226595;
MPRINT(SCOREXML):   Mortageyes = -0.76313171226595;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Mortageno = .;
MPRINT(SCOREXML):   Mortageyes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Personal_Loan ;
MPRINT(SCOREXML):   drop Personal_Loanno Personal_Loanyes ;
MPRINT(SCOREXML):   if missing( Personal_Loan ) then do;
MPRINT(SCOREXML):   Personal_Loanno = .;
MPRINT(SCOREXML):   Personal_Loanyes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm5 $ 5;
MPRINT(SCOREXML):   drop _dm5 ;
MPRINT(SCOREXML):   _dm5 = put( Personal_Loan , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm5 = 'NO' then do;
MPRINT(SCOREXML):   Personal_Loanno = 0.30377980276534;
MPRINT(SCOREXML):   Personal_Loanyes = -0.30377980276534;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm5 = 'YES' then do;
MPRINT(SCOREXML):   Personal_Loanno = -1.64588600639067;
MPRINT(SCOREXML):   Personal_Loanyes = 1.64588600639067;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Personal_Loanno = .;
MPRINT(SCOREXML):   Personal_Loanyes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUS8vlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUS8vads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUS8vads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Number_of_Contacts ) then do;
MPRINT(SCOREXML):   CLUS8vads [1] + ( T_Number_of_Contacts - 10.7903151830205 )**2;
MPRINT(SCOREXML):   CLUS8vads [2] + ( T_Number_of_Contacts - 2.52017908239013 )**2;
MPRINT(SCOREXML):   CLUS8vads [3] + ( T_Number_of_Contacts - -0.12550862331438 )**2;
MPRINT(SCOREXML):   CLUS8vads [4] + ( T_Number_of_Contacts - -0.20398232926234 )**2;
MPRINT(SCOREXML):   CLUS8vads [5] + ( T_Number_of_Contacts - 6.26509244330862 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( Contact_Typecellular ) then do;
MPRINT(SCOREXML):   CLUS8vads [1] + ( Contact_Typecellular - -0.309905053201 )**2;
MPRINT(SCOREXML):   CLUS8vads [2] + ( Contact_Typecellular - -0.03254726128919 )**2;
MPRINT(SCOREXML):   CLUS8vads [3] + ( Contact_Typecellular - -0.94088454423959 )**2;
MPRINT(SCOREXML):   CLUS8vads [4] + ( Contact_Typecellular - 0.5314009348508 )**2;
MPRINT(SCOREXML):   CLUS8vads [5] + ( Contact_Typecellular - -0.36477283503046 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Contact_Typetelephone ) then do;
MPRINT(SCOREXML):   CLUS8vads [1] + ( Contact_Typetelephone - 0.309905053201 )**2;
MPRINT(SCOREXML):   CLUS8vads [2] + ( Contact_Typetelephone - 0.03254726128919 )**2;
MPRINT(SCOREXML):   CLUS8vads [3] + ( Contact_Typetelephone - 0.94088454423959 )**2;
MPRINT(SCOREXML):   CLUS8vads [4] + ( Contact_Typetelephone - -0.5314009348508 )**2;
MPRINT(SCOREXML):   CLUS8vads [5] + ( Contact_Typetelephone - 0.36477283503046 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Mortageno ) then do;
MPRINT(SCOREXML):   CLUS8vads [1] + ( Mortageno - 0.00332306601029 )**2;
MPRINT(SCOREXML):   CLUS8vads [2] + ( Mortageno - 0.00834885982196 )**2;
MPRINT(SCOREXML):   CLUS8vads [3] + ( Mortageno - 0.07599294978511 )**2;
MPRINT(SCOREXML):   CLUS8vads [4] + ( Mortageno - -0.04412093601248 )**2;
MPRINT(SCOREXML):   CLUS8vads [5] + ( Mortageno - 0.10723365557727 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Mortageyes ) then do;
MPRINT(SCOREXML):   CLUS8vads [1] + ( Mortageyes - -0.00332306601029 )**2;
MPRINT(SCOREXML):   CLUS8vads [2] + ( Mortageyes - -0.00834885982196 )**2;
MPRINT(SCOREXML):   CLUS8vads [3] + ( Mortageyes - -0.07599294978511 )**2;
MPRINT(SCOREXML):   CLUS8vads [4] + ( Mortageyes - 0.04412093601248 )**2;
MPRINT(SCOREXML):   CLUS8vads [5] + ( Mortageyes - -0.10723365557727 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Personal_Loanno ) then do;
MPRINT(SCOREXML):   CLUS8vads [1] + ( Personal_Loanno - 0.12970249837641 )**2;
MPRINT(SCOREXML):   CLUS8vads [2] + ( Personal_Loanno - -0.00221104280874 )**2;
MPRINT(SCOREXML):   CLUS8vads [3] + ( Personal_Loanno - 0.00849877812928 )**2;
MPRINT(SCOREXML):   CLUS8vads [4] + ( Personal_Loanno - -0.00459083268591 )**2;
MPRINT(SCOREXML):   CLUS8vads [5] + ( Personal_Loanno - -0.02758632290148 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Personal_Loanyes ) then do;
MPRINT(SCOREXML):   CLUS8vads [1] + ( Personal_Loanyes - -0.12970249837641 )**2;
MPRINT(SCOREXML):   CLUS8vads [2] + ( Personal_Loanyes - 0.00221104280874 )**2;
MPRINT(SCOREXML):   CLUS8vads [3] + ( Personal_Loanyes - -0.00849877812928 )**2;
MPRINT(SCOREXML):   CLUS8vads [4] + ( Personal_Loanyes - 0.00459083268591 )**2;
MPRINT(SCOREXML):   CLUS8vads [5] + ( Personal_Loanyes - 0.02758632290148 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   _vqnvar = 4 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 3.1832314562052E-12 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUS8vads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUS8vads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUS8vads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (4 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUS8vlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus8: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof8;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: UTILITY;
MPRINT(SCOREXML):   * NODE: EMSave6;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   QUIT;
MPRINT(SCOREXML):   Data _NULL_;
MPRINT(SCOREXML):   numobs=0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._alldeps","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numobs= attrn(dsid,"nlobs");
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open dependency data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if numobs <= 0 then do;
MPRINT(SCOREXML):   put "WARNING: ScoreXML: No variable dependencies found in code.";
MPRINT(SCOREXML):   call symput('SYSCC','4');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Rhs (keep=rhs RHS_NLiteral UNAME);
MPRINT(SCOREXML):   Set WORK._alldeps;
MPRINT(SCOREXML):   Length UNAME $32;
MPRINT(SCOREXML):   LABEL rhs = ;
MPRINT(SCOREXML):   LABEL RHS_NLiteral = ;
MPRINT(SCOREXML):   if RHS_Dropped = 0 AND (1 NE index(rhs, '_OLD_')) then do;
MPRINT(SCOREXML):   UNAME = UPCASE(rhs);
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Proc Sort Data=WORK._Rhs NODUP out=WORK._Rhs (rename=(rhs=NAME RHS_NLiteral=NLITERAL));
MPRINT(SCOREXML):   By UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Indatavmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("EMWS1.FIMPORT5_DATA","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   NAME = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open input data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Indatavmeta NODUP Out=Work._Indatavmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   dsid = open("EMWS1.FIMPORT5_DATA");
MPRINT(SCOREXML):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   call symput('_engineTable', upcase(attrc(dsid, 'ENGINE')));
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Progout;
MPRINT(SCOREXML):   Set EMWS1.FIMPORT5_DATA;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(SCOREXML):   * Project Name: 20161277_CAassignment2;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: All Tasks;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 28SEP2020:04:23:46;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT5;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus8;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Number_of_Contacts ;
MPRINT(SCOREXML):   drop T_Number_of_Contacts ;
MPRINT(SCOREXML):   if missing( Number_of_Contacts ) then T_Number_of_Contacts = .;
MPRINT(SCOREXML):   else T_Number_of_Contacts = (Number_of_Contacts - 2.56666230879853) * 0.36134043338427;
MPRINT(SCOREXML):   *** Generate dummy variables for Contact_Type ;
MPRINT(SCOREXML):   drop Contact_Typecellular Contact_Typetelephone ;
MPRINT(SCOREXML):   if missing( Contact_Type ) then do;
MPRINT(SCOREXML):   Contact_Typecellular = .;
MPRINT(SCOREXML):   Contact_Typetelephone = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm11 $ 11;
MPRINT(SCOREXML):   drop _dm11 ;
MPRINT(SCOREXML):   _dm11 = put( Contact_Type , $11. );
MPRINT(DMNORMIP):   call dmnorm(_dm11,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm11 = 'CELLULAR' then do;
MPRINT(SCOREXML):   Contact_Typecellular = 0.5314009348507;
MPRINT(SCOREXML):   Contact_Typetelephone = -0.5314009348507;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm11 = 'TELEPHONE' then do;
MPRINT(SCOREXML):   Contact_Typecellular = -0.94088454423979;
MPRINT(SCOREXML):   Contact_Typetelephone = 0.94088454423979;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Contact_Typecellular = .;
MPRINT(SCOREXML):   Contact_Typetelephone = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Mortage ;
MPRINT(SCOREXML):   drop Mortageno Mortageyes ;
MPRINT(SCOREXML):   if missing( Mortage ) then do;
MPRINT(SCOREXML):   Mortageno = .;
MPRINT(SCOREXML):   Mortageyes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm5 $ 5;
MPRINT(SCOREXML):   drop _dm5 ;
MPRINT(SCOREXML):   _dm5 = put( Mortage , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm5 = 'YES' then do;
MPRINT(SCOREXML):   Mortageno = -0.65517776074461;
MPRINT(SCOREXML):   Mortageyes = 0.65517776074461;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm5 = 'NO' then do;
MPRINT(SCOREXML):   Mortageno = 0.76313171226595;
MPRINT(SCOREXML):   Mortageyes = -0.76313171226595;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Mortageno = .;
MPRINT(SCOREXML):   Mortageyes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Personal_Loan ;
MPRINT(SCOREXML):   drop Personal_Loanno Personal_Loanyes ;
MPRINT(SCOREXML):   if missing( Personal_Loan ) then do;
MPRINT(SCOREXML):   Personal_Loanno = .;
MPRINT(SCOREXML):   Personal_Loanyes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm5 $ 5;
MPRINT(SCOREXML):   drop _dm5 ;
MPRINT(SCOREXML):   _dm5 = put( Personal_Loan , $5. );
MPRINT(DMNORMIP):   call dmnorm(_dm5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm5 = 'NO' then do;
MPRINT(SCOREXML):   Personal_Loanno = 0.30377980276534;
MPRINT(SCOREXML):   Personal_Loanyes = -0.30377980276534;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm5 = 'YES' then do;
MPRINT(SCOREXML):   Personal_Loanno = -1.64588600639067;
MPRINT(SCOREXML):   Personal_Loanyes = 1.64588600639067;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Personal_Loanno = .;
MPRINT(SCOREXML):   Personal_Loanyes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUS8vlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUS8vads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUS8vads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Number_of_Contacts ) then do;
MPRINT(SCOREXML):   CLUS8vads [1] + ( T_Number_of_Contacts - 10.7903151830205 )**2;
MPRINT(SCOREXML):   CLUS8vads [2] + ( T_Number_of_Contacts - 2.52017908239013 )**2;
MPRINT(SCOREXML):   CLUS8vads [3] + ( T_Number_of_Contacts - -0.12550862331438 )**2;
MPRINT(SCOREXML):   CLUS8vads [4] + ( T_Number_of_Contacts - -0.20398232926234 )**2;
MPRINT(SCOREXML):   CLUS8vads [5] + ( T_Number_of_Contacts - 6.26509244330862 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( Contact_Typecellular ) then do;
MPRINT(SCOREXML):   CLUS8vads [1] + ( Contact_Typecellular - -0.309905053201 )**2;
MPRINT(SCOREXML):   CLUS8vads [2] + ( Contact_Typecellular - -0.03254726128919 )**2;
MPRINT(SCOREXML):   CLUS8vads [3] + ( Contact_Typecellular - -0.94088454423959 )**2;
MPRINT(SCOREXML):   CLUS8vads [4] + ( Contact_Typecellular - 0.5314009348508 )**2;
MPRINT(SCOREXML):   CLUS8vads [5] + ( Contact_Typecellular - -0.36477283503046 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Contact_Typetelephone ) then do;
MPRINT(SCOREXML):   CLUS8vads [1] + ( Contact_Typetelephone - 0.309905053201 )**2;
MPRINT(SCOREXML):   CLUS8vads [2] + ( Contact_Typetelephone - 0.03254726128919 )**2;
MPRINT(SCOREXML):   CLUS8vads [3] + ( Contact_Typetelephone - 0.94088454423959 )**2;
MPRINT(SCOREXML):   CLUS8vads [4] + ( Contact_Typetelephone - -0.5314009348508 )**2;
MPRINT(SCOREXML):   CLUS8vads [5] + ( Contact_Typetelephone - 0.36477283503046 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Mortageno ) then do;
MPRINT(SCOREXML):   CLUS8vads [1] + ( Mortageno - 0.00332306601029 )**2;
MPRINT(SCOREXML):   CLUS8vads [2] + ( Mortageno - 0.00834885982196 )**2;
MPRINT(SCOREXML):   CLUS8vads [3] + ( Mortageno - 0.07599294978511 )**2;
MPRINT(SCOREXML):   CLUS8vads [4] + ( Mortageno - -0.04412093601248 )**2;
MPRINT(SCOREXML):   CLUS8vads [5] + ( Mortageno - 0.10723365557727 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Mortageyes ) then do;
MPRINT(SCOREXML):   CLUS8vads [1] + ( Mortageyes - -0.00332306601029 )**2;
MPRINT(SCOREXML):   CLUS8vads [2] + ( Mortageyes - -0.00834885982196 )**2;
MPRINT(SCOREXML):   CLUS8vads [3] + ( Mortageyes - -0.07599294978511 )**2;
MPRINT(SCOREXML):   CLUS8vads [4] + ( Mortageyes - 0.04412093601248 )**2;
MPRINT(SCOREXML):   CLUS8vads [5] + ( Mortageyes - -0.10723365557727 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Personal_Loanno ) then do;
MPRINT(SCOREXML):   CLUS8vads [1] + ( Personal_Loanno - 0.12970249837641 )**2;
MPRINT(SCOREXML):   CLUS8vads [2] + ( Personal_Loanno - -0.00221104280874 )**2;
MPRINT(SCOREXML):   CLUS8vads [3] + ( Personal_Loanno - 0.00849877812928 )**2;
MPRINT(SCOREXML):   CLUS8vads [4] + ( Personal_Loanno - -0.00459083268591 )**2;
MPRINT(SCOREXML):   CLUS8vads [5] + ( Personal_Loanno - -0.02758632290148 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Personal_Loanyes ) then do;
MPRINT(SCOREXML):   CLUS8vads [1] + ( Personal_Loanyes - -0.12970249837641 )**2;
MPRINT(SCOREXML):   CLUS8vads [2] + ( Personal_Loanyes - 0.00221104280874 )**2;
MPRINT(SCOREXML):   CLUS8vads [3] + ( Personal_Loanyes - -0.00849877812928 )**2;
MPRINT(SCOREXML):   CLUS8vads [4] + ( Personal_Loanyes - 0.00459083268591 )**2;
MPRINT(SCOREXML):   CLUS8vads [5] + ( Personal_Loanyes - 0.02758632290148 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   _vqnvar = 4 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 3.1832314562052E-12 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUS8vads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUS8vads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUS8vads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (4 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUS8vlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus8: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof8;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: UTILITY;
MPRINT(SCOREXML):   * NODE: EMSave6;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if _N_=1 then do;
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   stop;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Varsmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._Progout","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   Name = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open program output.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Varsmeta NODUP Out=Work._Varsmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Invarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Rhs (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   if (a and b) then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Outvarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Varsmeta (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   If a and not b then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   LENGTH strbuf $ 80;
MPRINT(SCOREXML):   strbuf = ' ';
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '<?xml version="1.0" encoding="utf-8"?>';
MPRINT(SCOREXML):   put '<Score>';
MPRINT(SCOREXML):   put @3 '<Producer>';
MPRINT(SCOREXML):   put @6 "<Name> SAS Enterprise Miner </Name>";
MPRINT(SCOREXML):   strbuf = '<Version> ' || "6.2" || ' </Version>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   syslocale = getpxlocale();
MPRINT(SCOREXML):   strbuf = '<Locale> '|| strip(syslocale) ||' </Locale>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   sysencode = getpxencoding('sas12');
MPRINT(SCOREXML):   strbuf = '<Encoding> '|| strip(sysencode) ||' </Encoding>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   put @3 '</Producer>';
MPRINT(SCOREXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(SCOREXML):   put @3 '<CFunction>';
MPRINT(SCOREXML):   put @6 '<Name> score </Name>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="input">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "4" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="output">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "3" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @3 '</CFunction>';
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Invarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = ' <Input count="' || "4" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "4" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Outvarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = ' <Input count="' || "3" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "3" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '</Score>';
MPRINT(SCOREXML):   Run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _code;
MPRINT(EM_DIAGRAM):   filename _xml;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Input table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc sort data=work._invarsmeta out=_inpckgtemp(keep=NAME);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.FIMPORT5_EMCMETADEFAULT out=_inpckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\input.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.input;
MPRINT(EM_DIAGRAM):   merge _inpckgtemp(in=_a) _inpckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=work._progout out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('work._progout');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set work._progout;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=work._progout out=WORK.M0R1N5XR noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0R1N5XR;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0R1N5XR(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0R1N5XR;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0R1N5XR;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M272NYVF NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M272NYVF;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M272NYVF;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2UFF65J(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M272NYVF;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M272NYVF;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M272NYVF;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M272NYVF;
MPRINT(EMADVISECOLUMNS):   set WORK.M272NYVF;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=work._empckgtemp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_outvarsmeta(keep=NAME LABEL) out=work._empckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\output.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.output;
MPRINT(EM_DIAGRAM):   merge work._empckgtemp(in=_a) work._empckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    proc datasets library=WORK NOLIST NOWARN NODETAILS;
MPRINT(EM_DIAGRAM):   delete _alldeps _Indatavmeta _Keepvars _Keepnames _Invarsmeta _Progout _Outvarsmeta _Rhs _Varsmeta;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_EMSave6_2IR95\miningResult.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* FIMPORT5 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:51 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN19254";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT5_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.FIMPORT5_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.FIMPORT5_EMTRAINVARIABLE / view=WORK.FIMPORT5_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "DROP"n = "Drop (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT5_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:51 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.FIMPORT5_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length ROLE $32;
MPRINT(EM_DIAGRAM):   length LEVEL $10;
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   length DROP $1;
MPRINT(EM_DIAGRAM):   length ORDER $8;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT5_EMCMETADEFAULT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1F4ZDX9 as select * from WORK.M1IDACAD order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1F4ZDX9 as select * from WORK.M20J5OTJ order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1F4ZDX9 compare=work._comp1F4ZDX9 out=WORK._DIFF37KVCFF noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP13EW08UT as select * from WORK._DIFF37KVCFF where NAME in (select NAME from WORK._DIFF37KVCFF where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM3QG964_ as select * from WORK._DIFF37KVCFF where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF37KVCFF where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM3QG964_ as select * from WORK._DIFF37KVCFF where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF37KVCFF where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM3QG964_;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM3QG964_;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM3QG964_;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM3QG964_;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\VARIABLESETDELTA.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\DELTACODE.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "PROF8" 
Traverser: WaitingNode "EMSAVE6" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Clus8 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:52 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus8_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus8_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus8_EMTRAINVARIABLE / view=WORK.Clus8_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   label "REPORT"n = "Report (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus8_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus8_OUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus8_OUTMEAN / view=WORK.Clus8_OUTMEAN;
MPRINT(EM_DIAGRAM):   label "_CRIT_"n = "Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_XCONV_"n = "Maximum Relative Change in Cluster Seeds (N)";
MPRINT(EM_DIAGRAM):   label "_FCONV_"n = "Improvement in Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "_FREQ_"n = "Frequency of Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_RMSSTD_"n = "Root-Mean-Square Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "_RADIUS_"n = "Maximum Distance from Cluster Seed (N)";
MPRINT(EM_DIAGRAM):   label "_NEAR_"n = "Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_GAP_"n = "Distance to Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "Number_of_Contacts"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Contact_Typecellular"n = "Contact_Type=cellular (N)";
MPRINT(EM_DIAGRAM):   label "Contact_Typetelephone"n = "Contact_Type=telephone (N)";
MPRINT(EM_DIAGRAM):   label "Mortageno"n = "Mortage=no (N)";
MPRINT(EM_DIAGRAM):   label "Mortageyes"n = "Mortage=yes (N)";
MPRINT(EM_DIAGRAM):   label "Personal_Loanno"n = "Personal_Loan=no (N)";
MPRINT(EM_DIAGRAM):   label "Personal_Loanyes"n = "Personal_Loan=yes (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus8_OUTMEAN(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus8_OUTSTAT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus8_OUTSTAT / view=WORK.Clus8_OUTSTAT;
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Type of Observation (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "Over_All"n = "Statistic Applying Over All Variables (N)";
MPRINT(EM_DIAGRAM):   label "Number_of_Contacts"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Contact_Typecellular"n = "Contact_Type=cellular (N)";
MPRINT(EM_DIAGRAM):   label "Contact_Typetelephone"n = "Contact_Type=telephone (N)";
MPRINT(EM_DIAGRAM):   label "Mortageno"n = "Mortage=no (N)";
MPRINT(EM_DIAGRAM):   label "Mortageyes"n = "Mortage=yes (N)";
MPRINT(EM_DIAGRAM):   label "Personal_Loanno"n = "Personal_Loan=no (N)";
MPRINT(EM_DIAGRAM):   label "Personal_Loanyes"n = "Personal_Loan=yes (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus8_OUTSTAT(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus8_INPUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus8_INPUTMEAN / view=WORK.Clus8_INPUTMEAN;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_CHAR_"n = "Segment Id (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Name (N)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "INPUT"n = "Input (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CV"n = "Coefficient of Variation (N)";
MPRINT(EM_DIAGRAM):   label "STDMEAN"n = "Normalized Mean (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus8_INPUTMEAN(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus8_TREE_PLOT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus8_TREE_PLOT / view=WORK.Clus8_TREE_PLOT;
MPRINT(EM_DIAGRAM):   label "NODETEXT"n = "Node Text (C)";
MPRINT(EM_DIAGRAM):   label "TEXTALL"n = "All Text (C)";
MPRINT(EM_DIAGRAM):   label "N"n = "Train: Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "NODECOLOR"n = "Node Color (N)";
MPRINT(EM_DIAGRAM):   label "parent"n = "Parent Id (N)";
MPRINT(EM_DIAGRAM):   label "abovetext"n = "Above Text (C)";
MPRINT(EM_DIAGRAM):   label "NODE"n = "Node (N)";
MPRINT(EM_DIAGRAM):   label "DEPTH"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   label "LINKWIDTH"n = "Link Width (N)";
MPRINT(EM_DIAGRAM):   label "belowtext"n = "Below Text (C)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Square Error (N)";
MPRINT(EM_DIAGRAM):   label "P__SEGMENT_3"n = "Predicted Variable (N)";
MPRINT(EM_DIAGRAM):   label "traintotal"n = "Train Total (N)";
MPRINT(EM_DIAGRAM):   label "index"n = "Leaf Index (N)";
MPRINT(EM_DIAGRAM):   label "percevent_train"n = "Percent Cases (N)";
MPRINT(EM_DIAGRAM):   label "perc_train"n = "Event Percentage (N)";
MPRINT(EM_DIAGRAM):   label "tprob"n = "Training Percent (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus8_TREE_PLOT(obs=10000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus8_OUTIMPORT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus8_OUTIMPORT / view=WORK.Clus8_OUTIMPORT;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NRULES"n = "Number of Splitting Rules (N)";
MPRINT(EM_DIAGRAM):   label "NSURROGATES"n = "Number of Surrogate Rules (N)";
MPRINT(EM_DIAGRAM):   label "IMPORTANCE"n = "Importance (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus8_OUTIMPORT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus8_PROFILE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus8_PROFILE / view=WORK.Clus8_PROFILE;
MPRINT(EM_DIAGRAM):   label "BYPERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Variable (N)";
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "NumericValue"n = "Numeric Value (N)";
MPRINT(EM_DIAGRAM):   label "FmtValue"n = "Formatted Value (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "_Label_"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "orderedValue"n = "Ordered Values (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus8_PROFILE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus8_DISTANCE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus8_DISTANCE / view=WORK.Clus8_DISTANCE;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_1"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_2"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_3"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_4"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_5"n = " (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus8_DISTANCE(obs=60000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:52 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Clus8_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT5_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where(ROLE in("INPUT" "REJECTED" "FREQ" "ID"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base3LFN827 as select * from WORK.M2_ZN6FE order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp3LFN827 as select * from WORK.M2IWT08K order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base3LFN827 compare=work._comp3LFN827 out=WORK._DIFF2WAT9H0 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP12GM0L91 as select * from WORK._DIFF2WAT9H0 where NAME in (select NAME from WORK._DIFF2WAT9H0 where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM0NGINLE as select * from WORK._DIFF2WAT9H0 where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF2WAT9H0 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM0NGINLE as select * from WORK._DIFF2WAT9H0 where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF2WAT9H0 where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM0NGINLE;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM0NGINLE;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM0NGINLE;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM0NGINLE;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "EMSAVE6" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Prof8 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:53 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN19368";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof8_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof8_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof8_EMTRAINVARIABLE / view=WORK.Prof8_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   label "REPORT"n = "Report (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof8_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof8_SIZE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof8_SIZE / view=WORK.Prof8_SIZE;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Count"n = "Frequency Count (N)(12.0)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)(5.2)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof8_SIZE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof8_STATS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
694 The SAS System                                                                                                                                                                                                              12:35 Sunday, September 27, 2020

MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof8_STATS / view=WORK.Prof8_STATS;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof8_STATS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof8_CLASSDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof8_CLASSDIST / view=WORK.Prof8_CLASSDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (C)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Groupindex"n = "Group Index (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof8_CLASSDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof8_INTDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof8_INTDIST / view=WORK.Prof8_INTDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (N)(12.3)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Color"n = "Color (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof8_INTDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof8_WORTH OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof8_WORTH / view=WORK.Prof8_WORTH;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof8_WORTH(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:53 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Prof8_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus8_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base0J7E9MN as select * from WORK.M3ER30VL order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp0J7E9MN as select * from WORK.M2R1DO0Z order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base0J7E9MN compare=work._comp0J7E9MN out=WORK._DIFF3AVLK2R noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMNOTES.txt" encoding="UTF-8" NOBOM;
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* EMSave6 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:23:54 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN19422";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\EMSave6_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.EMSave6_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.EMSave6_EMTRAINVARIABLE / view=WORK.EMSave6_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   label "REPORT"n = "Report (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.EMSave6_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.EMSave6_SAVEOUT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.EMSave6_SAVEOUT / view=WORK.EMSave6_SAVEOUT;
MPRINT(EM_DIAGRAM):   label "name"n = "Output Location (C)";
MPRINT(EM_DIAGRAM):   label "nobs"n = "Total Observations (C)";
MPRINT(EM_DIAGRAM):   label "outnobs"n = "Saved Observations (C)";
MPRINT(EM_DIAGRAM):   label "vars"n = "Number of Variables (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.EMSave6_SAVEOUT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:23:54 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.EMSave6_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof8_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base2BKDD9Q as select * from WORK.M0PJX6Y0 order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp2BKDD9Q as select * from WORK.M0KAB__C order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base2BKDD9Q compare=work._comp2BKDD9Q out=WORK._DIFF2G24VT0 noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\EMNOTES.txt" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\dsapimeta.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\layout.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc printto print=#LN19496;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options NODATE NONUMBER;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RUNSTATUS noobs label;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options DATE NUMBER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_EMSave6_2IR95;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   rc = 0;
MPRINT(EM_DIAGRAM):   Pack0MG4 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0MG4, "EMSave", ' type="EM Result" version="14.1" Report="20161277_Assignment2_EMSave6_2IR95" nodeid="EMSave6" description="Save Data" component="EMSave"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package EMSave began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2NK2 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2NK2, "MININGRESULT", ' NAME="Mining Result Metadata"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package MININGRESULT began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0MG4, Pack2NK2, rc, "NESTED_NAME", "MININGRESULT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0S0UU4_ "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2NK2, "fileref:F0S0UU4_", "BINARY", "text/xml", 'SXML', 'NAME=SCOREXML TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1X0R74W "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\input.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2NK2, "fileref:F1X0R74W", "BINARY", "text/xml", 'INPUTTABLE', 'NAME=INPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\input.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3V2S3FP "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\output.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2NK2, "fileref:F3V2S3FP", "BINARY", "text/xml", 'OUTPUTTABLE', 'NAME=OUTPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\output.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0VHQ4H7 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_EMSave6_2IR95\miningResult.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2NK2, "fileref:F0VHQ4H7", "BINARY", "text/xml", 'MININGRESULT', 'NAME=MININGRESULT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_EMSave6_2IR95\miningResult.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1L58 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1L58, "File Import - Behaviour - Task 2", ' NAME="FIMPORT5"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package File Import - Behaviour - Task 2 began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0K487JP "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT5_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1L58, "fileref:F0K487JP", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT5_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0ZEL2G1 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1L58, "fileref:F0ZEL2G1", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F12J26X9 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1L58, "fileref:F12J26X9", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1L58, "work", "FIMPORT5_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F25J54OD "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1L58, "fileref:F25J54OD", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F08C8_FM "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1L58, "fileref:F08C8_FM", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1JU7C18 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1L58, "fileref:F1JU7C18", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F22PX4IK "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1L58, "fileref:F22PX4IK", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0MG4, Pack1L58, rc, "NESTED_NAME", "FIMPORT5");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2H10 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2H10, "Cluster", ' NAME="Clus8"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Cluster began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1CYWBPK "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus8_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2H10, "fileref:F1CYWBPK", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus8_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0DL3X88 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2H10, "fileref:F0DL3X88", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1KRZMC_ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2H10, "fileref:F1KRZMC_", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2H10, "work", "Clus8_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1UV1BM3 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2H10, "fileref:F1UV1BM3", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1YTVV3N "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2H10, "fileref:F1YTVV3N", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0T442VF "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2H10, "fileref:F0T442VF", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F03V9R0N "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2H10, "fileref:F03V9R0N", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F21Q2LYM "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2H10, "fileref:F21Q2LYM", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F19KKHTU "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2H10, "fileref:F19KKHTU", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2H10, "work", "Clus8_OUTMEAN", "CLUSMEAN", "NAME=OUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2H10, "work", "Clus8_OUTSTAT", "CLUSSTAT", "NAME=OUTSTAT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2H10, "work", "Clus8_INPUTMEAN", "INPUTMEAN", "NAME=INPUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file INPUTMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2H10, "work", "Clus8_TREE_PLOT", "TREE_PLOT", "NAME=TREE_PLOT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file TREE_PLOT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3HOF029 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\ENGLISHRULES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2H10, "fileref:F3HOF029", "TEXT", "text/plain", 'ENGLISHRULES', 'NAME=EnglishRules TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\ENGLISHRULES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2H10, "work", "Clus8_OUTIMPORT", "IMPORTANCE", "NAME=OUTIMPORT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file IMPORTANCE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2H10, "work", "Clus8_PROFILE", "Segment Profiles", "NAME=PROFILE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file PROFILE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack28MW = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack28MW, "GRAPH", ' NAME="GRAPH"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package GRAPH began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack2H10, Pack28MW, rc, "NESTED_NAME", "GRAPH");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0DRG6K7 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\GRAPH\Distance.gif";
MPRINT(EM_DIAGRAM):   call insert_file(Pack28MW, "fileref:F0DRG6K7", "BINARY", "image/gif", 'Distance', 'NAME="Distance" TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\GRAPH\Distance.gif inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2H10, "work", "Clus8_DISTANCE", "Distance Table", "NAME=DISTANCE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file DISTANCETABLE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0MG4, Pack2H10, rc, "NESTED_NAME", "Clus8");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1W8P = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1W8P, "Segment Profile", ' NAME="Prof8"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Segment Profile began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2L72WMX "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof8_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1W8P, "fileref:F2L72WMX", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof8_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0CMM3JX "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1W8P, "fileref:F0CMM3JX", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F20QTO20 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1W8P, "fileref:F20QTO20", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1W8P, "work", "Prof8_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0415OZT "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1W8P, "fileref:F0415OZT", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1E03CCN "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1W8P, "fileref:F1E03CCN", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1LZSUF5 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1W8P, "fileref:F1LZSUF5", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3CR_CPU "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1W8P, "fileref:F3CR_CPU", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1HG30GD "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1W8P, "fileref:F1HG30GD", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1W8P, "work", "Prof8_SIZE", "Profileview", "NAME=SIZE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1W8P, "work", "Prof8_STATS", "Profileview", "NAME=STATS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1W8P, "work", "Prof8_CLASSDIST", "Profileview", "NAME=CLASSDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1W8P, "work", "Prof8_INTDIST", "Profileview", "NAME=INTDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1W8P, "work", "Prof8_WORTH", "profworth", "NAME=WORTH TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file profworth inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0MG4, Pack1W8P, rc, "NESTED_NAME", "Prof8");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack07JX = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack07JX, "Save Data", ' NAME="EMSave6"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Save Data began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F12U54CM "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\EMSave6_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack07JX, "fileref:F12U54CM", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\EMSave6_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0Q_AYD7 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack07JX, "fileref:F0Q_AYD7", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0IIN773 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack07JX, "fileref:F0IIN773", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack07JX, "work", "EMSave6_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F26SFXGV "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack07JX, "fileref:F26SFXGV", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3G28Q_1 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack07JX, "fileref:F3G28Q_1", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0WII_TF "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack07JX, "fileref:F0WII_TF", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F29FF14R "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack07JX, "fileref:F29FF14R", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack07JX, "work", "EMSave6_SAVEOUT", "SAVEOUT", "NAME=SAVEOUT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file SAVEOUT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0MG4, Pack07JX, rc, "NESTED_NAME", "EMSave6");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0UKY = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0UKY, "WORKSPACE", ' NAME="Workspace configuration"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package WORKSPACE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0MG4, Pack0UKY, rc, "NESTED_NAME", "WORKSPACE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2WOI98C "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\dsapi.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0UKY, "fileref:F2WOI98C", "TEXT", "text/plain", 'Batch Code', 'NAME=BATCHCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\dsapi.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F35RX74N "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\dsapimeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0UKY, "fileref:F35RX74N", "BINARY", "text/xml", 'Batch Metadata', 'NAME=BATCHMETADATA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\dsapimeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3L3YIX6 "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\layout.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0UKY, "fileref:F3L3YIX6", "BINARY", "text/xml", 'Properties', 'NAME=LAYOUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\layout.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0L1NW3_ "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0MG4, "fileref:F0L1NW3_", "TEXT", "text/plain", 'NODESTATUS', 'NAME=NODESTATUS TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3VST = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3VST, "PATHSCORE", ' NAME="Path score code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PATHSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0MG4, Pack3VST, rc, "NESTED_NAME", "PATHSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0W3A = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0W3A, "SASSCORE", ' NAME="SAS Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package SASSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3VST, Pack0W3A, rc, "NESTED_NAME", "SASSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0TL118_ "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_00NRZK7score.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0W3A, "fileref:F0TL118_", "TEXT", "text/plain", 'SASCODE', 'NAME=SASCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_00NRZK7score.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1A5O = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1A5O, "PMMLSCORE", ' NAME="PMML Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PMMLSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack3VST, Pack1A5O, rc, "NESTED_NAME", "PMMLSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   pubType = "TO_ARCHIVE";
MPRINT(EM_DIAGRAM):   properties='archive_path, archive_name';
MPRINT(EM_DIAGRAM):   path = "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_EMSave6_2IR95";
MPRINT(EM_DIAGRAM):   name = "miningResult";
MPRINT(EM_DIAGRAM):   call package_publish(Pack0MG4, pubType, rc, properties, path, name);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Publish package Pack0MG4 successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call package_end(Pack0MG4, rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Pack0MG4 ended successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
Package EMSave began successfully.
Package MININGRESULT began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\input.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\output.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_EMSave6_2IR95\miningResult.xml inserted successfully.
Package File Import - Behaviour - Task 2 began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT5_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT5\EMTRAINCODE.sas inserted successfully.
spk_PACKAGEINSERT_note
Package Cluster began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus8_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMFLOWSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\EMPUBLISHSCORE.sas inserted successfully.
CSV file CLUSMEAN inserted successfully.
CSV file CLUSSTAT inserted successfully.
CSV file INPUTMEAN inserted successfully.
CSV file TREE_PLOT inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\ENGLISHRULES.txt inserted successfully.
CSV file IMPORTANCE inserted successfully.
CSV file PROFILE inserted successfully.
Package GRAPH began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus8\GRAPH\Distance.gif inserted successfully.
CSV file DISTANCETABLE inserted successfully.
spk_PACKAGEINSERT_note
Package Segment Profile began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof8_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof8\EMCUSTOMGRAPH.xml inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file profworth inserted successfully.
spk_PACKAGEINSERT_note
Package Save Data began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\EMSave6_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\EMSave6\EMTRAINCODE.sas inserted successfully.
CSV file SAVEOUT inserted successfully.
spk_PACKAGEINSERT_note
Package WORKSPACE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\dsapi.sas inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\dsapimeta.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_0U39L6Z\layout.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out inserted successfully.
Package PATHSCORE began successfully.
spk_PACKAGEINSERT_note
Package SASSCORE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_00NRZK7score.sas inserted successfully.
Package PMMLSCORE began successfully.
spk_PACKAGEINSERT_note
Publish package Pack0MG4 successfully.
Package Pack0MG4 ended successfully.
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   filename F0S0UU4_;
MPRINT(EM_DIAGRAM):   filename F1X0R74W;
MPRINT(EM_DIAGRAM):   filename F3V2S3FP;
MPRINT(EM_DIAGRAM):   filename F0VHQ4H7;
MPRINT(EM_DIAGRAM):   filename F0K487JP;
MPRINT(EM_DIAGRAM):   filename F0ZEL2G1;
MPRINT(EM_DIAGRAM):   filename F12J26X9;
MPRINT(EM_DIAGRAM):   filename F25J54OD;
MPRINT(EM_DIAGRAM):   filename F08C8_FM;
MPRINT(EM_DIAGRAM):   filename F1JU7C18;
MPRINT(EM_DIAGRAM):   filename F22PX4IK;
MPRINT(EM_DIAGRAM):   filename F1CYWBPK;
MPRINT(EM_DIAGRAM):   filename F0DL3X88;
MPRINT(EM_DIAGRAM):   filename F1KRZMC_;
MPRINT(EM_DIAGRAM):   filename F1UV1BM3;
MPRINT(EM_DIAGRAM):   filename F1YTVV3N;
MPRINT(EM_DIAGRAM):   filename F0T442VF;
MPRINT(EM_DIAGRAM):   filename F03V9R0N;
MPRINT(EM_DIAGRAM):   filename F21Q2LYM;
MPRINT(EM_DIAGRAM):   filename F19KKHTU;
MPRINT(EM_DIAGRAM):   filename F3HOF029;
MPRINT(EM_DIAGRAM):   filename F0DRG6K7;
MPRINT(EM_DIAGRAM):   filename F2L72WMX;
MPRINT(EM_DIAGRAM):   filename F0CMM3JX;
MPRINT(EM_DIAGRAM):   filename F20QTO20;
MPRINT(EM_DIAGRAM):   filename F0415OZT;
MPRINT(EM_DIAGRAM):   filename F1E03CCN;
MPRINT(EM_DIAGRAM):   filename F1LZSUF5;
MPRINT(EM_DIAGRAM):   filename F3CR_CPU;
MPRINT(EM_DIAGRAM):   filename F1HG30GD;
MPRINT(EM_DIAGRAM):   filename F12U54CM;
MPRINT(EM_DIAGRAM):   filename F0Q_AYD7;
MPRINT(EM_DIAGRAM):   filename F0IIN773;
MPRINT(EM_DIAGRAM):   filename F26SFXGV;
MPRINT(EM_DIAGRAM):   filename F3G28Q_1;
MPRINT(EM_DIAGRAM):   filename F0WII_TF;
MPRINT(EM_DIAGRAM):   filename F29FF14R;
MPRINT(EM_DIAGRAM):   filename F2WOI98C;
MPRINT(EM_DIAGRAM):   filename F35RX74N;
MPRINT(EM_DIAGRAM):   filename F3L3YIX6;
MPRINT(EM_DIAGRAM):   filename F0L1NW3_;
MPRINT(EM_DIAGRAM):   filename F0TL118_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options notes source;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
107262     %let eminfo= %str();
107263     data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
107264     set EMWS1.Prof5_ExportSet;
MPRINT(EM_DIAGRAM):   set EMWS1.Prof5_ExportSet;
107265     where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
MPRINT(EM_DIAGRAM):   where eminfo ne '' and NODEPORT in('TRAIN', 'DATA');
107266     call symput('eminfo', strip(eminfo));
MPRINT(EM_DIAGRAM):   call symput('eminfo', strip(eminfo));
107267     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.PROF5_EXPORTSET.
      WHERE (eminfo not = ' ') and NODEPORT in ('DATA', 'TRAIN');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

Retrieving Score Code FIMPORT3 
Traverser: WaitingNode "PROF5" 
traverser_readyNode_note 
Retrieving Score Code Clus5 
traverser_readyNode_note 
Retrieving Score Code Prof5 
107268     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
107269     * Report: Determine If validvarname ANY variables are score inputs;
MPRINT(EM_DIAGRAM):   * Report: Determine If validvarname ANY variables are score inputs;
107270     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
107271     filename _pref "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1PM_M1Wscore.sas";
MPRINT(EM_DIAGRAM):   filename _pref "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1PM_M1Wscore.sas";
107272     proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
MPRINT(EM_DIAGRAM):   proc FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=_temp;
107273     %INCLUDE _pref;
MPRINT(EM_DIAGRAM):   * EM Version: 14.1;
MPRINT(EM_DIAGRAM):   * SAS Release: 9.04.01M3P062415;
MPRINT(EM_DIAGRAM):   * Host: ba-teaching;
MPRINT(EM_DIAGRAM):   * Encoding: wlatin1;
MPRINT(EM_DIAGRAM):   * Locale: en_US;
MPRINT(EM_DIAGRAM):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(EM_DIAGRAM):   * Project Name: 20161277_CAassignment2;
MPRINT(EM_DIAGRAM):   * Diagram Id: EMWS1;
MPRINT(EM_DIAGRAM):   * Diagram Name: All Tasks;
MPRINT(EM_DIAGRAM):   * Generated by: 20161277;
MPRINT(EM_DIAGRAM):   * Date: 28SEP2020:04:23:58;
MPRINT(EM_DIAGRAM):   * Macro variable identifying the scored data set;
MPRINT(EM_DIAGRAM):   *%let EM_SCORE_OUTPUT=;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: SAMPLE;
MPRINT(EM_DIAGRAM):   * NODE: FIMPORT3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Clustering;
MPRINT(EM_DIAGRAM):   * TYPE: EXPLORE;
MPRINT(EM_DIAGRAM):   * NODE: Clus5;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   *****************************************;
MPRINT(EM_DIAGRAM):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   drop _dm_bad;
MPRINT(EM_DIAGRAM):   _dm_bad = 0;
MPRINT(EM_DIAGRAM):   *** Standardize Age ;
MPRINT(EM_DIAGRAM):   drop T_Age ;
MPRINT(EM_DIAGRAM):   if missing( Age ) then T_Age = .;
MPRINT(EM_DIAGRAM):   else T_Age = (Age - 39.8608707020525) * 0.09718656389406;
MPRINT(EM_DIAGRAM):   *** Standardize Number_of_Contacts ;
MPRINT(EM_DIAGRAM):   drop T_Number_of_Contacts ;
MPRINT(EM_DIAGRAM):   if missing( Number_of_Contacts ) then T_Number_of_Contacts = .;
MPRINT(EM_DIAGRAM):   else T_Number_of_Contacts = (Number_of_Contacts - 2.56666230879853) * 0.36134043338427;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Career ;
MPRINT(EM_DIAGRAM):   drop Careeradministration Careerblue_collar Careerentrepreneur Careerhousemaid Careermanagement Careerretired Careerself_employed Careerservices Careerstudent Careertechnician Careerunemployed ;
MPRINT(EM_DIAGRAM):   if missing( Career ) then do;
MPRINT(EM_DIAGRAM):   Careeradministration = .;
MPRINT(EM_DIAGRAM):   Careerblue_collar = .;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = .;
MPRINT(EM_DIAGRAM):   Careerhousemaid = .;
MPRINT(EM_DIAGRAM):   Careermanagement = .;
MPRINT(EM_DIAGRAM):   Careerretired = .;
MPRINT(EM_DIAGRAM):   Careerself_employed = .;
MPRINT(EM_DIAGRAM):   Careerservices = .;
MPRINT(EM_DIAGRAM):   Careerstudent = .;
MPRINT(EM_DIAGRAM):   Careertechnician = .;
MPRINT(EM_DIAGRAM):   Careerunemployed = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm14 $ 14;
MPRINT(EM_DIAGRAM):   drop _dm14 ;
MPRINT(EM_DIAGRAM):   _dm14 = put( Career , $14. );
MPRINT(DMNORMIP):   call dmnorm(_dm14,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm14 <= 'RETIRED' then do;
MPRINT(EM_DIAGRAM):   if _dm14 <= 'ENTREPRENEUR' then do;
MPRINT(EM_DIAGRAM):   if _dm14 <= 'BLUE-COLLAR' then do;
MPRINT(EM_DIAGRAM):   if _dm14 = 'ADMINISTRATION' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = 0.50889118500978;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm14 = 'BLUE-COLLAR' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = 0.56147396576531;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm14 = 'ENTREPRENEUR' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = 1.5701943823646;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm14 <= 'MANAGEMENT' then do;
MPRINT(EM_DIAGRAM):   if _dm14 = 'HOUSEMAID' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = 1.85246142180295;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm14 = 'MANAGEMENT' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = 1.08791241838279;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm14 = 'RETIRED' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = 1.45387056599005;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm14 <= 'STUDENT' then do;
MPRINT(EM_DIAGRAM):   if _dm14 <= 'SERVICES' then do;
MPRINT(EM_DIAGRAM):   if _dm14 = 'SELF-EMPLOYED' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = 1.57681828530897;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm14 = 'SERVICES' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = 0.91907748535592;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm14 = 'STUDENT' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = 2.22766154295433;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm14 = 'TECHNICIAN' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = 0.67382109265536;
MPRINT(EM_DIAGRAM):   Careerunemployed = -0.04845755775525;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm14 = 'UNEMPLOYED' then do;
MPRINT(EM_DIAGRAM):   Careeradministration = -0.17863684136789;
MPRINT(EM_DIAGRAM):   Careerblue_collar = -0.16190726450904;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = -0.05789519750619;
MPRINT(EM_DIAGRAM):   Careerhousemaid = -0.0490734720951;
MPRINT(EM_DIAGRAM):   Careermanagement = -0.08356069142518;
MPRINT(EM_DIAGRAM):   Careerretired = -0.06252737761989;
MPRINT(EM_DIAGRAM):   Careerself_employed = -0.05765199118825;
MPRINT(EM_DIAGRAM):   Careerservices = -0.09891082671327;
MPRINT(EM_DIAGRAM):   Careerstudent = -0.04080813540891;
MPRINT(EM_DIAGRAM):   Careertechnician = -0.13491224136642;
MPRINT(EM_DIAGRAM):   Careerunemployed = 1.87600692443571;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   Careeradministration = .;
MPRINT(EM_DIAGRAM):   Careerblue_collar = .;
MPRINT(EM_DIAGRAM):   Careerentrepreneur = .;
MPRINT(EM_DIAGRAM):   Careerhousemaid = .;
MPRINT(EM_DIAGRAM):   Careermanagement = .;
MPRINT(EM_DIAGRAM):   Careerretired = .;
MPRINT(EM_DIAGRAM):   Careerself_employed = .;
MPRINT(EM_DIAGRAM):   Careerservices = .;
MPRINT(EM_DIAGRAM):   Careerstudent = .;
MPRINT(EM_DIAGRAM):   Careertechnician = .;
MPRINT(EM_DIAGRAM):   Careerunemployed = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Contact_Type ;
MPRINT(EM_DIAGRAM):   drop Contact_Typecellular Contact_Typetelephone ;
MPRINT(EM_DIAGRAM):   if missing( Contact_Type ) then do;
MPRINT(EM_DIAGRAM):   Contact_Typecellular = .;
MPRINT(EM_DIAGRAM):   Contact_Typetelephone = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm9 $ 9;
MPRINT(EM_DIAGRAM):   drop _dm9 ;
MPRINT(EM_DIAGRAM):   _dm9 = put( Contact_Type , $9. );
MPRINT(DMNORMIP):   call dmnorm(_dm9,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm9 = 'CELLULAR' then do;
MPRINT(EM_DIAGRAM):   Contact_Typecellular = 0.5314009348507;
MPRINT(EM_DIAGRAM):   Contact_Typetelephone = -0.5314009348507;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm9 = 'TELEPHONE' then do;
MPRINT(EM_DIAGRAM):   Contact_Typecellular = -0.94088454423979;
MPRINT(EM_DIAGRAM):   Contact_Typetelephone = 0.94088454423979;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Contact_Typecellular = .;
MPRINT(EM_DIAGRAM):   Contact_Typetelephone = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   drop Educationilliterate Educationprimary_education Educationprofessional_educat Educationsecondary_education Educationuniversity_educatio ;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = .;
MPRINT(EM_DIAGRAM):   Educationprimary_education = .;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = .;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = .;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm22 $ 22;
MPRINT(EM_DIAGRAM):   drop _dm22 ;
MPRINT(EM_DIAGRAM):   _dm22 = put( Education , $22. );
MPRINT(DMNORMIP):   call dmnorm(_dm22,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm22 <= 'PROFESSIONAL EDUCATION' then do;
MPRINT(EM_DIAGRAM):   if _dm22 <= 'PRIMARY EDUCATION' then do;
MPRINT(EM_DIAGRAM):   if _dm22 = 'ILLITERATE' then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = 20.6090596234465;
MPRINT(EM_DIAGRAM):   Educationprimary_education = -0.19682294664746;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = -0.17542254053591;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = -0.36121784809716;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm22 = 'PRIMARY EDUCATION' then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = -0.00970421621424;
MPRINT(EM_DIAGRAM):   Educationprimary_education = 1.01611511241349;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = -0.17542254053591;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = -0.36121784809716;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm22 = 'PROFESSIONAL EDUCATION' then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = -0.00970421621424;
MPRINT(EM_DIAGRAM):   Educationprimary_education = -0.19682294664746;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = 1.14007453060057;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = -0.36121784809716;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm22 = 'SECONDARY EDUCATION' then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = -0.00970421621424;
MPRINT(EM_DIAGRAM):   Educationprimary_education = -0.19682294664746;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = -0.17542254053591;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = 0.55366801948403;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   if _dm22 = 'UNIVERSITY EDUCATION' then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = -0.00970421621424;
MPRINT(EM_DIAGRAM):   Educationprimary_education = -0.19682294664746;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = -0.17542254053591;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = -0.36121784809716;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = 0.66862327682085;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   Educationilliterate = .;
MPRINT(EM_DIAGRAM):   Educationprimary_education = .;
MPRINT(EM_DIAGRAM):   Educationprofessional_educat = .;
MPRINT(EM_DIAGRAM):   Educationsecondary_education = .;
MPRINT(EM_DIAGRAM):   Educationuniversity_educatio = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Statues ;
MPRINT(EM_DIAGRAM):   drop Marital_Statuesdivorced Marital_Statuesmarried Marital_Statuessingle ;
MPRINT(EM_DIAGRAM):   if missing( Marital_Statues ) then do;
MPRINT(EM_DIAGRAM):   Marital_Statuesdivorced = .;
MPRINT(EM_DIAGRAM):   Marital_Statuesmarried = .;
MPRINT(EM_DIAGRAM):   Marital_Statuessingle = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Statues , $8. );
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
MPRINT(EM_DIAGRAM):   Marital_Statuesdivorced = -0.20553878536687;
MPRINT(EM_DIAGRAM):   Marital_Statuesmarried = 0.46536123012655;
MPRINT(EM_DIAGRAM):   Marital_Statuessingle = -0.36123677782606;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm8 = 'SINGLE' then do;
MPRINT(EM_DIAGRAM):   Marital_Statuesdivorced = -0.20553878536687;
MPRINT(EM_DIAGRAM):   Marital_Statuesmarried = -0.71627070761013;
MPRINT(EM_DIAGRAM):   Marital_Statuessingle = 0.9227316764451;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm8 = 'DIVORCED' then do;
MPRINT(EM_DIAGRAM):   Marital_Statuesdivorced = 1.62171152759367;
MPRINT(EM_DIAGRAM):   Marital_Statuesmarried = -0.71627070761013;
MPRINT(EM_DIAGRAM):   Marital_Statuessingle = -0.36123677782606;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Marital_Statuesdivorced = .;
MPRINT(EM_DIAGRAM):   Marital_Statuesmarried = .;
MPRINT(EM_DIAGRAM):   Marital_Statuessingle = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Mortage ;
MPRINT(EM_DIAGRAM):   drop Mortageno Mortageyes ;
MPRINT(EM_DIAGRAM):   if missing( Mortage ) then do;
MPRINT(EM_DIAGRAM):   Mortageno = .;
MPRINT(EM_DIAGRAM):   Mortageyes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
MPRINT(EM_DIAGRAM):   _dm3 = put( Mortage , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'YES' then do;
MPRINT(EM_DIAGRAM):   Mortageno = -0.65517776074461;
MPRINT(EM_DIAGRAM):   Mortageyes = 0.65517776074461;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   Mortageno = 0.76313171226595;
MPRINT(EM_DIAGRAM):   Mortageyes = -0.76313171226595;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Mortageno = .;
MPRINT(EM_DIAGRAM):   Mortageyes = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Personal_Loan ;
MPRINT(EM_DIAGRAM):   drop Personal_Loanno Personal_Loanyes ;
MPRINT(EM_DIAGRAM):   if missing( Personal_Loan ) then do;
MPRINT(EM_DIAGRAM):   Personal_Loanno = .;
MPRINT(EM_DIAGRAM):   Personal_Loanyes = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
MPRINT(EM_DIAGRAM):   _dm3 = put( Personal_Loan , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
MPRINT(EM_DIAGRAM):   Personal_Loanno = 0.30377980276534;
MPRINT(EM_DIAGRAM):   Personal_Loanyes = -0.30377980276534;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
MPRINT(EM_DIAGRAM):   Personal_Loanno = -1.64588600639067;
MPRINT(EM_DIAGRAM):   Personal_Loanyes = 1.64588600639067;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   Personal_Loanno = .;
MPRINT(EM_DIAGRAM):   Personal_Loanyes = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(EM_DIAGRAM):   *** Omitted Cases;
MPRINT(EM_DIAGRAM):   if _dm_bad then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   goto CLUS5vlex ;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *** omitted;
MPRINT(EM_DIAGRAM):   *** Compute Distances and Cluster Membership;
MPRINT(EM_DIAGRAM):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(EM_DIAGRAM):   label Distance = 'Distance' ;
MPRINT(EM_DIAGRAM):   array CLUS5vads [5] _temporary_;
MPRINT(EM_DIAGRAM):   drop _vqclus _vqmvar _vqnvar;
MPRINT(EM_DIAGRAM):   _vqmvar = 0;
MPRINT(EM_DIAGRAM):   do _vqclus = 1 to 5;
MPRINT(EM_DIAGRAM):   CLUS5vads [_vqclus] = 0;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if not missing( T_Age ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( T_Age - 0.67862441630987 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( T_Age - -0.12220259479381 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( T_Age - 0.1219909351517 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( T_Age - -0.65843627090065 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( T_Age - 0.83960729150403 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( T_Number_of_Contacts ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( T_Number_of_Contacts - -0.24215468364507 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( T_Number_of_Contacts - 1.68542846033782 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( T_Number_of_Contacts - 6.62638765591009 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( T_Number_of_Contacts - -0.23646815611072 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( T_Number_of_Contacts - -0.10438566163705 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 1;
MPRINT(EM_DIAGRAM):   if not missing( Careeradministration ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Careeradministration - -0.04598399950118 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Careeradministration - 0.00991802300905 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Careeradministration - 0.00821114469253 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Careeradministration - 0.04401714138747 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Careeradministration - -0.14044083990246 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerblue_collar ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Careerblue_collar - 0.03061090015358 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Careerblue_collar - 0.00437260676506 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Careerblue_collar - -0.00158002613689 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Careerblue_collar - -0.03162470003694 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Careerblue_collar - 0.15959550450178 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerentrepreneur ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Careerentrepreneur - 0.01288719716082 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Careerentrepreneur - -0.00477410892134 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Careerentrepreneur - 0.00654106554938 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Careerentrepreneur - -0.01222396582552 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Careerentrepreneur - 0.12300364470167 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerhousemaid ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Careerhousemaid - 0.02587093195391 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Careerhousemaid - 0.00123168382812 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Careerhousemaid - 0.00611619501011 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Careerhousemaid - -0.02632308365609 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Careerhousemaid - 0.05656735534367 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careermanagement ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Careermanagement - 0.01836862083405 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Careermanagement - -0.0047049177197 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Careermanagement - -0.00010482344414 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Careermanagement - -0.01736000982203 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Careermanagement - -0.08356069142518 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerretired ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Careerretired - 0.06650903898865 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Careerretired - -0.03756609459751 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Careerretired - 0.02549572200917 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Careerretired - -0.05988526248988 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Careerretired - 0.19020561298176 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerself_employed ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Careerself_employed - -0.00072825274511 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Careerself_employed - 0.01009060404575 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Careerself_employed - 0.00272421955306 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Careerself_employed - -0.00154954413227 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Careerself_employed - 0.21475972156128 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerservices ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Careerservices - -0.0072044266476 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Careerservices - 0.00372585495625 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Careerservices - -0.00758733697619 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Careerservices - 0.00674285627357 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Careerservices - -0.09891082671327 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerstudent ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Careerstudent - -0.03988642146948 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Careerstudent - -0.01613636054135 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Careerstudent - -0.03482272728658 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Careerstudent - 0.04390704656271 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Careerstudent - -0.04080813540891 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careertechnician ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Careertechnician - -0.0268495448887 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Careertechnician - 0.00653288906948 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Careertechnician - -0.01541602314684 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Careertechnician - 0.02605471970296 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Careertechnician - -0.13491224136642 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Careerunemployed ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Careerunemployed - 0.00348555718662 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Careerunemployed - -0.00037423001092 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Careerunemployed - 0.01247535460962 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Careerunemployed - -0.00363758694804 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Careerunemployed - -0.04845755775525 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.09090909090909;
MPRINT(EM_DIAGRAM):   if not missing( Contact_Typecellular ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Contact_Typecellular - -0.22328638032515 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Contact_Typecellular - -0.32029154688064 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Contact_Typecellular - -0.32710853976407 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Contact_Typecellular - 0.29360177598494 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Contact_Typecellular - 0.28602002166895 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Contact_Typetelephone ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Contact_Typetelephone - 0.22328638032515 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Contact_Typetelephone - 0.32029154688064 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Contact_Typetelephone - 0.32710853976407 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Contact_Typetelephone - -0.29360177598494 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Contact_Typetelephone - -0.28602002166895 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Educationilliterate ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Educationilliterate - 20.6090596234465 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.19999999999999;
MPRINT(EM_DIAGRAM):   if not missing( Educationprimary_education ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Educationprimary_education - 0.11253680674897 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Educationprimary_education - -0.01819802966053 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Educationprimary_education - 0.04320437374718 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Educationprimary_education - -0.10975177456013 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Educationprimary_education - -0.19682294664746 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.2;
MPRINT(EM_DIAGRAM):   if not missing( Educationprofessional_educat ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Educationprofessional_educat - -0.00613666830991 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Educationprofessional_educat - 0.00090510921077 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Educationprofessional_educat - -0.01922895689174 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Educationprofessional_educat - 0.00656805206758 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Educationprofessional_educat - -0.17542254053591 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.2;
MPRINT(EM_DIAGRAM):   if not missing( Educationsecondary_education ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Educationsecondary_education - -0.01566628434334 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Educationsecondary_education - 0.00828632064374 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Educationsecondary_education - -0.00636765671342 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Educationsecondary_education - 0.01455592676252 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Educationsecondary_education - -0.36121784809716 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.19999999999999;
MPRINT(EM_DIAGRAM):   if not missing( Educationuniversity_educatio ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Educationuniversity_educatio - -0.06824584789428 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Educationuniversity_educatio - 0.00554383920626 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Educationuniversity_educatio - -0.01313378882323 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Educationuniversity_educatio - 0.06779190902318 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Educationuniversity_educatio - -0.29911428077881 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.19999999999999;
MPRINT(EM_DIAGRAM):   if not missing( Marital_Statuesdivorced ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Marital_Statuesdivorced - 0.05526969614983 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Marital_Statuesdivorced - 0.00500857579729 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Marital_Statuesdivorced - 0.00177457467877 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Marital_Statuesdivorced - -0.05632784681289 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Marital_Statuesdivorced - -0.0025109728157 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.33333333333333;
MPRINT(EM_DIAGRAM):   if not missing( Marital_Statuesmarried ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Marital_Statuesmarried - 0.23339703152983 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Marital_Statuesmarried - 0.03154045110447 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Marital_Statuesmarried - 0.01328568666528 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Marital_Statuesmarried - -0.24033752790255 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Marital_Statuesmarried - 0.2684225738371 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.33333333333333;
MPRINT(EM_DIAGRAM):   if not missing( Marital_Statuessingle ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Marital_Statuessingle - -0.29244743006118 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Marital_Statuessingle - -0.03779146174423 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Marital_Statuessingle - -0.01568326242854 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Marital_Statuessingle - 0.30073255476575 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Marital_Statuessingle - -0.28990519703322 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.33333333333333;
MPRINT(EM_DIAGRAM):   if not missing( Mortageno ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Mortageno - 0.14972192103062 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Mortageno - 0.05772911722366 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Mortageno - 0.07455930320541 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Mortageno - -0.16283046604234 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Mortageno - -0.02481799496213 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Mortageyes ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Mortageyes - -0.14972192103062 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Mortageyes - -0.05772911722366 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Mortageyes - -0.07455930320541 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Mortageyes - 0.16283046604234 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Mortageyes - 0.02481799496213 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Personal_Loanno ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Personal_Loanno - 0.10799840911316 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Personal_Loanno - 0.00863638956271 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Personal_Loanno - 0.00541405888395 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Personal_Loanno - -0.10986459268399 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Personal_Loanno - -0.02116449876065 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   if not missing( Personal_Loanyes ) then do;
MPRINT(EM_DIAGRAM):   CLUS5vads [1] + ( Personal_Loanyes - -0.10799840911316 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [2] + ( Personal_Loanyes - -0.00863638956271 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [3] + ( Personal_Loanyes - -0.00541405888395 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [4] + ( Personal_Loanyes - 0.10986459268399 )**2;
MPRINT(EM_DIAGRAM):   CLUS5vads [5] + ( Personal_Loanyes - 0.02116449876065 )**2;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else _vqmvar + 0.5;
MPRINT(EM_DIAGRAM):   _vqnvar = 8 - _vqmvar;
MPRINT(EM_DIAGRAM):   if _vqnvar <= 2.4556356947869E-11 then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = .;
MPRINT(EM_DIAGRAM):   Distance = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = 1;
MPRINT(EM_DIAGRAM):   Distance = CLUS5vads [1];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   drop _vqfzdst;
MPRINT(EM_DIAGRAM):   do _vqclus = 2 to 5;
MPRINT(EM_DIAGRAM):   if CLUS5vads [_vqclus] < _vqfzdst then do;
MPRINT(EM_DIAGRAM):   _SEGMENT_ = _vqclus;
MPRINT(EM_DIAGRAM):   Distance = CLUS5vads [_vqclus];
MPRINT(EM_DIAGRAM):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Distance = sqrt(Distance * (8 / _vqnvar));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   CLUS5vlex :;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(EM_DIAGRAM):   ***************************************;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Clus5: Creating Segment Label;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   length _SEGMENT_LABEL_ $80;
MPRINT(EM_DIAGRAM):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(EM_DIAGRAM):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(EM_DIAGRAM):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * TOOL: Extension Class;
MPRINT(EM_DIAGRAM):   * TYPE: ASSESS;
MPRINT(EM_DIAGRAM):   * NODE: Prof5;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
107999     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Dependency structure written to data set _TEMP.
NOTE: PROCEDURE FCMP used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
108000     quit;
108001     filename _pref;
MPRINT(EM_DIAGRAM):   filename _pref;
NOTE: Fileref _PREF has been deassigned.
108002     proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
MPRINT(EM_DIAGRAM):    proc sort data=_temp(keep=RHS rename=(RHS=NAME)) NODUPKEY;
108003     by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
108004     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 548 observations read from the data set WORK._TEMP.
NOTE: 497 observations with duplicate key values were deleted.
NOTE: The data set WORK._TEMP has 51 observations and 1 variables.
NOTE: Compressing data set WORK._TEMP increased size by 100.00 percent. 
      Compressed is 2 pages; un-compressed would require 1 pages.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Score: Determine output variables meta;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.FIMPORT3_DATA noprint out=_originalvar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\DROPINPUT.sas";
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _drpfrf;
MPRINT(EM_DIAGRAM):   set _originalvar end=eof;
MPRINT(EM_DIAGRAM):   length string $200;
MPRINT(EM_DIAGRAM):   if _N_=1 then put 'drop ';
MPRINT(EM_DIAGRAM):   string = "'"!!tranwrd(trim(NAME), "'", "''")!!"'n";
MPRINT(EM_DIAGRAM):   put string;
MPRINT(EM_DIAGRAM):   if eof then put ';';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT3_DATA;
MPRINT(EM_DIAGRAM):   drop 'Age'n 'Career'n 'Contact_Type'n 'Education'n 'Marital_Statues'n 'Mortage'n 'Number_of_Contacts'n 'Personal_Loan'n 'Subscribed'n ;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _drpfrf;
MPRINT(EM_DIAGRAM):   proc contents data =WORK.SCORE_OUTPUTMETA noprint out=WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.SCORE_OUTPUTMETA;
MPRINT(EM_DIAGRAM):   length role $32 name_prefix $8;
MPRINT(EM_DIAGRAM):   set WORK.SCORE_OUTPUTMETA(keep=name type length label format informat rename=(type=itype)) end=_eof;
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   else type = 'C';
MPRINT(EM_DIAGRAM):   drop name_prefix itype;
MPRINT(EM_DIAGRAM):   if name = '_WARN_' then do;
MPRINT(EM_DIAGRAM):   role = 'ASSESS';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   name_prefix = scan(NAME, 1, '_');
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then role = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   else if name_prefix ='P' then role = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix ='R' then role = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then role = 'DECISION';
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then role = 'ASSESS';
MPRINT(EM_DIAGRAM):   else role = 'TRANSFORM';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if _eof then call symput('NumOutputVars', strip(put(_N_, best.)));
MPRINT(EM_DIAGRAM):   run;
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _tempFmt;
MPRINT(EM_DIAGRAM):   length format $33;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_tempFmt;
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne '')) out=temp2(rename=(fmtname=format));
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data temp2;
MPRINT(EM_DIAGRAM):   merge temp2(in=_a) _tempFmt(in=_b);
MPRINT(EM_DIAGRAM):   by format;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable format by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   proc sort data=temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set temp2;
MPRINT(EM_DIAGRAM):   by libname memname;
MPRINT(EM_DIAGRAM):   if first.libname and first.memname then do;
MPRINT(EM_DIAGRAM):   call execute("proc format lib="!!libname!!'.'!!memname!!"cntlout=work._fmtout;");
MPRINT(EM_DIAGRAM):   call execute("select");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call execute (format);
MPRINT(EM_DIAGRAM):   if last.libname and last.memname then do;
MPRINT(EM_DIAGRAM):   call execute(";");
MPRINT(EM_DIAGRAM):   call execute("proc append base=WORK._EMFORMAT data=work._fmtout force;");
MPRINT(EM_DIAGRAM):   call execute("run;");
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=WORK._EMFORMAT nodupkey;
MPRINT(EM_DIAGRAM):   by fmtname;
MPRINT(EM_DIAGRAM):   where fmtname ne '_EMFMT';
MPRINT(EM_DIAGRAM):   run;
Traverser: Traverser invoked.  MPCONNECT command is sas. 
Traverser: Beginning flow traversal 
MPRINT(EM_DIAGRAM):    options mprint;
MPRINT(EM_DIAGRAM):   filename _code "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1PM_M1Wscore.sas";
MPRINT(EM_DIAGRAM):   filename _xml "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml";




MPRINT(SCOREXML):   PROC FCMP NOEXECUTE IMPUTEDDEPS OUTDEPS=WORK._alldeps;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(SCOREXML):   * Project Name: 20161277_CAassignment2;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: All Tasks;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 28SEP2020:04:23:58;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT3;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus5;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Age ;
MPRINT(SCOREXML):   drop T_Age ;
MPRINT(SCOREXML):   if missing( Age ) then T_Age = .;
MPRINT(SCOREXML):   else T_Age = (Age - 39.8608707020525) * 0.09718656389406;
MPRINT(SCOREXML):   *** Standardize Number_of_Contacts ;
MPRINT(SCOREXML):   drop T_Number_of_Contacts ;
MPRINT(SCOREXML):   if missing( Number_of_Contacts ) then T_Number_of_Contacts = .;
MPRINT(SCOREXML):   else T_Number_of_Contacts = (Number_of_Contacts - 2.56666230879853) * 0.36134043338427;
MPRINT(SCOREXML):   *** Generate dummy variables for Career ;
MPRINT(SCOREXML):   drop Careeradministration Careerblue_collar Careerentrepreneur Careerhousemaid Careermanagement Careerretired Careerself_employed Careerservices Careerstudent Careertechnician Careerunemployed ;
MPRINT(SCOREXML):   if missing( Career ) then do;
MPRINT(SCOREXML):   Careeradministration = .;
MPRINT(SCOREXML):   Careerblue_collar = .;
MPRINT(SCOREXML):   Careerentrepreneur = .;
MPRINT(SCOREXML):   Careerhousemaid = .;
MPRINT(SCOREXML):   Careermanagement = .;
MPRINT(SCOREXML):   Careerretired = .;
MPRINT(SCOREXML):   Careerself_employed = .;
MPRINT(SCOREXML):   Careerservices = .;
MPRINT(SCOREXML):   Careerstudent = .;
MPRINT(SCOREXML):   Careertechnician = .;
MPRINT(SCOREXML):   Careerunemployed = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm14 $ 14;
MPRINT(SCOREXML):   drop _dm14 ;
MPRINT(SCOREXML):   _dm14 = put( Career , $14. );
MPRINT(DMNORMIP):   call dmnorm(_dm14,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   _dm_find = 0;
MPRINT(SCOREXML):   drop _dm_find;
MPRINT(SCOREXML):   if _dm14 <= 'RETIRED' then do;
MPRINT(SCOREXML):   if _dm14 <= 'ENTREPRENEUR' then do;
MPRINT(SCOREXML):   if _dm14 <= 'BLUE-COLLAR' then do;
MPRINT(SCOREXML):   if _dm14 = 'ADMINISTRATION' then do;
MPRINT(SCOREXML):   Careeradministration = 0.50889118500978;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 = 'BLUE-COLLAR' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = 0.56147396576531;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 = 'ENTREPRENEUR' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = 1.5701943823646;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 <= 'MANAGEMENT' then do;
MPRINT(SCOREXML):   if _dm14 = 'HOUSEMAID' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = 1.85246142180295;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 = 'MANAGEMENT' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = 1.08791241838279;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 = 'RETIRED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = 1.45387056599005;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 <= 'STUDENT' then do;
MPRINT(SCOREXML):   if _dm14 <= 'SERVICES' then do;
MPRINT(SCOREXML):   if _dm14 = 'SELF-EMPLOYED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = 1.57681828530897;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 = 'SERVICES' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = 0.91907748535592;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 = 'STUDENT' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = 2.22766154295433;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 = 'TECHNICIAN' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = 0.67382109265536;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 = 'UNEMPLOYED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = 1.87600692443571;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not _dm_find then do;
MPRINT(SCOREXML):   Careeradministration = .;
MPRINT(SCOREXML):   Careerblue_collar = .;
MPRINT(SCOREXML):   Careerentrepreneur = .;
MPRINT(SCOREXML):   Careerhousemaid = .;
MPRINT(SCOREXML):   Careermanagement = .;
MPRINT(SCOREXML):   Careerretired = .;
MPRINT(SCOREXML):   Careerself_employed = .;
MPRINT(SCOREXML):   Careerservices = .;
MPRINT(SCOREXML):   Careerstudent = .;
MPRINT(SCOREXML):   Careertechnician = .;
MPRINT(SCOREXML):   Careerunemployed = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Contact_Type ;
MPRINT(SCOREXML):   drop Contact_Typecellular Contact_Typetelephone ;
MPRINT(SCOREXML):   if missing( Contact_Type ) then do;
MPRINT(SCOREXML):   Contact_Typecellular = .;
MPRINT(SCOREXML):   Contact_Typetelephone = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm9 $ 9;
MPRINT(SCOREXML):   drop _dm9 ;
MPRINT(SCOREXML):   _dm9 = put( Contact_Type , $9. );
MPRINT(DMNORMIP):   call dmnorm(_dm9,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm9 = 'CELLULAR' then do;
MPRINT(SCOREXML):   Contact_Typecellular = 0.5314009348507;
MPRINT(SCOREXML):   Contact_Typetelephone = -0.5314009348507;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm9 = 'TELEPHONE' then do;
MPRINT(SCOREXML):   Contact_Typecellular = -0.94088454423979;
MPRINT(SCOREXML):   Contact_Typetelephone = 0.94088454423979;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Contact_Typecellular = .;
MPRINT(SCOREXML):   Contact_Typetelephone = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Education ;
MPRINT(SCOREXML):   drop Educationilliterate Educationprimary_education Educationprofessional_educat Educationsecondary_education Educationuniversity_educatio ;
MPRINT(SCOREXML):   if missing( Education ) then do;
MPRINT(SCOREXML):   Educationilliterate = .;
MPRINT(SCOREXML):   Educationprimary_education = .;
MPRINT(SCOREXML):   Educationprofessional_educat = .;
MPRINT(SCOREXML):   Educationsecondary_education = .;
MPRINT(SCOREXML):   Educationuniversity_educatio = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm22 $ 22;
MPRINT(SCOREXML):   drop _dm22 ;
MPRINT(SCOREXML):   _dm22 = put( Education , $22. );
MPRINT(DMNORMIP):   call dmnorm(_dm22,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   _dm_find = 0;
MPRINT(SCOREXML):   drop _dm_find;
MPRINT(SCOREXML):   if _dm22 <= 'PROFESSIONAL EDUCATION' then do;
MPRINT(SCOREXML):   if _dm22 <= 'PRIMARY EDUCATION' then do;
MPRINT(SCOREXML):   if _dm22 = 'ILLITERATE' then do;
MPRINT(SCOREXML):   Educationilliterate = 20.6090596234465;
MPRINT(SCOREXML):   Educationprimary_education = -0.19682294664746;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17542254053591;
MPRINT(SCOREXML):   Educationsecondary_education = -0.36121784809716;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm22 = 'PRIMARY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00970421621424;
MPRINT(SCOREXML):   Educationprimary_education = 1.01611511241349;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17542254053591;
MPRINT(SCOREXML):   Educationsecondary_education = -0.36121784809716;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm22 = 'PROFESSIONAL EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00970421621424;
MPRINT(SCOREXML):   Educationprimary_education = -0.19682294664746;
MPRINT(SCOREXML):   Educationprofessional_educat = 1.14007453060057;
MPRINT(SCOREXML):   Educationsecondary_education = -0.36121784809716;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm22 = 'SECONDARY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00970421621424;
MPRINT(SCOREXML):   Educationprimary_education = -0.19682294664746;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17542254053591;
MPRINT(SCOREXML):   Educationsecondary_education = 0.55366801948403;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm22 = 'UNIVERSITY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00970421621424;
MPRINT(SCOREXML):   Educationprimary_education = -0.19682294664746;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17542254053591;
MPRINT(SCOREXML):   Educationsecondary_education = -0.36121784809716;
MPRINT(SCOREXML):   Educationuniversity_educatio = 0.66862327682085;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not _dm_find then do;
MPRINT(SCOREXML):   Educationilliterate = .;
MPRINT(SCOREXML):   Educationprimary_education = .;
MPRINT(SCOREXML):   Educationprofessional_educat = .;
MPRINT(SCOREXML):   Educationsecondary_education = .;
MPRINT(SCOREXML):   Educationuniversity_educatio = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Marital_Statues ;
MPRINT(SCOREXML):   drop Marital_Statuesdivorced Marital_Statuesmarried Marital_Statuessingle ;
MPRINT(SCOREXML):   if missing( Marital_Statues ) then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = .;
MPRINT(SCOREXML):   Marital_Statuesmarried = .;
MPRINT(SCOREXML):   Marital_Statuessingle = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm8 $ 8;
MPRINT(SCOREXML):   drop _dm8 ;
MPRINT(SCOREXML):   _dm8 = put( Marital_Statues , $8. );
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm8 = 'MARRIED' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = -0.20553878536687;
MPRINT(SCOREXML):   Marital_Statuesmarried = 0.46536123012655;
MPRINT(SCOREXML):   Marital_Statuessingle = -0.36123677782606;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm8 = 'SINGLE' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = -0.20553878536687;
MPRINT(SCOREXML):   Marital_Statuesmarried = -0.71627070761013;
MPRINT(SCOREXML):   Marital_Statuessingle = 0.9227316764451;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm8 = 'DIVORCED' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = 1.62171152759367;
MPRINT(SCOREXML):   Marital_Statuesmarried = -0.71627070761013;
MPRINT(SCOREXML):   Marital_Statuessingle = -0.36123677782606;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = .;
MPRINT(SCOREXML):   Marital_Statuesmarried = .;
MPRINT(SCOREXML):   Marital_Statuessingle = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Mortage ;
MPRINT(SCOREXML):   drop Mortageno Mortageyes ;
MPRINT(SCOREXML):   if missing( Mortage ) then do;
MPRINT(SCOREXML):   Mortageno = .;
MPRINT(SCOREXML):   Mortageyes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( Mortage , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   Mortageno = -0.65517776074461;
MPRINT(SCOREXML):   Mortageyes = 0.65517776074461;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   Mortageno = 0.76313171226595;
MPRINT(SCOREXML):   Mortageyes = -0.76313171226595;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Mortageno = .;
MPRINT(SCOREXML):   Mortageyes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Personal_Loan ;
MPRINT(SCOREXML):   drop Personal_Loanno Personal_Loanyes ;
MPRINT(SCOREXML):   if missing( Personal_Loan ) then do;
MPRINT(SCOREXML):   Personal_Loanno = .;
MPRINT(SCOREXML):   Personal_Loanyes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( Personal_Loan , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   Personal_Loanno = 0.30377980276534;
MPRINT(SCOREXML):   Personal_Loanyes = -0.30377980276534;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   Personal_Loanno = -1.64588600639067;
MPRINT(SCOREXML):   Personal_Loanyes = 1.64588600639067;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Personal_Loanno = .;
MPRINT(SCOREXML):   Personal_Loanyes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUS5vlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUS5vads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUS5vads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Age ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( T_Age - 0.67862441630987 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( T_Age - -0.12220259479381 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( T_Age - 0.1219909351517 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( T_Age - -0.65843627090065 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( T_Age - 0.83960729150403 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_Number_of_Contacts ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( T_Number_of_Contacts - -0.24215468364507 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( T_Number_of_Contacts - 1.68542846033782 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( T_Number_of_Contacts - 6.62638765591009 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( T_Number_of_Contacts - -0.23646815611072 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( T_Number_of_Contacts - -0.10438566163705 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( Careeradministration ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careeradministration - -0.04598399950118 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careeradministration - 0.00991802300905 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careeradministration - 0.00821114469253 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careeradministration - 0.04401714138747 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careeradministration - -0.14044083990246 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerblue_collar ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careerblue_collar - 0.03061090015358 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careerblue_collar - 0.00437260676506 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careerblue_collar - -0.00158002613689 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careerblue_collar - -0.03162470003694 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careerblue_collar - 0.15959550450178 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerentrepreneur ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careerentrepreneur - 0.01288719716082 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careerentrepreneur - -0.00477410892134 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careerentrepreneur - 0.00654106554938 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careerentrepreneur - -0.01222396582552 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careerentrepreneur - 0.12300364470167 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerhousemaid ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careerhousemaid - 0.02587093195391 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careerhousemaid - 0.00123168382812 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careerhousemaid - 0.00611619501011 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careerhousemaid - -0.02632308365609 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careerhousemaid - 0.05656735534367 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careermanagement ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careermanagement - 0.01836862083405 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careermanagement - -0.0047049177197 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careermanagement - -0.00010482344414 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careermanagement - -0.01736000982203 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careermanagement - -0.08356069142518 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerretired ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careerretired - 0.06650903898865 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careerretired - -0.03756609459751 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careerretired - 0.02549572200917 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careerretired - -0.05988526248988 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careerretired - 0.19020561298176 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerself_employed ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careerself_employed - -0.00072825274511 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careerself_employed - 0.01009060404575 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careerself_employed - 0.00272421955306 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careerself_employed - -0.00154954413227 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careerself_employed - 0.21475972156128 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerservices ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careerservices - -0.0072044266476 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careerservices - 0.00372585495625 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careerservices - -0.00758733697619 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careerservices - 0.00674285627357 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careerservices - -0.09891082671327 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerstudent ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careerstudent - -0.03988642146948 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careerstudent - -0.01613636054135 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careerstudent - -0.03482272728658 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careerstudent - 0.04390704656271 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careerstudent - -0.04080813540891 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careertechnician ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careertechnician - -0.0268495448887 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careertechnician - 0.00653288906948 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careertechnician - -0.01541602314684 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careertechnician - 0.02605471970296 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careertechnician - -0.13491224136642 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerunemployed ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careerunemployed - 0.00348555718662 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careerunemployed - -0.00037423001092 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careerunemployed - 0.01247535460962 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careerunemployed - -0.00363758694804 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careerunemployed - -0.04845755775525 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Contact_Typecellular ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Contact_Typecellular - -0.22328638032515 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Contact_Typecellular - -0.32029154688064 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Contact_Typecellular - -0.32710853976407 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Contact_Typecellular - 0.29360177598494 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Contact_Typecellular - 0.28602002166895 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Contact_Typetelephone ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Contact_Typetelephone - 0.22328638032515 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Contact_Typetelephone - 0.32029154688064 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Contact_Typetelephone - 0.32710853976407 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Contact_Typetelephone - -0.29360177598494 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Contact_Typetelephone - -0.28602002166895 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Educationilliterate ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Educationilliterate - 20.6090596234465 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Educationprimary_education ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Educationprimary_education - 0.11253680674897 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Educationprimary_education - -0.01819802966053 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Educationprimary_education - 0.04320437374718 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Educationprimary_education - -0.10975177456013 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Educationprimary_education - -0.19682294664746 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationprofessional_educat ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Educationprofessional_educat - -0.00613666830991 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Educationprofessional_educat - 0.00090510921077 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Educationprofessional_educat - -0.01922895689174 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Educationprofessional_educat - 0.00656805206758 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Educationprofessional_educat - -0.17542254053591 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationsecondary_education ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Educationsecondary_education - -0.01566628434334 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Educationsecondary_education - 0.00828632064374 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Educationsecondary_education - -0.00636765671342 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Educationsecondary_education - 0.01455592676252 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Educationsecondary_education - -0.36121784809716 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Educationuniversity_educatio ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Educationuniversity_educatio - -0.06824584789428 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Educationuniversity_educatio - 0.00554383920626 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Educationuniversity_educatio - -0.01313378882323 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Educationuniversity_educatio - 0.06779190902318 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Educationuniversity_educatio - -0.29911428077881 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Marital_Statuesdivorced ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Marital_Statuesdivorced - 0.05526969614983 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Marital_Statuesdivorced - 0.00500857579729 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Marital_Statuesdivorced - 0.00177457467877 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Marital_Statuesdivorced - -0.05632784681289 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Marital_Statuesdivorced - -0.0025109728157 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Marital_Statuesmarried ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Marital_Statuesmarried - 0.23339703152983 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Marital_Statuesmarried - 0.03154045110447 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Marital_Statuesmarried - 0.01328568666528 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Marital_Statuesmarried - -0.24033752790255 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Marital_Statuesmarried - 0.2684225738371 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Marital_Statuessingle ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Marital_Statuessingle - -0.29244743006118 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Marital_Statuessingle - -0.03779146174423 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Marital_Statuessingle - -0.01568326242854 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Marital_Statuessingle - 0.30073255476575 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Marital_Statuessingle - -0.28990519703322 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Mortageno ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Mortageno - 0.14972192103062 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Mortageno - 0.05772911722366 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Mortageno - 0.07455930320541 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Mortageno - -0.16283046604234 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Mortageno - -0.02481799496213 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Mortageyes ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Mortageyes - -0.14972192103062 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Mortageyes - -0.05772911722366 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Mortageyes - -0.07455930320541 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Mortageyes - 0.16283046604234 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Mortageyes - 0.02481799496213 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Personal_Loanno ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Personal_Loanno - 0.10799840911316 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Personal_Loanno - 0.00863638956271 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Personal_Loanno - 0.00541405888395 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Personal_Loanno - -0.10986459268399 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Personal_Loanno - -0.02116449876065 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Personal_Loanyes ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Personal_Loanyes - -0.10799840911316 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Personal_Loanyes - -0.00863638956271 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Personal_Loanyes - -0.00541405888395 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Personal_Loanyes - 0.10986459268399 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Personal_Loanyes - 0.02116449876065 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   _vqnvar = 8 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 2.4556356947869E-11 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUS5vads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUS5vads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUS5vads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (8 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUS5vlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus5: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_='Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof5;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   QUIT;
MPRINT(SCOREXML):   Data _NULL_;
MPRINT(SCOREXML):   numobs=0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._alldeps","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numobs= attrn(dsid,"nlobs");
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open dependency data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if numobs <= 0 then do;
MPRINT(SCOREXML):   put "WARNING: ScoreXML: No variable dependencies found in code.";
MPRINT(SCOREXML):   call symput('SYSCC','4');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Rhs (keep=rhs RHS_NLiteral UNAME);
MPRINT(SCOREXML):   Set WORK._alldeps;
MPRINT(SCOREXML):   Length UNAME $32;
MPRINT(SCOREXML):   LABEL rhs = ;
MPRINT(SCOREXML):   LABEL RHS_NLiteral = ;
MPRINT(SCOREXML):   if RHS_Dropped = 0 AND (1 NE index(rhs, '_OLD_')) then do;
MPRINT(SCOREXML):   UNAME = UPCASE(rhs);
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Proc Sort Data=WORK._Rhs NODUP out=WORK._Rhs (rename=(rhs=NAME RHS_NLiteral=NLITERAL));
MPRINT(SCOREXML):   By UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Indatavmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("EMWS1.FIMPORT3_DATA","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   NAME = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open input data.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Indatavmeta NODUP Out=Work._Indatavmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   dsid = open("EMWS1.FIMPORT3_DATA");
MPRINT(SCOREXML):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   call symput('_engineTable', upcase(attrc(dsid, 'ENGINE')));
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Progout;
MPRINT(SCOREXML):   Set EMWS1.FIMPORT3_DATA;
MPRINT(SCOREXML):   * EM Version: 14.1;
MPRINT(SCOREXML):   * SAS Release: 9.04.01M3P062415;
MPRINT(SCOREXML):   * Host: ba-teaching;
MPRINT(SCOREXML):   * Encoding: wlatin1;
MPRINT(SCOREXML):   * Locale: en_US;
MPRINT(SCOREXML):   * Project Path: C:\Users\20161277\Documents\CA assign 2 data;
MPRINT(SCOREXML):   * Project Name: 20161277_CAassignment2;
MPRINT(SCOREXML):   * Diagram Id: EMWS1;
MPRINT(SCOREXML):   * Diagram Name: All Tasks;
MPRINT(SCOREXML):   * Generated by: 20161277;
MPRINT(SCOREXML):   * Date: 28SEP2020:04:23:58;
MPRINT(SCOREXML):   * Macro variable identifying the scored data set;
MPRINT(SCOREXML):   *%let EM_SCORE_OUTPUT=;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: SAMPLE;
MPRINT(SCOREXML):   * NODE: FIMPORT3;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Clustering;
MPRINT(SCOREXML):   * TYPE: EXPLORE;
MPRINT(SCOREXML):   * NODE: Clus5;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   *****************************************;
MPRINT(SCOREXML):   *** Begin Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   drop _dm_bad;
MPRINT(SCOREXML):   _dm_bad = 0;
MPRINT(SCOREXML):   *** Standardize Age ;
MPRINT(SCOREXML):   drop T_Age ;
MPRINT(SCOREXML):   if missing( Age ) then T_Age = .;
MPRINT(SCOREXML):   else T_Age = (Age - 39.8608707020525) * 0.09718656389406;
MPRINT(SCOREXML):   *** Standardize Number_of_Contacts ;
MPRINT(SCOREXML):   drop T_Number_of_Contacts ;
MPRINT(SCOREXML):   if missing( Number_of_Contacts ) then T_Number_of_Contacts = .;
MPRINT(SCOREXML):   else T_Number_of_Contacts = (Number_of_Contacts - 2.56666230879853) * 0.36134043338427;
MPRINT(SCOREXML):   *** Generate dummy variables for Career ;
MPRINT(SCOREXML):   drop Careeradministration Careerblue_collar Careerentrepreneur Careerhousemaid Careermanagement Careerretired Careerself_employed Careerservices Careerstudent Careertechnician Careerunemployed ;
MPRINT(SCOREXML):   if missing( Career ) then do;
MPRINT(SCOREXML):   Careeradministration = .;
MPRINT(SCOREXML):   Careerblue_collar = .;
MPRINT(SCOREXML):   Careerentrepreneur = .;
MPRINT(SCOREXML):   Careerhousemaid = .;
MPRINT(SCOREXML):   Careermanagement = .;
MPRINT(SCOREXML):   Careerretired = .;
MPRINT(SCOREXML):   Careerself_employed = .;
MPRINT(SCOREXML):   Careerservices = .;
MPRINT(SCOREXML):   Careerstudent = .;
MPRINT(SCOREXML):   Careertechnician = .;
MPRINT(SCOREXML):   Careerunemployed = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm14 $ 14;
MPRINT(SCOREXML):   drop _dm14 ;
MPRINT(SCOREXML):   _dm14 = put( Career , $14. );
MPRINT(DMNORMIP):   call dmnorm(_dm14,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   _dm_find = 0;
MPRINT(SCOREXML):   drop _dm_find;
MPRINT(SCOREXML):   if _dm14 <= 'RETIRED' then do;
MPRINT(SCOREXML):   if _dm14 <= 'ENTREPRENEUR' then do;
MPRINT(SCOREXML):   if _dm14 <= 'BLUE-COLLAR' then do;
MPRINT(SCOREXML):   if _dm14 = 'ADMINISTRATION' then do;
MPRINT(SCOREXML):   Careeradministration = 0.50889118500978;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 = 'BLUE-COLLAR' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = 0.56147396576531;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 = 'ENTREPRENEUR' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = 1.5701943823646;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 <= 'MANAGEMENT' then do;
MPRINT(SCOREXML):   if _dm14 = 'HOUSEMAID' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = 1.85246142180295;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 = 'MANAGEMENT' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = 1.08791241838279;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 = 'RETIRED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = 1.45387056599005;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 <= 'STUDENT' then do;
MPRINT(SCOREXML):   if _dm14 <= 'SERVICES' then do;
MPRINT(SCOREXML):   if _dm14 = 'SELF-EMPLOYED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = 1.57681828530897;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 = 'SERVICES' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = 0.91907748535592;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 = 'STUDENT' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = 2.22766154295433;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 = 'TECHNICIAN' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = 0.67382109265536;
MPRINT(SCOREXML):   Careerunemployed = -0.04845755775525;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm14 = 'UNEMPLOYED' then do;
MPRINT(SCOREXML):   Careeradministration = -0.17863684136789;
MPRINT(SCOREXML):   Careerblue_collar = -0.16190726450904;
MPRINT(SCOREXML):   Careerentrepreneur = -0.05789519750619;
MPRINT(SCOREXML):   Careerhousemaid = -0.0490734720951;
MPRINT(SCOREXML):   Careermanagement = -0.08356069142518;
MPRINT(SCOREXML):   Careerretired = -0.06252737761989;
MPRINT(SCOREXML):   Careerself_employed = -0.05765199118825;
MPRINT(SCOREXML):   Careerservices = -0.09891082671327;
MPRINT(SCOREXML):   Careerstudent = -0.04080813540891;
MPRINT(SCOREXML):   Careertechnician = -0.13491224136642;
MPRINT(SCOREXML):   Careerunemployed = 1.87600692443571;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not _dm_find then do;
MPRINT(SCOREXML):   Careeradministration = .;
MPRINT(SCOREXML):   Careerblue_collar = .;
MPRINT(SCOREXML):   Careerentrepreneur = .;
MPRINT(SCOREXML):   Careerhousemaid = .;
MPRINT(SCOREXML):   Careermanagement = .;
MPRINT(SCOREXML):   Careerretired = .;
MPRINT(SCOREXML):   Careerself_employed = .;
MPRINT(SCOREXML):   Careerservices = .;
MPRINT(SCOREXML):   Careerstudent = .;
MPRINT(SCOREXML):   Careertechnician = .;
MPRINT(SCOREXML):   Careerunemployed = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Contact_Type ;
MPRINT(SCOREXML):   drop Contact_Typecellular Contact_Typetelephone ;
MPRINT(SCOREXML):   if missing( Contact_Type ) then do;
MPRINT(SCOREXML):   Contact_Typecellular = .;
MPRINT(SCOREXML):   Contact_Typetelephone = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm9 $ 9;
MPRINT(SCOREXML):   drop _dm9 ;
MPRINT(SCOREXML):   _dm9 = put( Contact_Type , $9. );
MPRINT(DMNORMIP):   call dmnorm(_dm9,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm9 = 'CELLULAR' then do;
MPRINT(SCOREXML):   Contact_Typecellular = 0.5314009348507;
MPRINT(SCOREXML):   Contact_Typetelephone = -0.5314009348507;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm9 = 'TELEPHONE' then do;
MPRINT(SCOREXML):   Contact_Typecellular = -0.94088454423979;
MPRINT(SCOREXML):   Contact_Typetelephone = 0.94088454423979;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Contact_Typecellular = .;
MPRINT(SCOREXML):   Contact_Typetelephone = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Education ;
MPRINT(SCOREXML):   drop Educationilliterate Educationprimary_education Educationprofessional_educat Educationsecondary_education Educationuniversity_educatio ;
MPRINT(SCOREXML):   if missing( Education ) then do;
MPRINT(SCOREXML):   Educationilliterate = .;
MPRINT(SCOREXML):   Educationprimary_education = .;
MPRINT(SCOREXML):   Educationprofessional_educat = .;
MPRINT(SCOREXML):   Educationsecondary_education = .;
MPRINT(SCOREXML):   Educationuniversity_educatio = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm22 $ 22;
MPRINT(SCOREXML):   drop _dm22 ;
MPRINT(SCOREXML):   _dm22 = put( Education , $22. );
MPRINT(DMNORMIP):   call dmnorm(_dm22,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   _dm_find = 0;
MPRINT(SCOREXML):   drop _dm_find;
MPRINT(SCOREXML):   if _dm22 <= 'PROFESSIONAL EDUCATION' then do;
MPRINT(SCOREXML):   if _dm22 <= 'PRIMARY EDUCATION' then do;
MPRINT(SCOREXML):   if _dm22 = 'ILLITERATE' then do;
MPRINT(SCOREXML):   Educationilliterate = 20.6090596234465;
MPRINT(SCOREXML):   Educationprimary_education = -0.19682294664746;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17542254053591;
MPRINT(SCOREXML):   Educationsecondary_education = -0.36121784809716;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm22 = 'PRIMARY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00970421621424;
MPRINT(SCOREXML):   Educationprimary_education = 1.01611511241349;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17542254053591;
MPRINT(SCOREXML):   Educationsecondary_education = -0.36121784809716;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm22 = 'PROFESSIONAL EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00970421621424;
MPRINT(SCOREXML):   Educationprimary_education = -0.19682294664746;
MPRINT(SCOREXML):   Educationprofessional_educat = 1.14007453060057;
MPRINT(SCOREXML):   Educationsecondary_education = -0.36121784809716;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm22 = 'SECONDARY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00970421621424;
MPRINT(SCOREXML):   Educationprimary_education = -0.19682294664746;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17542254053591;
MPRINT(SCOREXML):   Educationsecondary_education = 0.55366801948403;
MPRINT(SCOREXML):   Educationuniversity_educatio = -0.29911428077881;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   if _dm22 = 'UNIVERSITY EDUCATION' then do;
MPRINT(SCOREXML):   Educationilliterate = -0.00970421621424;
MPRINT(SCOREXML):   Educationprimary_education = -0.19682294664746;
MPRINT(SCOREXML):   Educationprofessional_educat = -0.17542254053591;
MPRINT(SCOREXML):   Educationsecondary_education = -0.36121784809716;
MPRINT(SCOREXML):   Educationuniversity_educatio = 0.66862327682085;
MPRINT(SCOREXML):   _dm_find = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not _dm_find then do;
MPRINT(SCOREXML):   Educationilliterate = .;
MPRINT(SCOREXML):   Educationprimary_education = .;
MPRINT(SCOREXML):   Educationprofessional_educat = .;
MPRINT(SCOREXML):   Educationsecondary_education = .;
MPRINT(SCOREXML):   Educationuniversity_educatio = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Marital_Statues ;
MPRINT(SCOREXML):   drop Marital_Statuesdivorced Marital_Statuesmarried Marital_Statuessingle ;
MPRINT(SCOREXML):   if missing( Marital_Statues ) then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = .;
MPRINT(SCOREXML):   Marital_Statuesmarried = .;
MPRINT(SCOREXML):   Marital_Statuessingle = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm8 $ 8;
MPRINT(SCOREXML):   drop _dm8 ;
MPRINT(SCOREXML):   _dm8 = put( Marital_Statues , $8. );
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm8 = 'MARRIED' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = -0.20553878536687;
MPRINT(SCOREXML):   Marital_Statuesmarried = 0.46536123012655;
MPRINT(SCOREXML):   Marital_Statuessingle = -0.36123677782606;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm8 = 'SINGLE' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = -0.20553878536687;
MPRINT(SCOREXML):   Marital_Statuesmarried = -0.71627070761013;
MPRINT(SCOREXML):   Marital_Statuessingle = 0.9227316764451;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm8 = 'DIVORCED' then do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = 1.62171152759367;
MPRINT(SCOREXML):   Marital_Statuesmarried = -0.71627070761013;
MPRINT(SCOREXML):   Marital_Statuessingle = -0.36123677782606;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Marital_Statuesdivorced = .;
MPRINT(SCOREXML):   Marital_Statuesmarried = .;
MPRINT(SCOREXML):   Marital_Statuessingle = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Mortage ;
MPRINT(SCOREXML):   drop Mortageno Mortageyes ;
MPRINT(SCOREXML):   if missing( Mortage ) then do;
MPRINT(SCOREXML):   Mortageno = .;
MPRINT(SCOREXML):   Mortageyes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( Mortage , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   Mortageno = -0.65517776074461;
MPRINT(SCOREXML):   Mortageyes = 0.65517776074461;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   Mortageno = 0.76313171226595;
MPRINT(SCOREXML):   Mortageyes = -0.76313171226595;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Mortageno = .;
MPRINT(SCOREXML):   Mortageyes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** Generate dummy variables for Personal_Loan ;
MPRINT(SCOREXML):   drop Personal_Loanno Personal_Loanyes ;
MPRINT(SCOREXML):   if missing( Personal_Loan ) then do;
MPRINT(SCOREXML):   Personal_Loanno = .;
MPRINT(SCOREXML):   Personal_Loanyes = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   length _dm3 $ 3;
MPRINT(SCOREXML):   drop _dm3 ;
MPRINT(SCOREXML):   _dm3 = put( Personal_Loan , $3. );
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(SCOREXML):   if _dm3 = 'NO' then do;
MPRINT(SCOREXML):   Personal_Loanno = 0.30377980276534;
MPRINT(SCOREXML):   Personal_Loanyes = -0.30377980276534;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else if _dm3 = 'YES' then do;
MPRINT(SCOREXML):   Personal_Loanno = -1.64588600639067;
MPRINT(SCOREXML):   Personal_Loanyes = 1.64588600639067;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   Personal_Loanno = .;
MPRINT(SCOREXML):   Personal_Loanyes = .;
MPRINT(SCOREXML):   _DM_BAD = 1;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** End Class Look-up, Standardization, Replacement ;
MPRINT(SCOREXML):   *** Omitted Cases;
MPRINT(SCOREXML):   if _dm_bad then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   goto CLUS5vlex ;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   *** omitted;
MPRINT(SCOREXML):   *** Compute Distances and Cluster Membership;
MPRINT(SCOREXML):   label _SEGMENT_ = 'Segment Id' ;
MPRINT(SCOREXML):   label Distance = 'Distance' ;
MPRINT(SCOREXML):   array CLUS5vads [5] _temporary_;
MPRINT(SCOREXML):   drop _vqclus _vqmvar _vqnvar;
MPRINT(SCOREXML):   _vqmvar = 0;
MPRINT(SCOREXML):   do _vqclus = 1 to 5;
MPRINT(SCOREXML):   CLUS5vads [_vqclus] = 0;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   if not missing( T_Age ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( T_Age - 0.67862441630987 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( T_Age - -0.12220259479381 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( T_Age - 0.1219909351517 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( T_Age - -0.65843627090065 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( T_Age - 0.83960729150403 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( T_Number_of_Contacts ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( T_Number_of_Contacts - -0.24215468364507 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( T_Number_of_Contacts - 1.68542846033782 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( T_Number_of_Contacts - 6.62638765591009 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( T_Number_of_Contacts - -0.23646815611072 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( T_Number_of_Contacts - -0.10438566163705 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 1;
MPRINT(SCOREXML):   if not missing( Careeradministration ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careeradministration - -0.04598399950118 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careeradministration - 0.00991802300905 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careeradministration - 0.00821114469253 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careeradministration - 0.04401714138747 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careeradministration - -0.14044083990246 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerblue_collar ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careerblue_collar - 0.03061090015358 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careerblue_collar - 0.00437260676506 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careerblue_collar - -0.00158002613689 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careerblue_collar - -0.03162470003694 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careerblue_collar - 0.15959550450178 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerentrepreneur ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careerentrepreneur - 0.01288719716082 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careerentrepreneur - -0.00477410892134 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careerentrepreneur - 0.00654106554938 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careerentrepreneur - -0.01222396582552 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careerentrepreneur - 0.12300364470167 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerhousemaid ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careerhousemaid - 0.02587093195391 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careerhousemaid - 0.00123168382812 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careerhousemaid - 0.00611619501011 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careerhousemaid - -0.02632308365609 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careerhousemaid - 0.05656735534367 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careermanagement ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careermanagement - 0.01836862083405 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careermanagement - -0.0047049177197 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careermanagement - -0.00010482344414 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careermanagement - -0.01736000982203 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careermanagement - -0.08356069142518 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerretired ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careerretired - 0.06650903898865 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careerretired - -0.03756609459751 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careerretired - 0.02549572200917 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careerretired - -0.05988526248988 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careerretired - 0.19020561298176 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerself_employed ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careerself_employed - -0.00072825274511 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careerself_employed - 0.01009060404575 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careerself_employed - 0.00272421955306 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careerself_employed - -0.00154954413227 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careerself_employed - 0.21475972156128 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerservices ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careerservices - -0.0072044266476 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careerservices - 0.00372585495625 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careerservices - -0.00758733697619 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careerservices - 0.00674285627357 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careerservices - -0.09891082671327 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerstudent ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careerstudent - -0.03988642146948 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careerstudent - -0.01613636054135 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careerstudent - -0.03482272728658 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careerstudent - 0.04390704656271 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careerstudent - -0.04080813540891 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careertechnician ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careertechnician - -0.0268495448887 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careertechnician - 0.00653288906948 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careertechnician - -0.01541602314684 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careertechnician - 0.02605471970296 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careertechnician - -0.13491224136642 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Careerunemployed ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Careerunemployed - 0.00348555718662 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Careerunemployed - -0.00037423001092 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Careerunemployed - 0.01247535460962 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Careerunemployed - -0.00363758694804 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Careerunemployed - -0.04845755775525 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.09090909090909;
MPRINT(SCOREXML):   if not missing( Contact_Typecellular ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Contact_Typecellular - -0.22328638032515 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Contact_Typecellular - -0.32029154688064 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Contact_Typecellular - -0.32710853976407 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Contact_Typecellular - 0.29360177598494 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Contact_Typecellular - 0.28602002166895 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Contact_Typetelephone ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Contact_Typetelephone - 0.22328638032515 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Contact_Typetelephone - 0.32029154688064 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Contact_Typetelephone - 0.32710853976407 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Contact_Typetelephone - -0.29360177598494 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Contact_Typetelephone - -0.28602002166895 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Educationilliterate ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Educationilliterate - -0.00970421621424 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Educationilliterate - 20.6090596234465 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Educationprimary_education ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Educationprimary_education - 0.11253680674897 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Educationprimary_education - -0.01819802966053 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Educationprimary_education - 0.04320437374718 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Educationprimary_education - -0.10975177456013 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Educationprimary_education - -0.19682294664746 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationprofessional_educat ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Educationprofessional_educat - -0.00613666830991 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Educationprofessional_educat - 0.00090510921077 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Educationprofessional_educat - -0.01922895689174 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Educationprofessional_educat - 0.00656805206758 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Educationprofessional_educat - -0.17542254053591 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.2;
MPRINT(SCOREXML):   if not missing( Educationsecondary_education ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Educationsecondary_education - -0.01566628434334 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Educationsecondary_education - 0.00828632064374 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Educationsecondary_education - -0.00636765671342 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Educationsecondary_education - 0.01455592676252 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Educationsecondary_education - -0.36121784809716 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Educationuniversity_educatio ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Educationuniversity_educatio - -0.06824584789428 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Educationuniversity_educatio - 0.00554383920626 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Educationuniversity_educatio - -0.01313378882323 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Educationuniversity_educatio - 0.06779190902318 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Educationuniversity_educatio - -0.29911428077881 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.19999999999999;
MPRINT(SCOREXML):   if not missing( Marital_Statuesdivorced ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Marital_Statuesdivorced - 0.05526969614983 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Marital_Statuesdivorced - 0.00500857579729 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Marital_Statuesdivorced - 0.00177457467877 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Marital_Statuesdivorced - -0.05632784681289 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Marital_Statuesdivorced - -0.0025109728157 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Marital_Statuesmarried ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Marital_Statuesmarried - 0.23339703152983 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Marital_Statuesmarried - 0.03154045110447 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Marital_Statuesmarried - 0.01328568666528 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Marital_Statuesmarried - -0.24033752790255 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Marital_Statuesmarried - 0.2684225738371 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Marital_Statuessingle ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Marital_Statuessingle - -0.29244743006118 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Marital_Statuessingle - -0.03779146174423 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Marital_Statuessingle - -0.01568326242854 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Marital_Statuessingle - 0.30073255476575 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Marital_Statuessingle - -0.28990519703322 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.33333333333333;
MPRINT(SCOREXML):   if not missing( Mortageno ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Mortageno - 0.14972192103062 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Mortageno - 0.05772911722366 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Mortageno - 0.07455930320541 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Mortageno - -0.16283046604234 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Mortageno - -0.02481799496213 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Mortageyes ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Mortageyes - -0.14972192103062 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Mortageyes - -0.05772911722366 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Mortageyes - -0.07455930320541 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Mortageyes - 0.16283046604234 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Mortageyes - 0.02481799496213 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Personal_Loanno ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Personal_Loanno - 0.10799840911316 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Personal_Loanno - 0.00863638956271 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Personal_Loanno - 0.00541405888395 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Personal_Loanno - -0.10986459268399 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Personal_Loanno - -0.02116449876065 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   if not missing( Personal_Loanyes ) then do;
MPRINT(SCOREXML):   CLUS5vads [1] + ( Personal_Loanyes - -0.10799840911316 )**2;
MPRINT(SCOREXML):   CLUS5vads [2] + ( Personal_Loanyes - -0.00863638956271 )**2;
MPRINT(SCOREXML):   CLUS5vads [3] + ( Personal_Loanyes - -0.00541405888395 )**2;
MPRINT(SCOREXML):   CLUS5vads [4] + ( Personal_Loanyes - 0.10986459268399 )**2;
MPRINT(SCOREXML):   CLUS5vads [5] + ( Personal_Loanyes - 0.02116449876065 )**2;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else _vqmvar + 0.5;
MPRINT(SCOREXML):   _vqnvar = 8 - _vqmvar;
MPRINT(SCOREXML):   if _vqnvar <= 2.4556356947869E-11 then do;
MPRINT(SCOREXML):   _SEGMENT_ = .;
MPRINT(SCOREXML):   Distance = .;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   _SEGMENT_ = 1;
MPRINT(SCOREXML):   Distance = CLUS5vads [1];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   drop _vqfzdst;
MPRINT(SCOREXML):   do _vqclus = 2 to 5;
MPRINT(SCOREXML):   if CLUS5vads [_vqclus] < _vqfzdst then do;
MPRINT(SCOREXML):   _SEGMENT_ = _vqclus;
MPRINT(SCOREXML):   Distance = CLUS5vads [_vqclus];
MPRINT(SCOREXML):   _vqfzdst = Distance * 0.99999999999988;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Distance = sqrt(Distance * (8 / _vqnvar));
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   CLUS5vlex :;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *** End Scoring Code from PROC DMVQ ***;
MPRINT(SCOREXML):   ***************************************;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * Clus5: Creating Segment Label;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   length _SEGMENT_LABEL_ $80;
MPRINT(SCOREXML):   label _SEGMENT_LABEL_= 'Segment Description';
MPRINT(SCOREXML):   if _SEGMENT_ = 1 then _SEGMENT_LABEL_="Cluster1";
MPRINT(SCOREXML):   else if _SEGMENT_ = 2 then _SEGMENT_LABEL_="Cluster2";
MPRINT(SCOREXML):   else if _SEGMENT_ = 3 then _SEGMENT_LABEL_="Cluster3";
MPRINT(SCOREXML):   else if _SEGMENT_ = 4 then _SEGMENT_LABEL_="Cluster4";
MPRINT(SCOREXML):   else if _SEGMENT_ = 5 then _SEGMENT_LABEL_="Cluster5";
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   * TOOL: Extension Class;
MPRINT(SCOREXML):   * TYPE: ASSESS;
MPRINT(SCOREXML):   * NODE: Prof5;
MPRINT(SCOREXML):   *------------------------------------------------------------*;
MPRINT(SCOREXML):   if _N_=1 then do;
MPRINT(SCOREXML):   output;
MPRINT(SCOREXML):   stop;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Varsmeta (KEEP= NAME UNAME TYPE LENGTH LABEL FORMAT KEEP);
MPRINT(SCOREXML):   LENGTH NAME $ 32;
MPRINT(SCOREXML):   LENGTH UNAME $ 32;
MPRINT(SCOREXML):   LENGTH TYPE $ 1;
MPRINT(SCOREXML):   LENGTH LENGTH $ 8;
MPRINT(SCOREXML):   LENGTH LABEL $ 256;
MPRINT(SCOREXML):   LENGTH FORMAT $32;
MPRINT(SCOREXML):   KEEP = 0;
MPRINT(SCOREXML):   dsid=OPEN("WORK._Progout","i");
MPRINT(SCOREXML):   if dsid then do;
MPRINT(SCOREXML):   numvars= attrn(dsid,"nvars");
MPRINT(SCOREXML):   do i=1 to numvars;
MPRINT(SCOREXML):   Name = varname(dsid,i);
MPRINT(SCOREXML):   UNAME = UPCASE(NAME);
MPRINT(SCOREXML):   vtype = vartype(dsid,i);
MPRINT(SCOREXML):   if vtype = 'N' then TYPE = 'N';
MPRINT(SCOREXML):   else TYPE = 'C';
MPRINT(SCOREXML):   nlen = varlen(dsid,i);
MPRINT(SCOREXML):   LENGTH = put(nlen, 8.);
MPRINT(SCOREXML):   LABEL = varlabel(dsid,i);
MPRINT(SCOREXML):   len = klength(LABEL);
MPRINT(SCOREXML):   if (len = 1 or len = 0) and (kindex(LABEL,"'")=1) then LABEL = " ";
MPRINT(SCOREXML):   FORMAT = varfmt(dsid,i);
MPRINT(SCOREXML):   OUTPUT;
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   dsid = close(dsid);
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   else do;
MPRINT(SCOREXML):   put "ERROR: ScoreXML: Unable to open program output.";
MPRINT(SCOREXML):   msg= sysmsg();
MPRINT(SCOREXML):   put msg;
MPRINT(SCOREXML):   call symput('SYSCC','1012');
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   RUN;
MPRINT(SCOREXML):   Proc Sort Data=Work._Varsmeta NODUP Out=Work._Varsmeta ;
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Invarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Rhs (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   if (a and b) then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   Data WORK._Outvarsmeta;
MPRINT(SCOREXML):   MERGE WORK._Varsmeta (in=a) WORK._Indatavmeta (in=b);
MPRINT(SCOREXML):   BY UNAME;
MPRINT(SCOREXML):   If a and not b then output;
MPRINT(SCOREXML):   Run;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   LENGTH strbuf $ 80;
MPRINT(SCOREXML):   strbuf = ' ';
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '<?xml version="1.0" encoding="utf-8"?>';
MPRINT(SCOREXML):   put '<Score>';
MPRINT(SCOREXML):   put @3 '<Producer>';
MPRINT(SCOREXML):   put @6 "<Name> SAS Enterprise Miner </Name>";
MPRINT(SCOREXML):   strbuf = '<Version> ' || "6.2" || ' </Version>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   syslocale = getpxlocale();
MPRINT(SCOREXML):   strbuf = '<Locale> '|| strip(syslocale) ||' </Locale>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   sysencode = getpxencoding('sas12');
MPRINT(SCOREXML):   strbuf = '<Encoding> '|| strip(sysencode) ||' </Encoding>';
MPRINT(SCOREXML):   put @6 strbuf;
MPRINT(SCOREXML):   put @3 '</Producer>';
MPRINT(SCOREXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(SCOREXML):   put @3 '<CFunction>';
MPRINT(SCOREXML):   put @6 '<Name> score </Name>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="input">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "8" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @6 '<Parameter usage="output">';
MPRINT(SCOREXML):   put @9 '<Type> Parm* </Type>';
MPRINT(SCOREXML):   strbuf = '<NumElements> ' || "3" || ' </NumElements>';
MPRINT(SCOREXML):   put @9 strbuf;
MPRINT(SCOREXML):   put @6 '</Parameter>';
MPRINT(SCOREXML):   put @3 '</CFunction>';
MPRINT(SCOREXML):   end;
MPRINT(SCOREXML):   Run;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Invarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = ' <Input count="' || "8" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "8" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "INPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(MKVARXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(MKVARXML):   Data _null_;
MPRINT(MKVARXML):   Set WORK._Outvarsmeta end=eof;
MPRINT(MKVARXML):   Retain varindex 0;
MPRINT(MKVARXML):   Length keepflag $5;
MPRINT(MKVARXML):   Length strbuf $ 1024;
MPRINT(MKVARXML):   Length vindexc $12;
MPRINT(MKVARXML):   strbuf = ' ';
MPRINT(MKVARXML):   file XMLfile;
MPRINT(MKVARXML):   keepflag = "false";
MPRINT(MKVARXML):   vindexc = put(varindex, BEST12.);
MPRINT(MKVARXML):   if _N_ = 1 then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = ' <Input count="' || "3" || '">';
MPRINT(MKVARXML):   else strbuf = ' <Output count="' || "3" || '">';
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if keepflag = "true" then do;
MPRINT(MKVARXML):   if (KEEP = 1) then strbuf = '<Variable index="'||strip(vindexc)||'" keep="true">';
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'" keep="false">';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else strbuf = '<Variable index="'||strip(vindexc)||'">';
MPRINT(MKVARXML):   put @6 strbuf;
MPRINT(MKVARXML):   if (NLITERAL = 1) then do;
MPRINT(MKVARXML):   strbuf = '<Vname>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   strbuf = '<![CDATA['||trim(name)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9'</Vname>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   strbuf = '<Name> '||strip(name)||' </Name>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if "GENERIC" = "CSCORE" then do;
MPRINT(MKVARXML):   CtypeVal = 'char';
MPRINT(MKVARXML):   NtypeVal = 'double';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   else do;
MPRINT(MKVARXML):   CtypeVal = 'C';
MPRINT(MKVARXML):   NtypeVal = 'N';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   if strip(type) = 'C' then strbuf = '<Type length="'|| strip(length)||'"> '||strip(CtypeVal)||' </Type>';
MPRINT(MKVARXML):   else strbuf = '<Type> '||strip(NtypeVal)||' </Type>';
MPRINT(MKVARXML):   put @9 strbuf;
MPRINT(MKVARXML):   if LengthN(LABEL) then do;
MPRINT(MKVARXML):   put @9 '<Description>';
MPRINT(MKVARXML):   strbuf = '<![CDATA['||strip(LABEL)||']]>';
MPRINT(MKVARXML):   put @12 strbuf;
MPRINT(MKVARXML):   put @9 '</Description>';
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   put @6 '</Variable>';
MPRINT(MKVARXML):   varindex = varindex +1;
MPRINT(MKVARXML):   if eof then do;
MPRINT(MKVARXML):   if "OUTPUT" = "INPUT" then strbuf = "</Input>";
MPRINT(MKVARXML):   else strbuf = "</Output>";
MPRINT(MKVARXML):   put @3 strbuf;
MPRINT(MKVARXML):   end;
MPRINT(MKVARXML):   Run;
MPRINT(SCOREXML):  ;
MPRINT(SCOREXML):   FILENAME XMLfile "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml" encoding="UTF-8" NOBOM MOD;
MPRINT(SCOREXML):   Data _null_;
MPRINT(SCOREXML):   file XMLfile;
MPRINT(SCOREXML):   put '</Score>';
MPRINT(SCOREXML):   Run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _code;
MPRINT(EM_DIAGRAM):   filename _xml;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create Input table;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc sort data=work._invarsmeta out=_inpckgtemp(keep=NAME);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.FIMPORT3_EMCMETADEFAULT out=_inpckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\input.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.input;
MPRINT(EM_DIAGRAM):   merge _inpckgtemp(in=_a) _inpckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):   
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=work._progout out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('work._progout');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set work._progout;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=work._progout out=WORK.M3R0954V noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3R0954V;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3R0954V(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3R0954V;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3R0954V;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M19S7ANG NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M19S7ANG;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M19S7ANG;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1ZZ32TV(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M19S7ANG;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M19S7ANG;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M19S7ANG;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M19S7ANG;
MPRINT(EMADVISECOLUMNS):   set WORK.M19S7ANG;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=work._empckgtemp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_outvarsmeta(keep=NAME LABEL) out=work._empckgtemp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _emrprt "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\output.xml" nobom;
MPRINT(EM_DIAGRAM):   libname _emrprt xml xmldataform=attribute encoding="UTF-8";
MPRINT(EM_DIAGRAM):   data _emrprt.output;
MPRINT(EM_DIAGRAM):   merge work._empckgtemp(in=_a) work._empckgtemp2(in=_b);
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if _a and _b then output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   libname _emrprt;
MPRINT(EM_DIAGRAM):   filename _emrprt;
MPRINT(EM_DIAGRAM):    proc datasets library=WORK NOLIST NOWARN NODETAILS;
MPRINT(EM_DIAGRAM):   delete _alldeps _Indatavmeta _Keepvars _Keepnames _Invarsmeta _Progout _Outvarsmeta _Rhs _Varsmeta;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof5_1ZQ1D\miningResult.xml' encoding="UTF-8" NOBOM;
*------------------------------------------------------------* 
* 
* FIMPORT3 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:24:02 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   proc compare base=EMWS1.FIMPORT3_emtrainvariable compare=EMWS1.FIMPORT3_variableSet out=diffDS noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   set diffDs end=eof;
MPRINT(EM_GETACTIONSTATUS):   if eof and _N_>0 then call symput('diffVar', 'Y');
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):    data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN19657";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT3_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.FIMPORT3_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.FIMPORT3_EMTRAINVARIABLE / view=WORK.FIMPORT3_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "DROP"n = "Drop (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT3_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:24:02 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.FIMPORT3_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length ROLE $32;
MPRINT(EM_DIAGRAM):   length LEVEL $10;
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   length DROP $1;
MPRINT(EM_DIAGRAM):   length ORDER $8;
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT3_EMCMETADEFAULT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base3HCUBZK as select * from WORK.M2EMM2RQ order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp3HCUBZK as select * from WORK.M261DR78 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base3HCUBZK compare=work._comp3HCUBZK out=WORK._DIFF0LLA18W noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP12RQDTRI as select * from WORK._DIFF0LLA18W where NAME in (select NAME from WORK._DIFF0LLA18W where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM0CWVT8V as select * from WORK._DIFF0LLA18W where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF0LLA18W where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM0CWVT8V as select * from WORK._DIFF0LLA18W where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF0LLA18W where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM0CWVT8V;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM0CWVT8V;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM0CWVT8V;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM0CWVT8V;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\VARIABLESETDELTA.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\DELTACODE.txt";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\EMNOTES.txt" encoding="UTF-8" NOBOM;
Traverser: WaitingNode "PROF5" 
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Clus5 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:24:03 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus5_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus5_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus5_EMTRAINVARIABLE / view=WORK.Clus5_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   label "REPORT"n = "Report (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus5_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus5_OUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus5_OUTMEAN / view=WORK.Clus5_OUTMEAN;
MPRINT(EM_DIAGRAM):   label "_CRIT_"n = "Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_XCONV_"n = "Maximum Relative Change in Cluster Seeds (N)";
MPRINT(EM_DIAGRAM):   label "_FCONV_"n = "Improvement in Clustering Criterion (N)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "_FREQ_"n = "Frequency of Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_RMSSTD_"n = "Root-Mean-Square Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "_RADIUS_"n = "Maximum Distance from Cluster Seed (N)";
MPRINT(EM_DIAGRAM):   label "_NEAR_"n = "Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "_GAP_"n = "Distance to Nearest Cluster (N)";
MPRINT(EM_DIAGRAM):   label "Age"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Number_of_Contacts"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Careeradministration"n = "Career=administration (N)";
MPRINT(EM_DIAGRAM):   label "Careerblue_collar"n = "Career=blue-collar (N)";
MPRINT(EM_DIAGRAM):   label "Careerentrepreneur"n = "Career=entrepreneur (N)";
MPRINT(EM_DIAGRAM):   label "Careerhousemaid"n = "Career=housemaid (N)";
MPRINT(EM_DIAGRAM):   label "Careermanagement"n = "Career=management (N)";
MPRINT(EM_DIAGRAM):   label "Careerretired"n = "Career=retired (N)";
MPRINT(EM_DIAGRAM):   label "Careerself_employed"n = "Career=self-employed (N)";
MPRINT(EM_DIAGRAM):   label "Careerservices"n = "Career=services (N)";
MPRINT(EM_DIAGRAM):   label "Careerstudent"n = "Career=student (N)";
MPRINT(EM_DIAGRAM):   label "Careertechnician"n = "Career=technician (N)";
MPRINT(EM_DIAGRAM):   label "Careerunemployed"n = "Career=unemployed (N)";
MPRINT(EM_DIAGRAM):   label "Contact_Typecellular"n = "Contact_Type=cellular (N)";
MPRINT(EM_DIAGRAM):   label "Contact_Typetelephone"n = "Contact_Type=telephone (N)";
MPRINT(EM_DIAGRAM):   label "Educationilliterate"n = "Education=illiterate (N)";
MPRINT(EM_DIAGRAM):   label "Educationprimary_education"n = "Education=primary education (N)";
MPRINT(EM_DIAGRAM):   label "Educationprofessional_educat"n = "Education=professional education (N)";
MPRINT(EM_DIAGRAM):   label "Educationsecondary_education"n = "Education=secondary education (N)";
MPRINT(EM_DIAGRAM):   label "Educationuniversity_educatio"n = "Education=university education (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuesdivorced"n = "Marital_Statues=divorced (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuesmarried"n = "Marital_Statues=married (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuessingle"n = "Marital_Statues=single (N)";
MPRINT(EM_DIAGRAM):   label "Mortageno"n = "Mortage=no (N)";
MPRINT(EM_DIAGRAM):   label "Mortageyes"n = "Mortage=yes (N)";
MPRINT(EM_DIAGRAM):   label "Personal_Loanno"n = "Personal_Loan=no (N)";
MPRINT(EM_DIAGRAM):   label "Personal_Loanyes"n = "Personal_Loan=yes (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus5_OUTMEAN(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus5_OUTSTAT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus5_OUTSTAT / view=WORK.Clus5_OUTSTAT;
MPRINT(EM_DIAGRAM):   label "_TYPE_"n = "Type of Observation (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Id (N)";
MPRINT(EM_DIAGRAM):   label "Over_All"n = "Statistic Applying Over All Variables (N)";
MPRINT(EM_DIAGRAM):   label "Age"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Number_of_Contacts"n = " (N)";
MPRINT(EM_DIAGRAM):   label "Careeradministration"n = "Career=administration (N)";
MPRINT(EM_DIAGRAM):   label "Careerblue_collar"n = "Career=blue-collar (N)";
MPRINT(EM_DIAGRAM):   label "Careerentrepreneur"n = "Career=entrepreneur (N)";
MPRINT(EM_DIAGRAM):   label "Careerhousemaid"n = "Career=housemaid (N)";
MPRINT(EM_DIAGRAM):   label "Careermanagement"n = "Career=management (N)";
MPRINT(EM_DIAGRAM):   label "Careerretired"n = "Career=retired (N)";
MPRINT(EM_DIAGRAM):   label "Careerself_employed"n = "Career=self-employed (N)";
MPRINT(EM_DIAGRAM):   label "Careerservices"n = "Career=services (N)";
MPRINT(EM_DIAGRAM):   label "Careerstudent"n = "Career=student (N)";
MPRINT(EM_DIAGRAM):   label "Careertechnician"n = "Career=technician (N)";
MPRINT(EM_DIAGRAM):   label "Careerunemployed"n = "Career=unemployed (N)";
MPRINT(EM_DIAGRAM):   label "Contact_Typecellular"n = "Contact_Type=cellular (N)";
MPRINT(EM_DIAGRAM):   label "Contact_Typetelephone"n = "Contact_Type=telephone (N)";
MPRINT(EM_DIAGRAM):   label "Educationilliterate"n = "Education=illiterate (N)";
MPRINT(EM_DIAGRAM):   label "Educationprimary_education"n = "Education=primary education (N)";
MPRINT(EM_DIAGRAM):   label "Educationprofessional_educat"n = "Education=professional education (N)";
MPRINT(EM_DIAGRAM):   label "Educationsecondary_education"n = "Education=secondary education (N)";
MPRINT(EM_DIAGRAM):   label "Educationuniversity_educatio"n = "Education=university education (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuesdivorced"n = "Marital_Statues=divorced (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuesmarried"n = "Marital_Statues=married (N)";
MPRINT(EM_DIAGRAM):   label "Marital_Statuessingle"n = "Marital_Statues=single (N)";
MPRINT(EM_DIAGRAM):   label "Mortageno"n = "Mortage=no (N)";
MPRINT(EM_DIAGRAM):   label "Mortageyes"n = "Mortage=yes (N)";
MPRINT(EM_DIAGRAM):   label "Personal_Loanno"n = "Personal_Loan=no (N)";
MPRINT(EM_DIAGRAM):   label "Personal_Loanyes"n = "Personal_Loan=yes (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus5_OUTSTAT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus5_INPUTMEAN OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus5_INPUTMEAN / view=WORK.Clus5_INPUTMEAN;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_CHAR_"n = "Segment Id (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Name (N)";
MPRINT(EM_DIAGRAM):   label "VARIABLE"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "INPUT"n = "Input (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "CV"n = "Coefficient of Variation (N)";
MPRINT(EM_DIAGRAM):   label "STDMEAN"n = "Normalized Mean (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus5_INPUTMEAN(obs=60000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus5_TREE_PLOT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus5_TREE_PLOT / view=WORK.Clus5_TREE_PLOT;
MPRINT(EM_DIAGRAM):   label "NODETEXT"n = "Node Text (C)";
MPRINT(EM_DIAGRAM):   label "TEXTALL"n = "All Text (C)";
MPRINT(EM_DIAGRAM):   label "N"n = "Train: Number of Observations (N)";
MPRINT(EM_DIAGRAM):   label "NODECOLOR"n = "Node Color (N)";
MPRINT(EM_DIAGRAM):   label "parent"n = "Parent Id (N)";
MPRINT(EM_DIAGRAM):   label "abovetext"n = "Above Text (C)";
MPRINT(EM_DIAGRAM):   label "NODE"n = "Node (N)";
MPRINT(EM_DIAGRAM):   label "DEPTH"n = "Depth (N)";
MPRINT(EM_DIAGRAM):   label "LINKWIDTH"n = "Link Width (N)";
MPRINT(EM_DIAGRAM):   label "belowtext"n = "Below Text (C)";
MPRINT(EM_DIAGRAM):   label "_RASE_"n = "Train: Root Average Square Error (N)";
MPRINT(EM_DIAGRAM):   label "P__SEGMENT_1"n = "Predicted Variable (N)";
MPRINT(EM_DIAGRAM):   label "traintotal"n = "Train Total (N)";
MPRINT(EM_DIAGRAM):   label "index"n = "Leaf Index (N)";
MPRINT(EM_DIAGRAM):   label "percevent_train"n = "Percent Cases (N)";
MPRINT(EM_DIAGRAM):   label "perc_train"n = "Event Percentage (N)";
MPRINT(EM_DIAGRAM):   label "tprob"n = "Training Percent (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus5_TREE_PLOT(obs=10000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus5_OUTIMPORT OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus5_OUTIMPORT / view=WORK.Clus5_OUTIMPORT;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NRULES"n = "Number of Splitting Rules (N)";
MPRINT(EM_DIAGRAM):   label "NSURROGATES"n = "Number of Surrogate Rules (N)";
MPRINT(EM_DIAGRAM):   label "IMPORTANCE"n = "Importance (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus5_OUTIMPORT(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus5_PROFILE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus5_PROFILE / view=WORK.Clus5_PROFILE;
MPRINT(EM_DIAGRAM):   label "BYPERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = "Segment Variable (N)";
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "NumericValue"n = "Numeric Value (N)";
MPRINT(EM_DIAGRAM):   label "FmtValue"n = "Formatted Value (C)";
MPRINT(EM_DIAGRAM):   label "COUNT"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "_Label_"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "orderedValue"n = "Ordered Values (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus5_PROFILE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Clus5_DISTANCE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Clus5_DISTANCE / view=WORK.Clus5_DISTANCE;
MPRINT(EM_DIAGRAM):   label "_SEGMENT_"n = " (C)";
MPRINT(EM_DIAGRAM):   label "_1"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_2"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_3"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_4"n = " (N)";
MPRINT(EM_DIAGRAM):   label "_5"n = " (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus5_DISTANCE(obs=60000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:24:04 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Clus5_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.FIMPORT3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   where(ROLE in("INPUT" "REJECTED" "FREQ" "ID"));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base3CN6XQY as select * from WORK.M1E5184M order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp3CN6XQY as select * from WORK.M0MQHAE6 order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base3CN6XQY compare=work._comp3CN6XQY out=WORK._DIFF0ZJWLZJ noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMNOTES.txt" encoding="UTF-8" NOBOM;
traverser_readyNode_note 
*------------------------------------------------------------* 
* 
* Prof5 : Beginning creation of SPK report 
* datetime : 28SEP2020:04:24:04 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):   
MPRINT(EM_GETACTIONSTATUS):   proc display c=sashelp.emutil.getactionstatus.scl;
MPRINT(EM_GETACTIONSTATUS):   run;
MPRINT(EM_GETACTIONSTATUS):   data _null_;
MPRINT(EM_GETACTIONSTATUS):   format modate best.;
MPRINT(EM_GETACTIONSTATUS):   set sashelp.Vextfl;
MPRINT(EM_GETACTIONSTATUS):   where fileref eq "#LN19771";
MPRINT(EM_GETACTIONSTATUS):   call symput('EM_FILEMODTIME', put(modate, best.));
MPRINT(EM_GETACTIONSTATUS):   run;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
MPRINT(EM_GETACTIONSTATUS):     
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _report_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof5_ReportDataModel.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof5_EMTRAINVARIABLE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof5_EMTRAINVARIABLE / view=WORK.Prof5_EMTRAINVARIABLE;
MPRINT(EM_DIAGRAM):   label "NAME"n = "Variable Name (C)";
MPRINT(EM_DIAGRAM):   label "ROLE"n = "Role (C)";
MPRINT(EM_DIAGRAM):   label "LEVEL"n = "Measurement Level (C)";
MPRINT(EM_DIAGRAM):   label "ORDER"n = "Order (C)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "USE"n = "Use (C)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof5_EMTRAINVARIABLE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof5_SIZE OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof5_SIZE / view=WORK.Prof5_SIZE;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Count"n = "Frequency Count (N)(12.0)";
MPRINT(EM_DIAGRAM):   label "PERCENT"n = "Percent (N)(5.2)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof5_SIZE(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof5_STATS OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof5_STATS / view=WORK.Prof5_STATS;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof5_STATS(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof5_CLASSDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof5_CLASSDIST / view=WORK.Prof5_CLASSDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (C)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Groupindex"n = "Group Index (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof5_CLASSDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof5_INTDIST OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof5_INTDIST / view=WORK.Prof5_INTDIST;
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "value"n = "Value (N)(12.3)";
MPRINT(EM_DIAGRAM):   label "count"n = "Frequency Count (N)";
MPRINT(EM_DIAGRAM):   label "percent"n = "Percent (N)";
MPRINT(EM_DIAGRAM):   label "Color"n = "Color (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof5_INTDIST(obs=20000);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc contents data=EMWS1.Prof5_WORTH OUT=WORK._DATAATTR(keep=NAME TYPE FORMAT formatl formatd LABEL VARNUM RENAME=(TYPE=NTYPE)) noprint;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   by VARNUM;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   set WORK._DATAATTR;
MPRINT(EM_DIAGRAM):   if ntype=1 then TYPE='N';
MPRINT(EM_DIAGRAM):   else TYPE='C';
MPRINT(EM_DIAGRAM):   drop NTYPE;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Prof5_WORTH / view=WORK.Prof5_WORTH;
MPRINT(EM_DIAGRAM):   label "Type"n = "Type (C)";
MPRINT(EM_DIAGRAM):   label "SegmentVariable"n = "Segment Variable (C)";
MPRINT(EM_DIAGRAM):   label "SegmentValue"n = "Segment Value (C)";
MPRINT(EM_DIAGRAM):   label "Variable"n = "Variable (C)";
MPRINT(EM_DIAGRAM):   label "Rank"n = "Rank (N)";
MPRINT(EM_DIAGRAM):   label "Worth"n = "Worth (N)";
MPRINT(EM_DIAGRAM):   label "LABEL"n = "Label (C)";
MPRINT(EM_DIAGRAM):   label "NUMCAT"n = "Number of Levels (N)(8.0)";
MPRINT(EM_DIAGRAM):   label "NMISS"n = "Missing (N)(9.0)";
MPRINT(EM_DIAGRAM):   label "MIN"n = "Minimum (N)";
MPRINT(EM_DIAGRAM):   label "MAX"n = "Maximum (N)";
MPRINT(EM_DIAGRAM):   label "MEAN"n = "Mean (N)";
MPRINT(EM_DIAGRAM):   label "STD"n = "Standard Deviation (N)";
MPRINT(EM_DIAGRAM):   label "SKEWNESS"n = "Skewness (N)";
MPRINT(EM_DIAGRAM):   label "KURTOSIS"n = "Kurtosis (N)";
MPRINT(EM_DIAGRAM):   set EMWS1.Prof5_WORTH(obs=20000);
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------* 
* 
* : End creation of SPK report 
* datetime : 28SEP2020:04:24:05 
* 
*------------------------------------------------------------* 
MPRINT(EM_DIAGRAM):    data WORK.Prof5_VARSETDEFAULT;
MPRINT(EM_DIAGRAM):   length USE $1;
MPRINT(EM_DIAGRAM):   label USE = "Use";
MPRINT(EM_DIAGRAM):   length REPORT $1;
MPRINT(EM_DIAGRAM):   label REPORT = "Report";
MPRINT(EM_DIAGRAM):   set EMWS1.Clus5_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create view work._base1WQT9O4 as select * from WORK.M0RJZ6UM order by NAME;
MPRINT(EM_DIAGRAM):   create view work._comp1WQT9O4 as select * from WORK.M12NSB2P order by NAME;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    proc compare data=work._base1WQT9O4 compare=work._comp1WQT9O4 out=WORK._DIFF3A8A0_I noprint outnoequal outbase outcomp outdiff;
MPRINT(EM_DIAGRAM):   id NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sql;
MPRINT(EM_DIAGRAM):   create table WORK._TMP108JQ1_4 as select * from WORK._DIFF3A8A0_I where NAME in (select NAME from WORK._DIFF3A8A0_I where _type_ = "DIF") order by NAME, _type_;
MPRINT(EM_DIAGRAM):   proc sql;
MPRINT(EM_DIAGRAM):   create table WORK.DELTAELEM3OJ1MS5 as select * from WORK._DIFF3A8A0_I where _type_ = "COMPARE" and NAME not in (select NAME from WORK._DIFF3A8A0_I where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   create table WORK.DELTDELEM3OJ1MS5 as select * from WORK._DIFF3A8A0_I where _type_ = "BASE" and NAME not in (select NAME from WORK._DIFF3A8A0_I where _type_ = "DIF");
MPRINT(EM_DIAGRAM):   data WORK.DELTAELEM3OJ1MS5;
MPRINT(EM_DIAGRAM):   set WORK.DELTAELEM3OJ1MS5;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.DELTDELEM3OJ1MS5;
MPRINT(EM_DIAGRAM):   set WORK.DELTDELEM3OJ1MS5;
MPRINT(EM_DIAGRAM):   drop _obs_ _type_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\USERTRAINCODE.sas";
MPRINT(EM_DIAGRAM):    filename _extfile "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMNOTES.txt" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\dsapimeta.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _pckger_ 'C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\layout.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    proc printto print=#LN19841;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options NODATE NONUMBER;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RUNSTATUS noobs label;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options DATE NUMBER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Report: Create C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof5_1ZQ1D;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   rc = 0;
MPRINT(EM_DIAGRAM):   Pack0VUD = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0VUD, "Profile", ' type="EM Result" version="14.1" Report="20161277_Assignment2_Prof5_1ZQ1D" nodeid="Prof5" description="Segment Profile" component="Profile"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Profile began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack0GMM = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack0GMM, "MININGRESULT", ' NAME="Mining Result Metadata"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package MININGRESULT began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0VUD, Pack0GMM, rc, "NESTED_NAME", "MININGRESULT");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F17OJ0Y0 "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0GMM, "fileref:F17OJ0Y0", "BINARY", "text/xml", 'SXML', 'NAME=SCOREXML TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2RN3NKI "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\input.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0GMM, "fileref:F2RN3NKI", "BINARY", "text/xml", 'INPUTTABLE', 'NAME=INPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\input.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1F5CW2P "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\output.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0GMM, "fileref:F1F5CW2P", "BINARY", "text/xml", 'OUTPUTTABLE', 'NAME=OUTPUTTABLE TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\output.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F21DW6BJ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof5_1ZQ1D\miningResult.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0GMM, "fileref:F21DW6BJ", "BINARY", "text/xml", 'MININGRESULT', 'NAME=MININGRESULT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof5_1ZQ1D\miningResult.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2T6J = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2T6J, "File Import - Task 4 - Combined", ' NAME="FIMPORT3"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package File Import - Task 4 - Combined began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2J_8RO_ "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT3_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2T6J, "fileref:F2J_8RO_", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT3_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0ETB7B9 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2T6J, "fileref:F0ETB7B9", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2EOORGD "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2T6J, "fileref:F2EOORGD", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack2T6J, "work", "FIMPORT3_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2L1L80Z "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2T6J, "fileref:F2L1L80Z", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F16_F041 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2T6J, "fileref:F16_F041", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2_SKODF "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2T6J, "fileref:F2_SKODF", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F08IWKFX "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2T6J, "fileref:F08IWKFX", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0VUD, Pack2T6J, rc, "NESTED_NAME", "FIMPORT3");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack34TW = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack34TW, "Cluster", ' NAME="Clus5"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Cluster began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F006MEPA "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus5_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack34TW, "fileref:F006MEPA", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus5_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0LE24NN "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack34TW, "fileref:F0LE24NN", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3R1S156 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack34TW, "fileref:F3R1S156", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack34TW, "work", "Clus5_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0HXXIZS "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack34TW, "fileref:F0HXXIZS", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2R39CW8 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack34TW, "fileref:F2R39CW8", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1E1NLGF "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack34TW, "fileref:F1E1NLGF", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3T1A2TQ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack34TW, "fileref:F3T1A2TQ", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F05_XGJB "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack34TW, "fileref:F05_XGJB", "TEXT", "text/plain", 'TOOLFLOWCODE', 'NAME=EMFLOWSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMFLOWSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F30EZJQ9 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMPUBLISHSCORE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack34TW, "fileref:F30EZJQ9", "TEXT", "text/plain", 'TOOLPUBCODE', 'NAME=EMPUBLISHSCORECODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMPUBLISHSCORE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack34TW, "work", "Clus5_OUTMEAN", "CLUSMEAN", "NAME=OUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack34TW, "work", "Clus5_OUTSTAT", "CLUSSTAT", "NAME=OUTSTAT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file CLUSSTAT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack34TW, "work", "Clus5_INPUTMEAN", "INPUTMEAN", "NAME=INPUTMEAN TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file INPUTMEAN inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack34TW, "work", "Clus5_TREE_PLOT", "TREE_PLOT", "NAME=TREE_PLOT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file TREE_PLOT inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F293Z4U6 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\ENGLISHRULES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack34TW, "fileref:F293Z4U6", "TEXT", "text/plain", 'ENGLISHRULES', 'NAME=EnglishRules TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\ENGLISHRULES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack34TW, "work", "Clus5_OUTIMPORT", "IMPORTANCE", "NAME=OUTIMPORT TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file IMPORTANCE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack34TW, "work", "Clus5_PROFILE", "Segment Profiles", "NAME=PROFILE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file PROFILE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2T17 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2T17, "GRAPH", ' NAME="GRAPH"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package GRAPH began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack34TW, Pack2T17, rc, "NESTED_NAME", "GRAPH");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0F5S0HO "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\GRAPH\Distance.gif";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2T17, "fileref:F0F5S0HO", "BINARY", "image/gif", 'Distance', 'NAME="Distance" TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\GRAPH\Distance.gif inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack34TW, "work", "Clus5_DISTANCE", "Distance Table", "NAME=DISTANCE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file DISTANCETABLE inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0VUD, Pack34TW, rc, "NESTED_NAME", "Clus5");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1LAK = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1LAK, "Segment Profile", ' NAME="Prof5"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Segment Profile began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1U9CNCB "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof5_ReportDataModel.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1LAK, "fileref:F1U9CNCB", "BINARY", "text/xml", 'Report Metadata', 'NAME=ReportMetadata TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof5_ReportDataModel.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1QS285U "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\TRAINPROPERTIES.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1LAK, "fileref:F1QS285U", "BINARY", "text/xml", 'TOOLPROP', 'NAME=TRAINPROPERTIES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\TRAINPROPERTIES.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2K_SRO2 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMRUNSTATUS.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1LAK, "fileref:F2K_SRO2", "BINARY", "text/xml", 'RUNSTATUS', 'NAME=EMRUNSTATUS TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMRUNSTATUS.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1LAK, "work", "Prof5_EMTRAINVARIABLE", "Training variables", "NAME=EMTRAINVARIABLE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file VARIABLES inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F10ZOF02 "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMLOG.log";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1LAK, "fileref:F10ZOF02", "BINARY", "text/plain", 'TOOLLOG', 'NAME=EMLOG TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMLOG.log inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2EJ0YHL "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMNOTES.txt";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1LAK, "fileref:F2EJ0YHL", "BINARY", "text/plain", 'NOTES', 'NAME=EMNOTES TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMNOTES.txt inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3HKV66I "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMOUTPUT.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1LAK, "fileref:F3HKV66I", "BINARY", "text/plain", 'TOOLOUTPUT', 'NAME=EMOUTPUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMOUTPUT.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F2GU2R9W "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMTRAINCODE.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1LAK, "fileref:F2GU2R9W", "TEXT", "text/plain", 'TOOLTRAINCODE', 'NAME=EMTRAINCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMTRAINCODE.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1PDCJLZ "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMCUSTOMGRAPH.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack1LAK, "fileref:F1PDCJLZ", "BINARY", "text/xml", 'USERGRAPH', 'NAME=EMCUSTOMGRAPH TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMCUSTOMGRAPH.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1LAK, "work", "Prof5_SIZE", "Profileview", "NAME=SIZE TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1LAK, "work", "Prof5_STATS", "Profileview", "NAME=STATS TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1LAK, "work", "Prof5_CLASSDIST", "Profileview", "NAME=CLASSDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1LAK, "work", "Prof5_INTDIST", "Profileview", "NAME=INTDIST TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file Profileview inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   prop="TRANSFORMATION_TYPE";
MPRINT(EM_DIAGRAM):   ttype='CSV';
MPRINT(EM_DIAGRAM):   call insert_dataset(Pack1LAK, "work", "Prof5_WORTH", "profworth", "NAME=WORTH TYPE=CSV", rc, prop, ttype );
MPRINT(EM_DIAGRAM):   if (rc eq 0) then put "CSV file profworth inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0VUD, Pack1LAK, rc, "NESTED_NAME", "Prof5");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack2LGD = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack2LGD, "WORKSPACE", ' NAME="Workspace configuration"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package WORKSPACE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0VUD, Pack2LGD, rc, "NESTED_NAME", "WORKSPACE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1WQ4V8Y "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\dsapi.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2LGD, "fileref:F1WQ4V8Y", "TEXT", "text/plain", 'Batch Code', 'NAME=BATCHCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\dsapi.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F0FY23OS "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\dsapimeta.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2LGD, "fileref:F0FY23OS", "BINARY", "text/xml", 'Batch Metadata', 'NAME=BATCHMETADATA TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\dsapimeta.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F3LM5DBV "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\layout.xml";
MPRINT(EM_DIAGRAM):   call insert_file(Pack2LGD, "fileref:F3LM5DBV", "BINARY", "text/xml", 'Properties', 'NAME=LAYOUT TYPE=BINARY', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\layout.xml inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F24UMHEL "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out";
MPRINT(EM_DIAGRAM):   call insert_file(Pack0VUD, "fileref:F24UMHEL", "TEXT", "text/plain", 'NODESTATUS', 'NAME=NODESTATUS TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1IRO = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1IRO, "PATHSCORE", ' NAME="Path score code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PATHSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack0VUD, Pack1IRO, rc, "NESTED_NAME", "PATHSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack3506 = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack3506, "SASSCORE", ' NAME="SAS Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package SASSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1IRO, Pack3506, rc, "NESTED_NAME", "SASSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   filename F1601_UU "C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1PM_M1Wscore.sas";
MPRINT(EM_DIAGRAM):   call insert_file(Pack3506, "fileref:F1601_UU", "TEXT", "text/plain", 'SASCODE', 'NAME=SASCODE TYPE=TEXT', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1PM_M1Wscore.sas inserted successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   Pack1H8L = 0;
MPRINT(EM_DIAGRAM):   call package_begin(Pack1H8L, "PMMLSCORE", ' NAME="PMML Score Code"', rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package PMMLSCORE began successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call insert_package(Pack1IRO, Pack1H8L, rc, "NESTED_NAME", "PMMLSCORE");
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "spk_PACKAGEINSERT_note";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   pubType = "TO_ARCHIVE";
MPRINT(EM_DIAGRAM):   properties='archive_path, archive_name';
MPRINT(EM_DIAGRAM):   path = "C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof5_1ZQ1D";
MPRINT(EM_DIAGRAM):   name = "miningResult";
MPRINT(EM_DIAGRAM):   call package_publish(Pack0VUD, pubType, rc, properties, path, name);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Publish package Pack0VUD successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   call package_end(Pack0VUD, rc);
MPRINT(EM_DIAGRAM):   if rc eq 0 then put "Package Pack0VUD ended successfully.";
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   msg = sysmsg();
MPRINT(EM_DIAGRAM):   put msg;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
Package Profile began successfully.
Package MININGRESULT began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\scorexml.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\input.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\output.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Reports\20161277_Assignment2_Prof5_1ZQ1D\miningResult.xml inserted successfully.
Package File Import - Task 4 - Combined began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\FIMPORT3_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\FIMPORT3\EMTRAINCODE.sas inserted successfully.
spk_PACKAGEINSERT_note
Package Cluster began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Clus5_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMFLOWSCORE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\EMPUBLISHSCORE.sas inserted successfully.
CSV file CLUSMEAN inserted successfully.
CSV file CLUSSTAT inserted successfully.
CSV file INPUTMEAN inserted successfully.
CSV file TREE_PLOT inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\ENGLISHRULES.txt inserted successfully.
CSV file IMPORTANCE inserted successfully.
CSV file PROFILE inserted successfully.
Package GRAPH began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Clus5\GRAPH\Distance.gif inserted successfully.
CSV file DISTANCETABLE inserted successfully.
spk_PACKAGEINSERT_note
Package Segment Profile began successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\Prof5_ReportDataModel.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\TRAINPROPERTIES.xml inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMRUNSTATUS.xml inserted successfully.
CSV file VARIABLES inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMLOG.log inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMNOTES.txt inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMOUTPUT.out inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMTRAINCODE.sas inserted successfully.
File C:\Users\20161277\Documents\CA assign 2 data\20161277_CAassignment2\Workspaces\EMWS1\Prof5\EMCUSTOMGRAPH.xml inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file Profileview inserted successfully.
CSV file profworth inserted successfully.
spk_PACKAGEINSERT_note
Package WORKSPACE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\dsapi.sas inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\dsapimeta.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_18MD33R\layout.xml inserted successfully.
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\runstatus.out inserted successfully.
Package PATHSCORE began successfully.
spk_PACKAGEINSERT_note
Package SASSCORE began successfully.
spk_PACKAGEINSERT_note
File C:\Users\20161277\AppData\Local\Temp\72\SAS Temporary Files\_TD46384_BA-TEACHING_\Prc2\P_1PM_M1Wscore.sas inserted successfully.
Package PMMLSCORE began successfully.
spk_PACKAGEINSERT_note
Publish package Pack0VUD successfully.
Package Pack0VUD ended successfully.
Traverser: Run Completed 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   filename F17OJ0Y0;
MPRINT(EM_DIAGRAM):   filename F2RN3NKI;
MPRINT(EM_DIAGRAM):   filename F1F5CW2P;
MPRINT(EM_DIAGRAM):   filename F21DW6BJ;
MPRINT(EM_DIAGRAM):   filename F2J_8RO_;
MPRINT(EM_DIAGRAM):   filename F0ETB7B9;
MPRINT(EM_DIAGRAM):   filename F2EOORGD;
MPRINT(EM_DIAGRAM):   filename F2L1L80Z;
MPRINT(EM_DIAGRAM):   filename F16_F041;
MPRINT(EM_DIAGRAM):   filename F2_SKODF;
MPRINT(EM_DIAGRAM):   filename F08IWKFX;
MPRINT(EM_DIAGRAM):   filename F006MEPA;
MPRINT(EM_DIAGRAM):   filename F0LE24NN;
MPRINT(EM_DIAGRAM):   filename F3R1S156;
MPRINT(EM_DIAGRAM):   filename F0HXXIZS;
MPRINT(EM_DIAGRAM):   filename F2R39CW8;
MPRINT(EM_DIAGRAM):   filename F1E1NLGF;
MPRINT(EM_DIAGRAM):   filename F3T1A2TQ;
MPRINT(EM_DIAGRAM):   filename F05_XGJB;
MPRINT(EM_DIAGRAM):   filename F30EZJQ9;
MPRINT(EM_DIAGRAM):   filename F293Z4U6;
MPRINT(EM_DIAGRAM):   filename F0F5S0HO;
MPRINT(EM_DIAGRAM):   filename F1U9CNCB;
MPRINT(EM_DIAGRAM):   filename F1QS285U;
MPRINT(EM_DIAGRAM):   filename F2K_SRO2;
MPRINT(EM_DIAGRAM):   filename F10ZOF02;
MPRINT(EM_DIAGRAM):   filename F2EJ0YHL;
MPRINT(EM_DIAGRAM):   filename F3HKV66I;
MPRINT(EM_DIAGRAM):   filename F2GU2R9W;
MPRINT(EM_DIAGRAM):   filename F1PDCJLZ;
MPRINT(EM_DIAGRAM):   filename F1WQ4V8Y;
MPRINT(EM_DIAGRAM):   filename F0FY23OS;
MPRINT(EM_DIAGRAM):   filename F3LM5DBV;
MPRINT(EM_DIAGRAM):   filename F24UMHEL;
MPRINT(EM_DIAGRAM):   filename F1601_UU;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   options notes source;
1 
1 
1 
1 
1 
1 
1 
111093     proc printto;
MPRINT(EM_DIAGRAM):    proc printto;
111094     run;
MPRINT(EM_DIAGRAM):   run;

